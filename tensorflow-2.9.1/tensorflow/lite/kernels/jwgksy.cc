/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

#include "tensorflow/lite/kernels/internal/optimized/integer_ops/depthwise_conv.h"

#include <stddef.h>
#include <stdint.h>
#include <vector>

#include "tensorflow/lite/c/builtin_op_data.h"
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/kernels/cpu_backend_context.h"
#include "tensorflow/lite/kernels/internal/compatibility.h"
#include "tensorflow/lite/kernels/internal/optimized/cpu_check.h"
#include "tensorflow/lite/kernels/internal/optimized/depthwiseconv_multithread.h"
#include "tensorflow/lite/kernels/internal/optimized/integer_ops/depthwise_conv_hybrid.h"
#include "tensorflow/lite/kernels/internal/optimized/neon_check.h"
#include "tensorflow/lite/kernels/internal/quantization_util.h"
#include "tensorflow/lite/kernels/internal/reference/depthwiseconv_float.h"
#include "tensorflow/lite/kernels/internal/reference/depthwiseconv_uint8.h"
#include "tensorflow/lite/kernels/internal/reference/integer_ops/depthwise_conv.h"
#include "tensorflow/lite/kernels/internal/tensor.h"
#include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
#include "tensorflow/lite/kernels/internal/tensor_utils.h"
#include "tensorflow/lite/kernels/internal/types.h"
#include "tensorflow/lite/kernels/kernel_util.h"
#include "tensorflow/lite/kernels/padding.h"

namespace tflite {
namespace ops {
namespace custom {
namespace jwgksy {

constexpr int kInputTensor = 0;
constexpr int kFilterTensor = 1;
constexpr int kBiasTensor = 2;
constexpr int kOutputTensor = 0;

// This file has three implementation of DepthwiseConv.
enum KernelType {
  kReference,
  kGenericOptimized,  // Neon-free
  kNeonOptimized,
};

const int kTensorNotAllocated = -1;

int8_t filter_r   aw[16800]={-11, -30, -3, 8, 37, 96, 11, 4, 14, -30, -3, 24, -8, -9, -13, -39, 0, 7, -1, 11, 10, -28, 4, 0, 2, 7, 2, 13, -1, 24, 15, 16, 9, -18, 37, -21, 8, -5, 13, -12, -43, 2, -9, -14, 2, -2, -4, 8, 13, -30, 2, -80, -58, -35, 8, -9, -10, 11, 5, 26, 1, 13, 10, 3, 12, -10, -29, 2, -3, 16, 2, 69, 30, -2, 18, 21, -6, 19, 50, 1, 0, -31, 0, 8, 3, -9, -1, -15, -1, 18, 63, -15, -1, 40, -25, 0, -7, 1, 31, 4, -7, -11, -5, -9, 11, 36, 18, 20, 5, -31, 3, -28, 20, -1, -5, -26, 4, 4, -8, -36, -10, 10, -4, -10, 4, 1, 14, -2, 12, 34, -10, 15, 26, 4, 10, -4, 2, -4, 6, -12, -4, 3, -1, 7, 19, -3, 2, 10, 3, 19, 0, 10, -17, 17, 1, 0, -1, 75, 5, 11, -3, -31, 8, 14, 6, 5, -8, 12, -2, -3, 0, -37, -7, -19, -11, -10, -66, 5, -1, 5, 28, 0, 15, 3, 4, 6, 16, 2, -25, -7, 8, 5, 3, 0, -4, -18, 1, -1, -6, 9, -4, 20, 6, -8, 7, -11, 6, 16, -2, 75, -20, -1, -2, 16, 9, -9, 4, -17, 11, -7, 16, -4, -33, 2, -7, 6, 0, 4, -4, 5, 6, -1, -12, 2, -3, 19, 7, 3, -1, -34, 16, 19, -4, -8, -33, 15, 22, 21, -7, -24, 7, 31, -12, 7, 10, 13, 5, -5, -4, -4, 1, 4, 2, 8, -33, 2, -85, 19, -1, 9, 4, 12, 4, 15, -3, -27, -15, -3, 32, 6, -13, 16, 3, 1, -8, -13, 33, 8, -14, -2, -17, 12, 7, -19, 33, -11, -4, -7, 3, -16, -3, 21, -24, 21, 11, -8, -72, -2, -60, 2, -36, 26, -16, -27, -1, -13, 36, 4, -6, -2, 0, 4, -33, 4, 6, -1, 8, 10, -11, 17, -13, 6, 7, 12, 54, 0, 3, 1, -5, -1, -1, 0, 5, -5, 3, 1, 17, -16, 56, -20, 14, 10, 7, 16, 5, 4, 3, -8, 4, -2, 3, -4, -25, 3, 4, 2, 8, -41, -8, 18, 4, 20, -1, 36, 11, -16, -28, 15, 5, -8, 2, -19, 7, -5, -1, -11, -11, -5, -6, 6, -1, 14, 20, 1, 14, 3, -7, -26, -36, 26, 5, -2, 29, 0, -3, -21, -31, 4, 3, 0, -1, 30, 1, -5, 25, -20, 18, -10, 7, 18, -46, -1, 14, 2, 29, 89, -6, 1, 14, 9, -11, 2, 12, 8, 7, -1, -7, 3, -18, -95, -13, -10, 0, 10, 25, -31, 18, 47, 4, 24, -6, -2, 4, 0, 6, -1, -13, -37, 13, 1, 2, -7, 5, 18, 4, 5, -18, -18, -17, 5, 1, 11, 5, 5, -3, -10, -21, -5, -5, 16, 8, -5, -37, -1, -8, -1, -63, -2, 16, -1, 3, 1, -6, -11, 19, -1, -33, 2, 6, -1, 9, 7, 32, -6, 12, -11, 11, -15, -12, 42, 5, 3, 15, -8, -7, -2, 4, 35, 1, -34, -2, 35, 3, 0, -2, 13, 11, 34, 20, -6, 1, 4, -8, 0, -24, 28, -15, 5, -7, 6, -33, 4, -20, -10, -6, -16, 6, 2, -5, -5, -7, -7, 2, -27, 10, 9, 7, -35, -8, 4, -1, 8, 24, -1, -12, 1, 6, 6, 13, 23, -6, 21, 19, -95, 9, -3, -11, 6, -15, 34, -15, -30, 19, -8, 5, 9, -20, 5, -27, 4, 25, -9, 7, 2, -24, -12, -9, 1, 31, 25, -2, -5, 5, -1, 6, 2, 4, 21, 13, 26, 5, -1, -1, 24, 3, -12, -30, 9, 18, 9, -3, 10, 2, -18, -11, -13, -4, 8, -15, 0, -36, 0, 3, 5, -1, 18, 26, 26, 2, -1, 33, -2, 7, 0, -51, 18, -2, -2, -22, 5, 15, 1, -21, -7, 1, 19, 1, 5, 6, 4, 8, -5, -1, 22, 8, -4, 12, 50, 14, 12, -42, 7, 11, -40, -4, -4, 21, 94, 36, -4, 20, -13, -4, 5, -3, 22, 22, -13, -20, 22, 4, -13, 27, -46, 0, 5, 5, 17, -1, 34, 14, 3, 6, -30, 71, -5, 28, 1, -6, -21, 9, 1, -90, 25, 13, -6, -1, -4, 18, 18, 23, -9, 2, -57, -17, 21, -6, -20, -1, -27, 6, 15, 6, 6, 4, 6, 4, -3, -28, 0, 8, 16, -2, 8, 13, 17, 11, 10, 0, 6, 39, -1, -1, -24, -1, -5, 1, 3, 1, -8, 2, 31, -3, -19, -5, 15, -16, 4, -1, -2, 69, 3, 1, -27, -2, 0, -8, 46, 0, 12, 6, 2, 7, -36, 16, 11, -12, -46, -1, 6, -7, -20, -7, -6, -4, 9, 2, -4, 9, 9, -6, 23, 3, 42, -19, -5, 19, 2, 4, -5, 45, 6, -2, -7, 2, -3, -7, -7, 4, 11, -1, -1, -3, 0, -5, 6, 13, -1, -2, 30, 26, 21, 5, 15, -6, 12, 2, 0, -1, 30, 1, -2, 1, -87, -8, -4, 30, 3, 43, -1, 2, 1, 30, 5, -8, -1, 2, 8, 49, 4, -15, 17, -16, 4, -2, 3, 1, -33, 7, -10, -6, -3, 4, 40, -7, -11, 12, -8, -17, 12, -3, 30, -7, 7, -29, 24, 7, -70, 7, 10, -5, -2, 6, -8, -59, 17, 1, -15, -20, 2, -67, -23, -4, -3, -3, -6, 11, 23, -13, -4, -11, -48, 1, 6, -3, 0, -26, -6, -16, -6, -1, -7, -4, -11, -4, 4, 14, 3, 5, -4, -12, 0, -16, 1, -3, 5, -49, 7, -49, 34, 0, 46, 9, -4, -11, 16, 25, 3, 1, 0, 33, 15, -11, 21, -3, 7, -3, -21, 14, -20, -15, -4, 3, 26, -4, -15, -23, 3, -2, -5, -12, 43, -19, 14, 15, 9, 14, -5, -64, -6, 8, -3, 1, 24, -3, -7, 31, -8, 38, 15, -4, -14, 19, 15, 10, 28, 2, 1, -3, 8, -13, 3, 4, 4, 5, 6, 8, -3, 2, 5, -18, 5, 9, -31, -10, -9, 6, 1, 6, -26, 55, -9, 14, 15, 15, 1, 4, 1, 6, -13, -4, -7, -16, -10, -51, -1, -1, 10, 9, -40, 30, 32, 9, 21, -8, 30, -8, -23, 38, 7, 3, 5, 21, -15, 8, 1, -6, -28, 8, 5, 2, -2, 9, 17, 17, 3, -6, -7, -3, -26, -34, 26, -7, -5, 37, -4, -8, -20, -3, 10, -11, 0, 1, 37, -9, 1, 64, -12, 16, 1, 5, 41, -13, -4, 33, -12, -1, -35, -7, 4, 17, 8, -12, 2, -5, 64, -1, -1, -2, -17, -18, 17, 4, -9, 8, 9, 14, -35, 25, 11, 11, 14, -4, -3, 8, 7, 10, -5, -18, -32, 16, 4, 2, -13, 1, 8, 6, 6, -15, -11, -20, 2, 4, -12, -4, -13, -13, -30, -6, -4, -4, 55, 3, -7, -9, -3, -23, 0, -46, -1, 21, -65, -1, -1, 1, -15, 41, -2, -20, -1, 3, 8, 0, 28, 6, -5, -10, -3, 9, -4, 8, -5, 5, 2, 9, -9, -24, -9, 17, 35, 2, -10, 12, -13, 0, 4, 4, 5, 15, 9, 29, -9, -9, 27, 11, 38, 1, 7, -28, 4, 52, 1, -15, -11, -27, 9, -13, -21, 28, 0, -7, -14, 3, 2, 4, -34, 6, 0, 2, -25, -1, 4, -3, -5, 18, -2, 2, 2, 2, 9, 20, 20, -1, 27, 22, -115, 2, -16, -36, 8, -16, 21, -15, -44, -7, -5, 8, 4, 24, -2, -24, 21, 18, -10, 13, -1, -23, 0, -6, -2, 50, -66, -3, 6, -20, 4, 5, 8, 5, 38, 0, 36, -2, 4, 14, 23, 21, -5, -8, 27, 36, 5, -3, 3, -7, -14, -3, -35, 12, 2, -44, 1, -46, 1, 4, 2, -1, 4, 5, 10, 1, 14, 39, 2, 4, 1, 24, -7, 4, 27, -25, 2, 8, 21, -37, -12, -2, 9, -20, 6, -1, 4, 18, -12, 3, 35, -13, -6, 10, 72, 12, 2, -18, 21, -5, -79, -4, -9, 21, 119, 94, 37, 28, -22, 13, -64, -7, 50, 39, 103, 27, 43, 2, 11, 85, -66, 8, 4, 50, -12, -4, 39, 32, -22, 20, -24, 77, 2, 43, -1, 2, 29, 30, 23, -68, 29, 11, 2, 4, 10, 36, 9, 31, -10, -2, 16, 4, -19, 15, -35, 1, -20, 12, -1, 1, 11, 12, 8, 11, -25, -58, -7, 14, 42, 3, 116, -16, 21, 12, 4, -18, 1, -14, -14, 0, -40, 9, -2, 35, -26, -26, -13, 2, 30, 93, -42, 0, 11, -11, -17, 2, -4, 127, 5, 0, -2, 70, -5, -34, 6, 45, 14, 20, -4, 5, -51, 38, -17, -43, -70, 72, 4, -21, -26, -29, 3, -8, 94, 11, -29, 21, -4, 3, 51, -3, 86, 0, -7, 51, 3, 8, -3, 92, -5, 1, 3, -15, -12, 14, -21, 19, 3, -10, -10, 5, 21, -65, 27, 11, -1, 5, 71, 34, 38, 2, 28, 20, 23, -1, 0, 53, 52, -2, 33, 22, -113, -12, 1, 63, 0, 98, -13, 2, 3, 54, -7, -48, -10, 6, 17, 78, 11, -1, 47, 5, 4, 5, 10, -3, -46, 3, -22, -6, -12, 15, 22, -5, -21, -1, 7, -7, 20, 9, 7, -2, 10, -34, 35, 21, -114, 10, 36, -31, -14, 3, -5, -110, 35, -5, -23, -54, 9, -53, 2, 0, 4, -4, -4, 25, 127, 39, 10, -20, -64, -4, 13, 19, 0, -41, -21, -20, -6, 7, 22, 15, -15, 5, 12, 20, 5, -4, -1, 23, 6, -6, -9, -14, 19, -85, -9, 7, 50, 2, 32, 0, 22, -11, 24, 41, -9, 19, -8, 59, 31, -7, 14, -2, 2, 0, -17, -18, -5, -68, -16, 1, 58, 5, -6, -15, 46, 6, -16, 14, 113, -72, 27, -2, 8, 21, -26, -112, -5, 27, 5, 49, 11, -22, -15, 3, 0, 92, 19, -17, 35, -54, 17, 10, 32, -10, 25, -5, 6, -43, -6, -22, 40, 4, 37, 54, -7, -9, -9, -9, 7, 8, -32, -13, -18, -8, 7, -9, -84, 13, -4, 27, 54, 21, 14, 11, 6, 21, -37, -6, -15, -19, -16, -61, 7, -7, 8, 5, -65, 52, 64, -6, 54, 4, 3, -6, -74, 42, 22, -3, 27, 48, -27, 4, 1, 7, -75, 14, 3, -8, -27, 1, 55, 56, -11, -6, 12, -8, -38, -47, -7, 1, 1, 87, 23, -27, 79, -18, 11, 3, 6, -32, 49, -15, -2, 126, -1, -8, -22, -33, 68, -22, 35, 36, 2, -10, 39, 4, 12, 43, 16, 0, 12, 7, 102, -23, -8, -15, 17, -34, 53, -4, 1, -16, 19, 17, -15, -8, -33, 20, 46, -8, 5, 14, 12, 12, -7, -19, -56, 2, 2, 9, -38, 12, 29, 9, 17, -19, 1, -17, 15, 5, 50, -6, 6, -20, -43, 17, -5, -12, 59, -3, -19, -28, 0, 3, 0, -16, 2, -14, -101, -5, 41, 15, 3, 127, 8, -27, -5, 6, -1, 1, 32, 6, -5, -4, -7, 10, -12, 1, -18, 3, -16, -17, -3, -58, -3, -6, 35, 6, -16, 14, 6, -6, 0, -19, 20, 20, 0, 32, -9, 34, 29, 1, 68, 26, -15, -31, 9, 63, -4, -21, 25, -62, 107, -13, -28, 46, -5, -1, -14, 23, -20, 9, -50, 11, -8, -4, -42, -1, -2, -2, 3, -10, 16, -4, -2, 3, 11, 29, 16, -12, 69, -18, 117, 6, -13, -74, 14, -15, -27, -4, -52, -11, 6, 13, -33, 47, 5, -44, 31, -29, 3, 29, -18, -2, 5, -9, -10, 107, 35, 2, 17, 11, -5, 8, 31, 8, 32, 2, 65, 15, 2, 1, -1, 29, -2, -36, 11, 52, 26, -9, 7, -1, -31, -16, -74, -5, -6, -70, -9, -69, -1, -5, -2, -21, -104, -17, 17, 3, 8, -48, 1, 5, -1, 67, 6, 5, -36, 93, -23, 18, 41, -69, -4, 3, 8, -11, -3, -7, 0, 8, 15, 21, 7, 17, -7, 5, 31, 38, -12, -8, 35, -11, -39, -5, 0, 31, 96, 24, 2, 22, 22, -3, 7, -3, 20, 21, -8, -13, 22, -1, -13, 0, -39, -2, 10, -3, -15, -4, 34, 7, 8, -1, -32, 50, -4, 36, -2, 2, -17, 8, -3, -81, 6, 18, -9, 1, 0, 9, 7, 24, -9, 2, 59, 23, -17, -11, -10, -8, -43, 6, -24, 4, -1, 6, 6, 7, -2, -29, -4, 5, 12, -1, 5, 10, 13, 14, -20, 1, -1, -36, -1, -6, -26, -4, -2, 10, -5, 0, -13, 3, 23, 8, -18, -3, 10, -11, 5, -9, 1, 63, 4, -4, -28, -5, -1, -11, -49, 3, 7, -3, 3, 6, -41, 23, 16, -16, -59, -1, -2, -8, -23, -6, -7, -6, 21, 4, -10, 11, 12, -5, 19, -9, 35, -13, -5, 19, 1, 1, -5, 19, 9, -1, -3, -1, -9, 9, -6, 6, 4, -7, -14, -1, -9, -2, -7, -2, 2, -4, 33, 19, 20, -1, 20, -1, 14, 1, 7, 3, 32, -2, 7, 4, -61, -11, 4, 34, 2, 53, -5, -19, 0, 32, 0, -6, 4, 4, 9, 42, 5, -18, 13, 10, 7, -5, 4, 3, -29, 6, -3, -8, -8, 1, 31, -10, -15, 11, 4, -8, 10, -2, -50, 3, -1, -23, 15, 11, -63, 13, 6, -7, -7, 8, -8, -54, 18, -3, -7, -18, 2, -58, -23, -3, 0, -6, -6, 21, 22, -20, -2, -12, -37, 5, 9, 4, 2, -24, 0, -19, 6, 0, -7, 3, -11, -3, 5, 18, 5, 4, -9, -18, -2, 2, 5, 3, 3, -47, 17, -67, 39, -4, 46, 11, 5, -4, 17, 24, 10, 1, -2, 40, 12, -10, 24, -3, 4, 1, -17, 12, 13, -11, -4, 6, 30, 4, -18, -29, 9, 2, -8, -13, 32, -18, 9, -4, 13, 16, -12, -54, -13, 3, 1, -1, 24, -6, -14, 33, -2, 51, 12, -13, -4, 20, 15, -18, 24, 1, 10, -2, 3, -6, 7, 5, 4, 8, 6, -2, -4, 2, -15, -18, 5, 8, -35, -7, -8, 5, 4, 3, -21, -2, -4, 15, 16, 11, 2, 9, -1, 4, -9, 0, -6, 5, -15, -30, 1, 4, 9, 11, -39, 22, 33, 10, 30, -5, -24, -4, -29, 42, 10, 3, 6, 24, -8, 7, -2, -1, -30, -13, 0, -3, -3, 8, 23, 22, 6, 0, -8, -5, -31, -25, -18, -7, -5, 42, -2, -13, -11, 5, 7, -8, -3, -5, 28, -4, 2, 70, -24, -11, 8, 3, 37, -16, -8, 29, -7, 3, -41, -6, 8, 18, 10, 0, -1, -17, 49, 10, -5, -4, 6, -11, 3, 3, -2, 10, 1, 7, 17, -58, 7, 9, 17, -7, -3, 10, 8, 6, -3, 22, -30, 10, -1, 1, -14, 1, 13, 4, 5, 2, -15, -9, 1, 5, 38, 0, -10, -8, -30, -2, -12, -4, 48, 11, -1, -9, -1, 17, 1, -60, 0, 19, -65, 3, -6, 6, -15, 56, 2, 5, 2, 7, 4, 0, 33, 4, -9, 12, -4, 12, -4, 4, -16, 7, 1, 4, 2, -20, 0, 13, 27, 2, -15, 11, -19, -4, 1, 7, 3, 11, -3, 32, -9, -11, 15, 8, 36, 55, -15, -31, 10, 56, 0, 18, 23, -27, 13, -15, -15, 19, 2, 4, -7, 2, 3, 6, -53, 7, 4, 1, -18, -3, 2, -4, 1, -22, 0, -4, 6, 7, 4, 22, 10, -4, 20, 24, 75, -1, -14, -29, 2, -20, 7, 17, -50, -5, -4, 3, 1, 26, -2, -25, 20, -12, -11, 15, 2, 21, 2, -3, -4, 50, -32, 1, 6, -19, 2, 4, 8, 10, 32, -25, 32, 1, 4, -3, -23, 17, -5, -8, 22, 30, 2, 0, -7, -6, -9, -2, -32, 13, -2, -35, 4, -65, 2, 6, -2, -2, 9, -14, 11, 3, 15, 33, 3, 9, 3, 42, 1, 4, 28, -20, -3, 6, 21, -28, -9, -4, 11, -25, 5, -3, 4, 17, -17, 1, 30, -10, -7, 7, 71, 15, 1, 19, 26, 10, -35, -3, 8, 21, 106, 27, -6, 13, 27, -3, 31, -8, -12, -7, -22, -1, 5, -5, -19, -4, -24, 4, 4, 18, -23, 10, 18, -1, 18, 18, 22, 21, -15, 35, -33, 0, -2, 15, -12, -47, -13, -7, -12, 4, -3, 0, 16, 8, -22, 3, 48, 59, 27, 10, -12, -8, 10, 4, -24, 0, -18, 14, 3, 10, -9, -24, 0, 1, 11, -3, 63, 25, -3, 23, -24, -12, -19, -41, 1, 6, -25, 2, 11, 5, -18, 0, -20, -4, 11, 53, -18, -2, 32, -10, 1, -11, 2, 34, 7, -11, -5, -3, -8, 11, -38, 10, 29, -6, 24, 3, -33, 14, 3, -3, -15, -2, -1, -15, -42, -10, 4, -3, -8, 1, 3, 9, 10, 15, 28, 17, 16, 26, 5, 13, -8, 1, -2, -4, -9, -1, 0, 2, 8, -3, -9, 6, 20, 2, -23, 1, -12, -10, 22, -9, -3, 1, 52, 14, 14, 3, -17, 10, 9, 2, 4, -5, 19, -1, -2, -12, -44, -4, 12, -17, -6, -65, 9, -7, 7, 29, 3, 22, 0, 5, 2, 22, -1, -24, -6, -11, 6, -1, -2, -2, -14, 3, -9, -6, -9, -9, 30, 7, -5, 2, 2, -4, 17, 0, -53, 12, 2, 5, 22, 5, -10, -2, -16, 21, -7, 13, -5, -28, 3, -5, -2, -6, -2, -12, 7, 2, 0, -11, -3, 5, 16, 12, -2, -3, -25, 14, 17, -5, -12, -30, 9, 7, -7, -4, -21, 4, 29, -6, 16, 6, 15, 4, -6, -6, -3, 27, 3, -3, 14, -34, -4, -85, 18, -5, 13, 0, 1, 2, 10, -3, -23, -20, -2, 41, 8, -9, 15, 3, 0, -6, -16, 26, -9, -17, -2, 15, 15, 8, -19, 38, -7, -5, -6, 2, -14, -8, 21, 20, 17, 14, -1, -59, 4, -47, 1, -34, 25, -12, -24, 3, 12, 32, 2, -7, 1, 2, 0, 26, 7, 5, -4, 3, 6, -15, -6, -29, 8, 6, 11, 48, 2, 7, -21, -2, 1, 0, 3, 7, -5, -1, -1, 21, -7, -25, 23, 15, 10, 13, -9, 1, 4, 3, -4, -5, -2, -32, -3, -31, 1, 1, 4, 8, -34, -6, 11, 1, 14, -2, -29, 14, -18, -61, 13, 3, -12, 21, -20, 11, -2, -3, -13, 24, -2, 2, 6, 2, 17, -1, -2, -19, 3, -6, -27, -42, -18, 6, -1, 17, -3, -3, -24, 8, 7, 0, -2, 0, 24, 1, -5, 27, -14, -21, -15, 5, 14, -41, -6, 16, 3, -28, 77, -6, 4, 6, 0, 4, 6, 21, 2, -4, -2, -9, 3, -27, -15, -15, -16, 1, 20, 29, 2, -55, 44, 12, 10, -8, -1, 9, 5, 10, 7, 18, -33, 11, 2, 3, -3, 0, 17, 6, 0, 40, -15, -28, 9, 2, 5, 2, 5, -9, -9, 6, -6, -1, 21, 7, -6, -36, 0, 8, -2, -96, -1, 9, -3, 1, 6, -7, -17, 18, -5, 26, 0, 2, -1, 4, 11, 21, -3, -7, -10, 11, -9, -8, -23, 3, 3, 11, 12, -9, -1, 4, 46, 5, -21, 1, 3, 4, -10, -6, 13, 11, -19, 22, -3, -2, 11, -9, -12, 74, -23, -7, -1, -2, 5, 21, -30, -18, -11, -8, -14, 12, 0, 3, -3, -4, -12, 2, -9, 7, 0, -8, -28, -2, 4, 0, -9, -29, -2, -3, -1, 3, 10, 8, 18, -3, 27, 20, 101, 8, 12, -17, 5, -12, 26, 14, -39, 13, -17, 13, 13, -7, 4, -33, 6, -36, -4, 5, -6, 33, -18, 5, 0, 27, -34, 1, -1, -2, -1, 9, 2, 2, 25, -1, 25, 7, 0, -12, -38, 15, -9, -25, 6, 17, 4, -3, -11, 2, -22, -1, -15, -11, 13, -23, 7, -36, 1, 0, 4, -1, 24, -16, 24, -1, -2, 34, -3, 6, -3, -47, -10, -1, -2, -31, -22, 16, 4, -20, -8, 4, 19, -9, 8, 4, 6, 8, 4, -2, 13, 0, 1, 10, 51, 9, 18, 39, 2, -44, -10, -6, 3, 3, 83, 26, 13, -4, -43, -3, 33, 1, 7, -31, -1, -17, 4, 4, 47, 16, -55, 2, 1, 35, 42, 1, 31, -8, 22, 37, 53, 98, -9, 24, -12, -16, -11, 1, 0, -95, -4, -5, -4, 3, 17, 12, -15, 9, -33, 4, -91, -44, 26, 14, -11, 1, -6, -1, -5, 3, 11, 2, -5, 1, 8, -32, -8, 2, 22, -6, 13, 16, -2, 13, 38, -38, 32, 42, 1, 3, -24, 3, 23, 20, -14, 1, -74, 3, -50, 23, -20, -3, -2, -5, 6, 16, 1, 41, 16, -17, 20, -2, -2, 14, 16, 6, 27, 9, -42, 5, -35, 10, 3, 12, -52, -4, 27, -1, -20, -14, 13, -4, -5, 4, -14, -5, 4, 21, 2, -28, 16, 36, -2, 8, -2, 9, 1, 56, 13, -3, 1, 8, 5, 17, -31, -4, 16, -21, 21, 2, 46, -15, -12, -11, 0, 1, 42, 28, 12, 0, 7, 12, 14, -10, 1, 1, 8, 7, 4, 31, -69, -12, -34, -6, 1, 47, 16, -2, 0, 28, 12, 25, 0, 6, 5, 7, 2, -14, 15, 23, 14, -18, 13, -3, 2, 6, -1, 3, -6, -8, -10, -2, -11, 10, 30, 5, 4, -2, 70, 2, -4, 13, 4, 8, -67, -7, -18, 21, -10, 19, 4, -2, 6, 0, 30, 11, 4, -31, 49, 7, 4, -22, 1, 16, -8, 26, 3, -6, -33, 39, 8, -3, 14, -30, 18, 8, 13, 2, 2, 9, 44, -2, 24, 16, 2, 13, -4, -14, 4, 2, -13, 2, -1, -28, -4, -59, 24, -9, -22, 7, -10, 13, 12, -41, 5, -48, -2, 20, 12, -23, -21, 6, 4, -5, 2, 16, 1, -21, -3, -56, 13, -2, -8, 44, -13, 1, -6, 2, -16, -1, 17, -48, 10, 9, -3, -46, -6, -28, -1, -19, -20, -7, -5, 32, -27, 18, -9, 3, 19, 15, 6, -42, -18, 5, -11, 7, 3, -23, 27, -4, -4, 11, -1, 53, 0, 4, 30, 11, 4, 6, 26, 4, -3, -13, 1, 13, -42, 55, -40, 12, 15, 12, -3, 13, -3, 9, 7, -7, 0, 62, -7, -77, 7, -4, 6, 36, -30, -17, 9, -11, 29, -2, 27, 13, 2, 20, 14, 0, 0, -12, -29, 6, 0, 1, -5, -7, 4, 8, 2, -1, 17, 20, 5, 29, -9, -6, -26, 0, 39, 10, 2, 63, 3, 12, -13, -15, 9, -21, 0, -13, 33, -7, 3, 60, -22, 21, 2, 13, 23, -17, 4, 38, -23, 31, 67, -4, 20, -2, -2, -14, 5, 11, -19, 25, 7, -6, -50, 3, -1, -26, 9, -13, 1, 7, -76, -1, 42, 12, 29, -7, -5, -2, -8, 5, 8, 7, -35, -2, 0, -5, 26, -5, 14, 4, 4, -11, -23, 9, 8, 7, 37, 14, 15, -10, -22, -9, 5, -3, 9, -3, 12, -19, 5, -50, 6, 0, 3, 19, -19, 1, 15, -6, -2, -27, -27, -49, 7, 5, 2, 10, 2, -7, 10, 41, -9, 15, -1, -27, 33, 0, 8, 10, -10, -25, 13, -8, 29, -4, -8, 15, 53, 0, 21, -1, 14, 6, 9, -17, -8, -13, -2, 0, 38, -49, 33, -2, 2, -26, 6, -64, 69, -14, -6, -16, -18, -9, -5, 1, 22, -4, -10, 1, -3, 7, 10, 13, 12, -3, 4, 1, 4, 11, -5, -1, -1, 7, 5, 10, 11, 4, 33, -15, -56, 1, -3, -11, -21, -9, -51, -43, -5, 24, -21, 8, 6, -19, 3, -17, 15, 12, -18, 18, -1, -5, -5, -12, -1, -29, -1, 3, -5, 19, -8, 16, 1, 5, 14, 3, 13, 2, -7, -7, 57, -27, -1, -9, -9, 36, 7, -6, 0, -1, -10, 1, -5, -30, -12, -8, 3, -74, 3, 4, 1, -1, 4, 50, -14, 4, -4, 5, 2, 6, 1, 23, 21, 2, -15, 1, 28, 5, 22, -32, -7, 3, -5, 26, 5, 2, 4, 4, -2, 4, 4, 34, 3, 3, -34, 18, 2, -47, -14, -38, -50, 1, 8, 53, 58, 78, 15, 34, -72, 2, 66, 11, 47, 12, -11, 4, 30, 3, 50, 54, -116, 2, 13, 74, 65, 0, 27, -3, 14, 34, 16, 93, 14, -33, -21, 25, 16, 20, -4, -77, 14, 0, 2, -2, 1, 41, 14, 4, -14, 8, -123, -118, -6, 7, -3, 12, -52, 25, 31, 1, 18, 7, 4, 16, 30, -78, -16, 1, 5, -11, -2, 36, 17, 17, 54, -14, 31, 123, -27, 4, -50, 2, 1, 38, -17, 4, -79, 4, 74, 12, 6, 3, 29, -35, 11, 38, 1, 98, 7, -37, 3, -17, 17, 34, 18, 29, 32, 18, -56, 3, -13, 49, 15, -4, -106, 26, 21, -20, -11, -12, 18, 2, 1, 9, -25, 6, 73, 14, 22, -19, 14, 60, 6, 25, 13, 8, -16, 2, -24, 14, 1, 7, 1, 67, -16, 23, 19, 1, 22, 6, 29, -75, 23, 39, 8, 11, 47, 38, 37, 15, 22, 8, 30, 5, -8, 59, 43, 11, 13, 8, -72, -16, -54, 19, 15, 58, -2, 20, -7, 67, 12, 23, 3, 8, -26, 58, 0, -37, 38, 3, 30, 1, 1, 1, -47, 3, -23, 6, -17, 15, 41, 21, -11, 7, 19, -1, 29, 5, 32, -26, 4, -41, 9, 21, -83, 24, 0, -15, -1, 3, 2, -72, 36, 1, -14, 19, 3, -70, -72, 10, 2, -15, 35, 56, -12, -20, 0, -37, -70, -4, 5, -15, -10, -42, 17, 2, 15, 1, 14, 11, 28, -3, 13, 34, 2, 13, 7, -60, 16, 0, -3, 20, 3, -62, -58, -95, 51, 15, -14, 12, 46, -11, 26, 9, 19, 11, 4, 47, 30, -3, 22, 2, 6, 8, -23, 26, 69, -68, 0, -74, 14, 1, -9, 98, 18, -3, 1, -1, 21, 16, 21, 18, 37, 14, -36, -71, 25, 62, 5, -60, 40, -8, -6, 80, -52, 67, 59, 2, -2, 25, -49, -47, 9, 12, -3, 5, 0, -46, 43, 48, 0, 12, 25, 77, 3, 13, 42, -22, 8, 13, 84, 9, 4, -6, 2, 19, -56, 67, -44, 41, 28, 9, 5, 8, 0, 2, -11, -3, 3, -22, -11, -127, 1, -5, 14, -9, -52, -8, 43, 17, 67, 6, 127, 21, -26, -4, 22, 2, -8, 22, -43, 14, 3, -15, -46, -49, -2, -10, -39, 3, 36, 22, 22, 24, -1, -3, -32, -46, 90, 2, 0, 113, 21, -49, -13, -16, 12, 33, -3, 13, 49, 8, 3, 76, -79, 36, -68, 27, 47, -63, 64, 56, 10, 29, 28, -8, 42, 4, 32, -32, 22, 66, 29, 6, 3, -3, -43, -47, 47, 3, -11, 22, -1, 47, -111, 36, -65, 8, 13, -31, 0, 10, 43, 0, 5, -6, -78, 10, -2, 18, -7, -24, 23, 17, -2, -57, -20, 26, 1, 14, 8, -2, 18, -5, -25, -4, 2, 8, 18, -1, 41, 7, 9, -75, 6, 56, 10, 12, -73, 4, 7, -5, -12, 5, -24, -82, 9, 16, 5, 29, 84, -9, 17, 58, 1, -48, 17, -85, 127, -2, 11, 5, -13, -85, -5, 0, 84, 3, 1, 49, -52, -6, 26, -2, 39, 12, 27, 2, 18, 3, 21, 15, 85, -90, 23, -48, 4, 0, -1, -71, -31, -61, 54, -32, 36, 19, -5, -14, 20, 18, 10, 0, -45, 0, 0, 4, -28, -7, 8, 6, 2, 28, 2, -7, 4, 7, 13, 17, 43, 9, 52, 81, -104, 14, 17, -49, -9, -38, -41, -64, -34, -16, -2, 7, 27, 28, 4, -4, 57, 53, 23, 33, 3, -38, -48, -16, 4, -5, 54, 3, 29, 19, 0, 12, 4, 11, 75, -8, 71, 5, 9, 12, 60, -19, -3, -7, 4, 40, 26, 0, 12, 1, -19, 10, -51, 29, 24, -42, 13, -30, 9, 12, 1, -22, 39, 83, 14, 0, -32, 57, -3, 7, 5, 36, 38, 5, 17, -32, 56, 17, 63, -36, -6, 1, 18, 18, 4, 2, 2, 38, 11, -30, 41, 39, -69, 7, 81, 36, 9, -62, -3, 3, -127, 6, 21, 97, 112, 127, 127, 74, 1, 39, -99, 18, 80, 76, 124, 78, 113, 2, -20, 79, -121, 22, 39, 100, -33, -3, -95, -19, -17, 127, -127, 90, 30, -106, -48, 121, 100, 62, 6, -85, 27, 47, 20, 12, -52, 104, 51, 5, 38, 44, 36, -13, 19, 36, -26, 44, -102, 7, -12, -5, 6, 12, 45, 26, 64, -122, -2, 25, 30, -29, 127, -37, -5, 39, -1, 127, -13, -24, -45, 37, -79, 15, 1, 62, -68, -20, -78, 23, 127, 90, 40, -3, 79, -113, -22, -2, -7, 10, 31, -18, -63, 127, 37, 127, -1, 127, 20, 89, -1, 10, 14, 127, -60, -3, -93, 76, 48, -40, -15, -65, -81, 31, 79, -6, -14, 41, 63, 0, 68, -13, 121, 32, 19, 127, 21, 18, -21, 127, 9, -34, -68, 77, -39, 13, 8, 127, 50, 33, 21, 5, 15, -112, 46, 89, 15, -12, 108, 37, 93, 49, 84, 58, 48, 3, 9, 117, 127, -16, 57, 64, -77, 16, -10, 127, 47, 97, -22, -44, 10, 83, -60, 68, 18, 14, -112, 127, 35, 42, 67, 24, -43, 24, -16, 16, -127, 17, -51, 32, -29, 55, 46, -29, -7, 25, -25, 47, 14, 29, 15, -27, 25, 1, 22, 42, -103, 127, 127, -47, 5, 1, 17, -127, 56, 30, -83, 106, 59, -99, -1, -20, -3, -6, 117, 29, -1, -7, 53, -61, -78, -71, 33, 5, -19, -27, 2, -42, -13, 1, 28, 59, -127, -15, 39, 41, 21, 33, -19, -127, 12, -13, 23, 63, 28, -96, -126, -127, 83, 50, 127, 15, 124, -33, 53, 75, -36, 68, 20, 59, 31, 12, 102, 34, 22, 17, -52, 127, -12, -95, 16, 4, 73, 17, 5, -127, 127, 19, -12, 11, 127, 16, 127, 19, 127, 127, -27, -84, 127, 127, 34, 127, 127, -50, -26, 112, -4, 125, 84, 95, 39, 127, -127, 20, 50, -27, -29, -45, 20, -105, 4, 48, 70, 31, 127, 78, 20, 15, -14, -52, 24, 33, -127, 127, 77, 31, 28, 29, -50, -82, -16, 127, 127, 67, 11, 43, 24, 18, -77, 35, -20, -124, 11, -114, 7, 9, 55, -68, -82, 127, 127, 13, 94, 8, 73, -57, -127, 95, 21, 19, 45, 88, -92, 21, 20, -44, -111, 10, 18, -63, -116, 30, -12, 17, 2, -27, 51, 20, -61, -72, -52, -5, 7, -107, 55, -22, 53, -3, 46, 127, 3, 112, 71, 8, 11, -3, -127, 0, -111, -67, 10, -119, 127, 26, 16, -33, 127, -7, 83, 127, 65, -57, 6, 59, 88, -43, 19, 19, 57, -81, 97, 38, 5, 127, 37, 66, -45, 4, -118, 17, 97, -49, 35, 37, 127, 33, 111, -9, -127, 46, -1, -23, -77, -127, 127, -10, -6, -4, -2, 19, 19, 22, 18, 6, -54, -33, 19, -8, -18, 21, 127, -19, -22, -7, 51, -1, 9, 93, 61, 42, -120, 30, -127, 31, -15, 105, -26, -45, 39, 25, 0, 127, 127, 69, 9, -6, 16, -90, 32, -91, -4, 25, -50, 14, 4, -119, -41, -28, 124, 3, -12, 127, -27, 5, -6, 127, 127, 20, -21, 44, 127, 70, 53, 38, 35, -75, -20, -53, -18, 120, 8, 4, -6, -93, 127, -12, 100, 89, 8, -8, 20, 81, 35, 3, -72, 15, 21, 16, -32, -23, 23, -6, 8, -22, 3, -10, 21, 21, 15, 55, 100, 24, 127, 127, 67, 33, 32, -92, 61, -27, -77, -26, -37, -48, 31, 39, -57, 42, 15, -79, 17, -36, 15, -5, 9, -10, -57, -22, 0, -13, 62, 3, 50, 24, 51, 24, 56, 9, 109, -47, 127, -1, 23, -8, -18, 80, 11, 3, 73, 3, 70, 22, 34, 10, -26, 71, -127, 45, 21, -72, 54, 2, 11, 46, 23, 1, -110, -42, 58, -15, -25, -65, -4, 30, 24, 2, 1, 16, 72, 67, -45, 47, 67, -12, -12, 8, 20, 40, 37, 2, 9, 127, 116, -72, 97, 21, -120, 31, 127, 127, 65, 7, 127, 36, -52, 8, 6, 56, 71, 75, 15, 30, 58, 4, 52, 11, 50, 8, -9, 9, 27, 4, -67, 55, -127, 4, 15, 68, -36, 2, 26, 3, 3, 28, 18, 109, 7, -30, -34, 21, 2, 28, -4, -82, -22, 4, 1, -2, 2, 56, 14, 7, -25, 8, 121, 127, -15, 14, 7, 11, -63, 24, -13, 1, -42, 5, 1, 9, 19, -86, -8, 2, -2, -7, -2, 31, 16, 19, -68, -12, -44, -114, -32, 12, -53, 6, 5, 44, -28, 1, -83, 5, 71, 4, 16, 0, 29, -36, 14, 39, -3, 98, 10, -21, -1, -20, 13, 40, -20, 26, 24, 26, 34, 6, -18, 56, 16, 3, -106, 23, -40, -26, -14, -14, 20, 3, -4, 9, -23, 3, 73, 12, 15, 18, 13, 61, 1, 22, 5, 9, -14, 25, -24, 18, 1, 6, 5, -38, -20, 20, 14, 10, -40, 8, -30, -99, 31, 19, 5, 12, 44, 37, 37, 3, 27, 10, 29, 8, -10, 62, 45, 13, 7, 18, -74, -12, 45, 9, 10, 68, -2, -17, 11, 63, 15, 32, -2, -6, -28, 55, 1, -42, 32, -48, 30, 2, -6, 3, -50, 6, -22, 7, -13, 9, 53, 23, -12, 9, -29, 3, 24, 5, -41, 11, 4, -48, 10, 15, -65, 14, -1, -6, 0, 1, 3, -62, 37, 1, -15, 25, 1, -80, -69, 11, 1, -14, 37, 53, -14, -14, 5, -35, -62, -7, 4, -14, -13, -46, -5, 6, -6, 2, 11, 15, 31, -14, 19, 33, 3, 19, 8, -59, 16, -3, 1, 20, -4, -61, -64, -71, 38, 21, -5, 11, 32, -8, 27, 4, 13, 9, 3, 46, 31, -4, 29, 2, 6, 5, -22, 27, -46, -67, -2, 54, 9, 1, -2, 105, 22, 1, -2, 2, 26, 16, 16, -22, 37, 16, -38, -85, 25, 57, 6, -60, 44, -6, -10, 72, 47, 66, 70, 5, -4, 30, -43, 26, 19, 14, -5, 11, 0, -49, -48, 49, 0, 12, 26, 79, -1, 9, -65, -23, 3, 10, 88, 12, 5, -2, 1, 27, -63, -81, 27, 39, 25, 6, 1, 11, 3, 2, -5, -4, 1, -19, -9, -112, 3, -8, 16, -14, -60, -1, 40, 16, 59, 2, -105, 30, -30, 15, 21, 2, -9, 29, -35, 6, -5, -14, -49, 61, -4, -4, -32, -2, 39, 34, 18, -12, -2, -8, -32, -28, -57, 6, 8, 110, 16, -40, -10, 0, 13, 33, 3, 18, 46, 6, 6, 83, -80, -59, -61, 12, 46, -57, 66, 59, 8, -21, 36, -13, 39, 2, 39, 28, 24, 63, 12, -24, 4, 4, 39, -37, 50, -1, -9, 22, 1, 36, 79, -93, -61, 7, 49, -30, -5, 6, 45, 4, 88, 11, -68, 13, 1, 17, -2, -24, 21, 13, 0, 127, -15, 24, 6, 16, -39, -5, 18, -9, -23, -11, 2, 5, 20, -2, 36, 4, 10, 53, 3, 35, 6, 15, -72, 2, 8, -3, -19, 3, -26, 69, 7, 13, 3, 24, 81, 1, 20, -77, 2, -35, 22, -87, -49, 3, 14, 8, 7, -105, -1, 5, 93, 3, -4, 46, 2, -3, -42, -7, 37, 5, -46, 6, 23, 11, 18, 18, 86, 96, -29, -60, 3, 0, 2, 57, -9, -57, 47, -27, 31, 15, -3, 5, 17, 20, 4, -5, -34, -3, 1, -10, -25, -6, 6, 2, -17, -14, 2, -12, 0, 8, 14, 17, 30, 8, 39, 72, 75, 14, 13, -39, -7, -33, -29, 83, -18, -23, 0, 11, 24, 19, 1, -3, 55, -75, 23, 31, 3, 49, -42, -17, 6, -5, 39, 0, 35, 21, 4, 11, 2, 10, 62, -6, 67, 3, 6, -20, -74, 0, -2, -7, 4, 46, 23, -2, -2, -1, -17, 18, -57, 27, 22, -48, 6, -26, 7, 18, 2, -19, 33, -112, 5, 1, -24, 60, 0, -1, 6, 36, -51, 3, 14, -40, -76, 16, 63, -43, -13, 2, 19, 1, 12, 6, 2, 41, -1, -25, 56, 43, -57, 8, 81, 31, 12, 41, -11, 44, -20, -8, 10, 3, 108, 25, 7, 5, 27, -3, 38, 2, 20, -20, 0, -16, 2, 6, -55, 36, -58, -1, 0, 16, -26, -3, 33, -7, 25, 41, 51, 78, -13, 24, -24, 14, -12, -3, 2, -87, 5, -7, -4, 3, 16, 19, -5, 13, -32, 1, 75, 41, -15, 14, 5, 3, -18, -2, 9, 3, -28, 5, -4, 11, 1, -35, -20, 1, 20, -3, 9, 22, 4, 10, -33, -32, -33, -48, 3, 5, -33, 0, 13, 22, -17, 2, -50, 2, -51, 13, -6, -1, 0, -10, 6, 16, -1, 45, 17, -10, 18, -1, -1, 15, -16, 11, 19, 13, 35, 2, -31, 10, 6, 8, -45, -4, -39, -3, -12, -7, 12, -6, -5, 7, -10, -1, 3, 19, 3, 19, 10, 41, -3, 2, -5, 6, -1, 38, 6, -13, 2, 11, 8, 0, -33, 0, 11, -15, -26, 2, -58, -1, -12, 18, 1, 0, 39, 29, 7, 5, 8, 11, 14, -7, -10, 0, 9, 6, 6, 17, -52, -12, 27, -6, 3, 58, 12, -1, 6, 26, 10, 12, 0, 5, 11, 10, 7, -12, 17, -6, 14, -16, 15, -3, 5, 5, -8, 2, -11, -7, -12, -6, -11, 9, -31, 7, 5, -3, -47, 18, -9, 12, 15, 9, -71, -5, -25, 20, -5, 16, 0, -1, 4, -3, 33, 7, -1, -26, 44, 11, 1, -18, -8, 19, -4, 27, 7, -19, -36, 38, 8, 0, 14, -29, 29, 19, -16, 3, -5, 4, 45, -3, 27, 22, 1, 10, -2, -5, 3, 39, -10, -1, -5, -25, -2, -32, 20, -6, -24, 6, -9, 21, 4, -45, -17, -42, -4, 12, 14, -15, -27, 5, 9, 2, 2, 16, -8, -25, -3, 37, 16, 4, -5, 47, -5, 5, -9, 2, -12, -1, 18, 36, 7, 6, -7, -53, -6, -31, -5, -20, -24, -10, -4, 38, 34, 17, -14, -2, 8, 14, 8, 35, -23, 6, -3, -1, 7, -16, -37, 10, -13, 8, -2, 49, 11, 1, -41, 9, 4, 9, 24, 2, 0, -12, 5, 19, -36, -57, 24, 9, 12, 7, 13, 10, -5, 13, 2, -9, 0, 78, -5, -69, 4, -1, 5, 47, -21, -8, 10, -7, 27, -3, -19, 14, 2, 13, 10, 2, 0, -15, -27, 10, 2, 3, -13, 18, 5, 3, -2, -1, 15, 15, 3, -35, -10, -10, -30, -11, -49, 9, -1, 71, 3, -4, -12, 0, 8, -13, -2, -21, 29, -3, -1, 77, -23, -20, 3, 12, 21, -17, -2, 34, -25, -31, 70, -3, 16, -4, -1, 2, 1, 7, -28, 2, 5, -8, 39, -8, -40, -22, 5, -14, 4, 28, 35, -49, 57, 12, 48, -8, -5, -7, -7, 10, 15, 19, -25, -1, -1, -3, 25, -5, 16, 5, 0, 25, -15, -5, 2, 3, 40, 11, 22, -2, -25, 17, 6, -5, 13, 0, 7, -8, 1, 11, 4, 0, 1, 19, -19, 1, 13, -3, -6, -28, -33, 17, 6, 10, 2, 12, 1, 3, 3, -44, -6, 6, -4, -27, -5, 2, 9, 16, 4, -32, 10, -5, 41, 0, -3, 12, 3, -3, -35, -2, 15, 17, -15, -19, -13, -16, 4, 4, 45, 58, -28, -12, 0, -31, 4, 25, -76, -20, 3, -12, -17, -10, 0, 4, 27, -7, -4, 1, -12, 6, 4, -20, 8, -2, 5, -1, 5, 3, -6, -11, -3, 8, 0, 6, 6, 2, 33, -19, 93, -3, -19, -12, -15, -15, -47, 35, -1, 21, -19, 7, 2, -28, 7, -14, 13, -39, -22, 16, 2, 16, 5, -9, 1, -27, 34, 7, 5, 16, -9, 17, 3, 3, 11, 26, 20, 2, -4, 10, -39, -23, -3, -8, -6, 38, 3, -2, -17, 0, -9, 9, -2, -30, -10, -12, 6, -65, 1, 11, 2, -5, 1, -68, -11, 5, -9, 21, 1, 11, 2, 28, -28, 1, -12, 1, -47, 8, 24, -34, -9, 2, -9, 37, 3, 5, 0, 5, -2, 2, -3, 36, 2, 2, -28, 13, 2, 35, -10, -115, 6, -23, 6, -34, 119, -21, -5, -8, -107, 5, -7, 6, 42, -4, 12, -49, -10, 3, 66, 127, -41, -3, 7, 30, 59, -2, 42, -16, 4, 22, 44, 106, -2, 18, 49, 23, -5, 24, 57, -121, -25, 4, 7, 5, 93, 74, -29, 16, -122, -4, -121, 12, -28, 16, 51, 7, -10, 20, -91, 3, 49, 8, -4, 17, 3, -54, -45, 8, 15, -5, 17, 1, 7, 4, -67, 3, 99, 2, -5, -2, -40, 1, 22, 41, 4, 3, -66, -6, -57, -31, 96, 2, 24, -41, 22, 77, 2, 91, 5, 18, 29, -5, 11, 36, -105, -4, 39, 30, -85, -3, -29, -22, -5, 9, -78, 7, -32, -34, -5, -21, 8, -8, 18, 15, -44, 20, -11, -1, 13, -87, 13, 46, -6, 2, 1, 3, 0, 70, 12, -2, 1, 1, -7, 62, -37, 10, 22, -28, 4, 10, 92, -37, 2, 20, -4, 10, 69, 8, 5, 16, 51, 9, 14, -19, 15, -1, -12, 0, 27, 70, -91, -21, -81, 9, 2, 66, 35, 12, 2, 5, 14, -39, -4, 13, 6, -5, 10, -42, 47, 28, 26, -13, 9, -6, 3, 1, -19, 3, 18, 16, -23, -14, -10, -2, 49, 2, 24, 7, 70, -62, 7, 34, 37, 15, -76, 0, 33, 28, -7, 17, -12, 0, 11, -8, 70, 24, 2, -67, 127, 14, -3, -15, 9, -3, -11, 127, -2, 20, -49, 3, -3, 11, 115, -27, 69, 2, 18, 4, -5, 6, 5, -12, 29, 39, 8, 7, -2, 15, 12, -18, -34, 12, 18, -31, -23, 25, 37, 10, -18, -14, 14, -26, 13, -36, -3, -64, -8, 55, 33, -19, -42, 5, 1, 5, 6, 78, -29, -43, -6, -100, 47, 16, 5, -1, 0, 4, -31, -42, -13, 4, -9, -84, -3, -9, 34, -127, 11, 52, 14, 10, -7, -9, -8, 35, -73, 9, 10, -10, 13, 6, -8, -106, -40, 21, 9, -19, 5, -2, 64, 51, -1, -5, 9, 52, 3, -14, 59, -1, 0, 12, -27, 4, 4, -27, 6, 2, -71, 75, -96, 6, -6, 17, 14, 6, 5, 11, -5, 3, -5, 77, -13, -90, -3, -3, 10, 87, -37, 12, -6, -12, 53, 3, -7, 26, 42, 39, 24, 2, -12, -39, -44, 8, -3, -4, -7, -59, 1, 18, -17, -1, 46, 5, -1, -5, 0, -15, -29, -32, 71, 2, -10, 127, 20, 60, -4, -48, 4, -6, -4, -28, 32, -27, -3, 92, -23, 41, -15, 8, 17, -38, 37, 42, 16, 34, 36, -1, 26, -15, 32, 22, 12, -12, -48, 6, -3, -7, 47, 18, 37, -38, 24, -12, 7, 37, -100, 30, 4, 17, 19, -17, -2, 10, -6, 8, -5, -25, -47, -29, -1, -33, 55, 0, -4, 8, -1, -24, -15, 58, 11, -3, 6, 17, 36, -16, -33, -58, 44, -11, -9, 7, 28, -3, 0, -110, 0, 43, 13, 7, 11, -4, -11, -2, -6, -20, -55, -89, 4, 9, -2, 10, 9, 0, -22, 87, -8, 13, -8, -5, 3, 7, 15, 14, -23, -71, 40, -15, 71, 7, 16, 6, 127, 1, 113, 8, -34, 14, 20, -3, 1, 10, 23, -12, 81, -75, 47, -2, 8, -53, -5, -105, 126, -25, -21, -20, -18, -77, 0, 39, 30, 11, -12, 4, -32, -7, -5, 11, 47, -1, 5, 1, 30, 47, -16, -12, 5, 3, 0, 11, 18, -3, 46, -34, 109, 4, -11, 1, -10, -9, -127, -64, 64, 15, -15, 19, 7, 36, 9, -30, 31, 65, 92, 32, -11, 97, 17, -13, -6, -24, -27, 5, 43, 34, -5, -17, -2, 3, -13, 6, -21, 16, 5, -25, 62, -70, 0, -35, -12, 19, 15, -10, -35, -5, -22, 53, -1, -34, -46, -24, 3, -82, -2, -7, 4, -20, -7, 80, 31, 1, 18, 43, 9, 6, 0, 31, 52, 1, -16, -9, 61, 8, 46, -3, -14, -3, -2, 78, 12, 14, -1, -4, 17, -4, 13, 22, -34, 4, -119, 12, -6, -75, -5, -127, -9, 19, 47, -32, -25, -63, -2, -8, -117, 39, 127, 12, 54, -22, -2, 37, -33, 13, 127, 114, 40, 30, 29, 100, 127, 2, -123, -44, 67, -22, 39, 66, 13, -103, 84, 125, -15, 37, 31, -95, 127, 25, 14, 8, 7, 127, -83, -32, -10, 19, -127, 18, 35, 30, -13, 30, -42, 3, -127, 4, 127, 20, 23, 35, 79, -108, 127, 21, 30, 19, -23, 5, 4, 53, -99, 100, 127, -2, -50, 33, -78, 27, 54, 51, 7, -3, -122, 18, -21, 18, 127, 0, 75, -127, 28, 127, -1, 26, 37, 34, 122, -17, 40, 34, -126, -7, 55, 105, -127, 10, 21, -44, -59, 37, -100, 17, -60, -63, -63, -51, 17, 50, 4, -11, -12, 30, 78, 95, 68, -115, -36, 104, 45, -18, 55, 16, 4, 94, 33, -36, 6, 32, -18, 127, -11, -25, 37, 52, 127, 50, 75, -116, 46, 74, 15, 48, 97, 49, 8, 33, 78, 48, 74, -30, 12, 18, -35, 66, 25, 47, -81, 4, -119, -8, 45, 60, 19, -123, -11, 69, 48, 38, 13, 61, -127, -10, 27, 23, 80, 99, 27, 49, 11, 5, -11, 12, -70, 30, 45, 62, -29, 19, -15, 29, 115, 43, 14, 29, 41, -86, 28, -99, 41, 41, -15, 23, 64, 94, -1, 22, 37, -22, -8, 30, 97, 10, 13, -127, 7, 64, 3, -26, 39, 112, -25, -10, 42, 4, -63, 121, 23, -62, -3, -41, 127, 114, 109, 14, 42, 6, 85, 0, 56, 59, 18, 36, -29, -114, 20, 19, -40, 62, 20, -40, -116, -88, 73, 48, -30, 3, 116, -122, 61, -125, 50, 11, 19, 41, 46, 19, -11, -7, 23, 14, -26, 33, -28, -6, 4, -127, 72, 2, 24, 0, 13, 16, 5, -19, 40, 32, -4, -127, -26, -19, 17, -101, 12, 123, 28, -103, -51, -43, -21, 80, -127, -11, 86, 44, 48, -9, -28, -125, -110, 52, 6, -26, 28, 34, 124, 61, -62, 38, 20, 127, 22, 38, 127, 17, 9, 22, 37, 8, 27, -46, 10, 16, -5, 127, -81, 35, -23, 44, 14, 32, 20, 21, -10, 43, 2, 111, 3, -113, 10, 5, 44, 23, -55, -43, -12, -72, 96, 8, -7, 47, 34, 51, 39, 18, -52, -126, -39, 38, 4, -43, -4, -103, 8, 79, -71, -25, 38, 81, 53, 127, 44, 0, -50, -58, 127, 17, 11, -32, 57, -56, 110, -69, 43, 53, 14, 16, 127, 24, 13, -28, 11, 114, -125, 57, -39, -116, 108, -5, 127, 127, -50, 6, 116, -48, 39, 127, -17, 127, 57, 127, 19, 16, 127, 5, 127, -7, 45, -53, 54, 89, -89, 127, -99, 36, 114, -39, 44, 39, -15, 37, -20, -88, -113, 61, 0, 15, 126, 21, -24, -5, 37, -38, -14, 101, 44, 16, 40, 38, 37, -49, 0, -127, 93, 5, 1, -5, 119, 36, 31, -101, 4, 83, 16, 42, 10, 10, -9, -13, 6, -58, -127, -90, 34, 17, -3, 50, 23, 49, 12, 112, 17, -115, 33, 30, 55, 36, 50, 41, -29, -127, 67, -7, 127, 8, -27, 29, 25, 5, 113, -3, -56, 36, 111, -68, 60, 54, 43, 14, -4, -94, 127, -95, 67, -110, 17, -110, 127, -22, -3, -12, 81, -121, 9, 127, 42, 0, 25, 2, -56, 21, 27, 108, 50, -39, 15, 4, 119, 127, -5, -30, 10, 21, 20, 59, 113, 21, 54, -59, 95, 58, 18, -9, -28, 35, -87, -85, 88, 68, 6, 26, -49, 43, 16, 8, -22, 127, 127, -10, 8, 124, 52, -22, -1, -13, 64, 4, 50, 68, 24, 24, -43, 9, -75, -56, -39, 7, 12, -103, 127, -93, 7, -6, -3, -34, 77, 19, 106, 20, 13, 127, -25, -35, 17, -25, 15, 7, 6, 66, 11, -3, 2, 127, 72, 6, -3, 127, 5, 24, 20, 91, 104, -21, 3, -80, 127, 41, 60, 80, -26, 44, -3, 75, 32, 8, 14, -28, 104, -42, 105, 118, -127, 28, -27, 20, 63, -127, -24, 26, -19, 127, 127, -41, 54, -49, 69, 127, -39, -127, -10, 127, -127, -48, 28, 127, -127, 127, -23, -74, 126, 127, 127, 127, -53, 127, -105, -74, -9, -62, -85, 35, 127, -127, 127, -96, 127, 127, -127, -127, -19, 127, 127, 127, -127, 91, -127, -127, 127, 127, 25, 27, 127, 127, 29, 127, -15, -127, 20, 127, 16, 127, 127, 127, 76, -127, 1, 127, 127, 42, -22, 33, -12, 127, 3, -62, -20, 51, 127, 127, -127, 127, 127, 127, 127, -27, -86, 127, -2, 106, 101, 127, 127, -124, -127, -71, 127, -100, 127, 50, 10, -40, 127, -19, -29, -17, 127, 92, 12, 127, 127, -53, -120, 127, -127, -127, -32, 53, -127, -50, 127, 127, 127, -127, 127, 127, 127, 124, 127, -8, -127, 127, 127, -82, 127, 127, -127, 75, -70, 48, 127, 127, -27, -99, 127, -62, 127, 127, 11, -127, -2, -85, 127, 127, 127, -127, 127, 127, 6, 127, 127, 127, 127, -127, 127, -127, -24, -127, 127, 127, -127, 127, -44, -29, 127, 70, -127, 72, 127, -127, -127, 127, 127, 127, -64, -28, 127, 127, 22, 51, -127, 127, 127, 127, -35, 127, -127, 127, -127, 127, 127, 127, -127, 127, 8, 127, 127, -127, 26, -16, 127, -45, 127, 127, 19, -4, 17, -103, 127, 127, 127, -39, -127, 127, -127, 127, 127, -108, 24, -127, 127, -95, 127, 89, -96, -43, 127, -11, -127, -68, 127, 127, -121, -127, 52, 127, -5, 127, 127, 127, -55, -30, 127, 127, 127, 127, 51, 50, -127, -41, 127, 127, 127, -49, 120, 109, -21, 127, -44, 127, 85, 108, 127, -87, -11, 127, 127, -127, -127, 127, 127, 127, 127, 127, -127, 61, -17, 127, 127, 17, 127, 22, 127, -120, 61, 127, 127, 120, 5, 127, 58, 47, -32, -74, -127, -62, 37, 48, 127, -52, 39, -127, 11, 49, -3, -104, 127, 127, 127, -43, 122, 19, -127, -127, 46, -127, 127, 127, -36, -67, -127, 127, -127, 17, 127, 127, -120, 88, 127, 127, -11, 106, 127, 127, 127, 127, 127, -69, -13, -76, -55, 127, 127, 127, 127, 127, -107, 127, 127, 127, 127, -82, 127, 127, 127, -127, 27, 60, -45, -87, -127, 127, 31, 127, -24, 127, 127, 127, -127, -31, -127, 127, 127, -127, -12, -95, 127, -17, -99, -127, 127, 127, 127, 2, -127, 127, -127, -127, -81, 127, 127, -105, 127, -127, -60, 127, 127, -41, 127, 127, 106, 127, 127, -33, 100, -5, -45, -127, -127, -127, -70, -127, -111, -48, 23, 127, -127, -24, 127, 77, -127, -60, 124, 46, 127, 127, -36, 24, 65, 127, 127, -88, 127, 127, -82, 24, -79, 127, 91, -74, -127, 127, -79, 127, 6, -81, -127, 127, 127, 78, -127, 39, 16, -127, 22, -45, -12, 127, -21, 127, 127, 127, -127, -127, 127, 12, -78, 127, 70, 127, 83, 127, 127, -75, 127, 127, -127, 127, -26, 127, 127, 127, 20, -99, -118, -50, 127, 127, 127, -3, 44, 127, 127, 4, 127, 39, 127, 127, -21, 127, -127, 127, -111, -120, -127, 46, 119, 127, -57, 42, -19, 127, -3, 38, -119, 127, -3, -127, -51, 127, 127, 127, -127, -107, -46, -70, -11, -94, 127, -43, -17, -86, -61, 127, 127, -89, 127, -29, 127, 74, 127, 127, -127, 127, 127, 5, -26, -127, 127, 127, 13, -109, 127, -106, 127, 127, 127, 127, 127, 127, 75, -16, -127, 127, 127, -19, -5, 76, -76, -64, 127, -109, 127, 127, -68, 127, 127, -42, -127, -42, -92, -127, 127, -21, 48, -127, 127, -127, 127, 127, 127, 127, 127, 127, -127, 127, -127, -53, -57, -127, 127, -36, -69, 127, 127, 127, 127, -127, 127, 127, -127, 127, 127, -41, 18, 127, 127, -76, 2, 127, 127, 127, 127, 127, 2, -51, 127, 127, 88, -10, 127, 127, 127, 63, 5, 127, 127, 127, -43, 127, -127, 127, -92, 127, 127, 127, 127, 127, 127, -62, 122, -127, 126, 61, 57, 127, 92, -87, 127, -19, -57, 104, 7, 18, 46, -28, -17, -53, 5, -5, 127, 33, 119, 11, 59, -22, 2, 48, -41, 11, -113, 98, 30, 26, 32, 102, -42, 6, -127, -41, 66, -24, 39, 82, 11, -105, 67, 127, -10, 29, 28, -88, -15, 21, 13, 10, 15, 120, -86, -42, -8, 19, 125, -45, 33, 30, -11, 28, -69, 5, 103, 4, -121, 19, 17, 29, 69, -108, -102, 23, 44, 18, -31, 11, 5, 47, 127, 101, -127, -30, -42, 25, -79, 23, 50, 62, 4, -6, -127, 20, -36, -1, 124, 0, 60, -110, 25, 126, -3, 20, 37, 25, 127, -17, 40, 36, 127, -2, 48, 116, 113, 9, 18, -53, -67, 44, -116, 15, 127, -50, -46, -57, 24, 52, 9, -8, -9, 34, 73, 127, 51, 127, -37, 100, 43, -15, 55, 16, 2, 80, 32, -42, 8, 31, -19, -85, -8, -23, 32, 54, -122, 46, -76, -127, 45, 70, 18, 53, 97, 50, 9, 42, 82, 45, 49, -27, 9, 14, -36, 56, 35, 46, -87, 4, 127, -15, 42, 106, 11, 127, 57, 71, 44, 41, 16, -5, -123, 5, 25, 22, 91, -127, 33, 54, 13, 3, 0, 11, -73, 26, -15, 56, -33, 17, -12, 31, -127, 37, 17, 28, -29, 127, 29, -105, 41, 46, -30, 21, 65, 104, 0, 18, 33, -22, -2, 33, 98, 9, 11, -120, 13, 64, 3, -28, 40, 127, -24, -3, 35, 6, -80, 127, 20, -59, 5, -37, 126, 99, -127, 3, 45, 6, 88, -5, 56, 59, 15, 30, -29, -120, 25, -54, -31, 59, 18, -49, -124, -65, 76, 42, -34, 1, 127, -127, 54, -127, 61, 10, 21, 52, 46, 14, 4, 13, 23, 15, -24, 57, 21, -11, 7, 104, 71, 11, 20, -2, -4, 16, 3, -31, 40, 41, 4, 87, -19, -16, 15, -108, 10, 125, 28, -107, -34, -45, -5, 82, 110, -9, 83, 41, 50, -2, -35, 127, -111, 50, 6, -36, 19, 35, -127, 62, -52, 34, 21, 109, 22, 33, -92, 8, 11, 23, 46, 11, 25, -31, 9, 29, -2, -119, 127, 41, -24, 40, 12, 37, 17, 19, -3, 32, 5, 104, 6, -106, 9, 0, 44, 28, -53, -50, -11, -63, 102, 8, -21, 42, 23, 50, 30, 12, -45, -127, -30, 42, 8, -43, -2, 127, 5, 83, -62, -24, 40, 78, 50, -114, 43, 0, -41, -73, -82, 16, 10, -27, 50, -59, 112, 14, 44, 50, 10, 14, 126, 29, 20, -21, 12, -127, -127, 45, -28, -115, 112, -10, 123, -90, -54, 4, 118, -40, 48, -107, -14, 125, 63, -114, 18, 15, -44, -1, 123, -6, 40, -56, 55, 101, 127, -121, -127, 28, 101, -37, 44, 35, -13, 27, 18, 127, -90, 57, 1, 8, 123, 22, -29, -5, 37, 62, -13, 98, 50, 13, 36, 39, 40, -46, 1, 119, 127, 4, 5, -7, 127, 36, 31, 127, 5, 72, 17, 48, 14, 12, -10, -19, -1, -62, -119, 127, 34, 19, -2, 54, 32, 49, 10, -127, 13, -116, 25, 30, -44, 37, 45, 47, 127, -124, 72, -11, 123, 7, -25, 29, -17, 1, -79, 9, -62, 43, -127, -70, 56, 51, 37, 13, -4, 127, -91, -127, 75, -127, 10, 127, -98, -28, -16, -10, 78, -127, 7, -23, 48, 3, 27, 3, -55, 21, 20, -127, 49, -42, 17, 2, -127, -89, -4, -23, 6, 19, 16, 51, 116, 20, 63, -57, -21, 63, 23, -6, -28, 48, -94, 127, 84, 68, 14, 28, -54, 41, 11, 2, -21, -97, 126, -12, 8, -127, 52, 42, -4, -11, 58, 6, 45, 71, 18, 22, -39, 17, -76, 127, -45, 4, 12, 127, -70, -102, 6, -11, -2, -51, 65, 15, -56, 21, 15, 119, -27, -38, 22, -28, 16, 9, 1, 63, 13, 0, 1, -102, 82, 5, -2, 122, -1, 36, 21, 88, -127, -14, 7, -84, -95, 42, 63, 86, -23, 48, -1, 70, 36, 6, 19, -33, 106, -41, 127, 127, -124, 27, -19, 19, 66, 107, -21, 74, 1, -20, 6, -32, 127, -17, -13, -7, 96, 4, -3, 5, 42, -1, 24, -65, -7, 2, -92, 127, -14, -3, 5, 34, -51, -3, 47, -13, 2, 22, 44, 127, -5, 9, 70, 6, -6, 21, 56, -121, 18, 4, 3, 3, 82, 57, -33, 8, -92, -4, 86, 2, -14, 12, -5, 1, -9, 22, 69, -1, -61, 0, -7, 19, 2, -58, 93, 8, 22, 0, 28, -2, 6, 4, 58, 3, -91, -33, -5, 0, -33, 1, 26, 40, 2, 1, -80, -5, -56, -26, 105, 1, 37, -43, 23, 80, 2, 89, 12, 18, 29, -2, 10, 35, 88, -2, 34, 29, 81, -2, -36, -14, -4, 5, -70, 9, 35, -38, -8, -26, 7, -10, 6, 11, -41, 16, -14, 3, 12, 66, 9, 51, -8, 4, -3, 3, 4, 60, 12, 2, 0, 0, -4, -39, -41, 10, 24, -25, -68, 9, -127, -35, 8, -17, -2, 13, 72, 11, 3, 17, 49, 10, 28, -15, 9, -1, -15, 4, 22, 76, -84, -26, 58, 9, 3, 32, 41, 19, 14, 11, 18, -27, -2, 5, 7, -10, 8, -42, 38, -14, 29, -15, 10, -1, 1, -3, -10, 6, -14, 21, -12, -22, -17, 0, -71, 8, 24, 7, -41, 53, 8, 38, 33, 14, -57, -2, 30, 32, -9, 15, -7, -9, 11, -12, 54, 26, -1, -72, 124, 13, -1, -14, 5, -4, -16, 122, 3, 17, -39, 10, -5, 9, 127, -20, 57, 0, -1, -2, 3, 4, 8, -9, 25, 36, 1, 9, -8, 17, 14, 127, -35, 5, 23, -41, -26, 28, 48, 16, -19, -13, 11, -26, 15, -33, -10, -65, -7, 41, 33, -15, -48, -5, 4, -2, 5, 75, 24, -34, -8, 78, 41, 11, 6, 5, -1, 4, -28, -41, -18, 5, -10, 64, -11, -9, 29, -94, 8, 54, 16, 5, -5, -5, -13, 37, 61, 12, 19, -9, 17, 8, -5, 71, -38, 18, 2, -17, 2, -11, -69, 41, 0, -1, 2, 55, -12, -6, -85, 3, -2, 6, -23, 4, 0, -27, 10, -11, -72, -81, 69, -1, -5, 24, 3, 7, 6, 13, -11, -1, -1, 85, -18, -74, 1, -4, 13, 89, -34, 4, 1, -11, 54, 3, -17, 16, 39, 52, 31, 2, -4, -44, -45, 11, -1, -7, -9, 62, 1, 17, -25, 2, 48, 5, 4, -1, 3, -14, -41, -49, -53, -1, -7, 122, 28, 63, 8, 28, 3, -5, -2, -26, 41, -29, -4, 93, -20, -59, -10, 17, 22, -33, 35, 43, 15, -36, 40, -2, 26, -10, 24, 8, 12, 3, -44, -5, -2, -7, -27, 20, 49, -36, 30, -15, 16, 35, 77, -56, -10, 28, 5, -16, -1, 7, 0, 9, 1, 42, -40, -33, -2, -30, 58, -5, -8, 5, -3, 0, -13, 52, 17, 1, 3, 17, 31, -19, -29, 56, 53, -8, -4, 12, 34, -8, 1, 59, 2, 44, 13, 6, 8, -2, -7, 2, 1, -15, -47, 72, -6, 6, -1, 10, 22, 1, -13, -106, -8, 13, -4, 0, -17, 2, 13, 10, -44, -54, 39, -18, 60, 11, 12, 14, -8, -3, -127, 4, -32, 7, -21, -6, 2, 18, 22, -16, 74, 90, -45, 0, 5, -54, -2, 66, -110, -27, -16, -27, -23, -77, 1, -25, 28, 15, -12, 7, -35, -5, -1, -8, 46, -1, 1, 3, -33, -30, -10, -9, 3, 2, -1, 11, 25, -5, 49, -24, -86, 6, -11, 9, -14, -8, -125, 62, 60, 15, -14, 15, 5, 11, 12, -17, 29, -78, 99, 32, -10, -111, 8, 18, -1, -26, 18, -1, 46, 29, -3, -16, 0, 5, -19, 48, -23, 19, 5, 30, -73, -77, 1, -34, -11, 29, 18, -8, -40, -6, -15, 49, 7, -35, -51, -15, 1, -70, -1, -2, 1, -17, -5, -93, 30, 5, 19, 34, 10, 1, 0, -5, -62, 2, -19, 6, -91, 12, 47, -9, -8, 1, 4, 80, 2, 13, 0, -5, -7, -5, 28, 13, -31, 2, -92, 13, -5, 81, -3, -41, 18, -7, 6, 23, 92, -45, -1, -13, -60, 0, -54, -3, 12, -27, 15, -21, -14, 4, 39, -46, 25, 4, 8, 4, 30, 3, 37, -7, -29, -14, 20, 75, -4, 27, -12, -9, 5, 7, 14, -45, -15, 4, -6, -3, 18, 36, 0, 11, -71, 2, -90, 42, 7, 10, 33, 2, -23, 12, 11, 2, 22, 10, 1, 5, -5, -20, 3, 6, 17, -3, 0, -28, 8, 24, 0, 27, 42, -46, -3, 7, -35, -3, 20, 11, 2, -3, -12, 4, -24, -53, 64, -4, -2, -5, 5, 31, 2, 40, 6, -12, 12, 4, 3, 19, -7, -8, 7, -5, -38, -3, -28, -7, -14, 14, -44, 5, -37, 7, 0, 2, 6, -5, -23, 9, -27, 4, 9, 9, 5, -43, -3, 29, -3, -5, -6, 3, -1, 55, 14, 15, 2, -8, -25, 44, -25, 1, 10, -16, 2, 1, 34, 7, 2, 7, 0, 2, 24, 26, -13, 6, 28, 21, -1, -4, 11, -18, -13, 10, -6, 12, -75, -5, -42, 2, 7, 55, 29, -14, -2, 11, 13, 5, 3, 0, -2, 3, 1, 18, 11, 25, 10, -16, -24, -2, -7, 4, 2, 3, 38, -6, 5, -1, -32, 7, 10, 6, 14, -1, 76, -5, -1, 38, 30, 3, -62, -10, 28, -12, -7, 11, 0, 12, 3, -6, 10, 7, -2, -59, 21, 11, -1, 14, -10, 11, -3, 36, 8, 7, -34, -53, -5, 4, 9, -9, 28, 22, 19, 0, 3, -2, -12, -15, 14, 12, 9, 8, -15, 3, 4, 3, -10, 9, 4, 26, -1, -43, 28, 7, -12, 1, -18, 21, 7, 54, -19, -47, -1, 28, 11, -18, -71, 7, 6, -6, 8, 41, -16, -4, -1, -48, 11, 5, -7, -24, 1, 0, -13, -10, 6, 9, -7, -26, 2, -2, 24, -44, 8, 28, 3, 1, 17, -5, 3, 19, -34, -9, -1, 5, 10, -1, -5, -40, -6, 6, 0, 4, -5, 20, 25, 0, 2, 11, 4, 11, -3, 4, 33, 8, 4, 8, -9, 4, 5, -17, -1, -5, -29, 54, -42, -4, 5, -1, -13, 6, 5, 11, 1, 3, -5, 42, -13, -61, 3, -5, 9, 39, 3, -2, -7, -14, 31, -1, -17, 12, 13, 36, 7, 5, 0, -14, -18, 15, -3, 3, 1, -48, 6, -24, 12, -4, 22, 13, 2, 16, -5, -12, -21, -32, 36, 4, -6, 68, 20, 58, 27, -16, 8, 5, -3, -3, 38, -13, 6, 62, -15, 24, -3, 9, 5, -34, 3, 26, 1, 24, 4, -2, 15, -9, 8, 21, 4, -18, -34, 22, 1, -7, 22, 3, -28, -15, -3, -8, 7, 21, -60, 0, 3, 17, -16, -5, -3, 2, -7, 5, 14, -16, -28, -4, -1, -31, 30, -1, -8, 7, 0, -17, 8, 55, 7, 5, 55, 18, 15, -14, -22, -28, 1, -1, 2, 9, 15, -5, -2, -53, 2, 28, -2, 10, -3, -2, 10, -8, -7, -7, -5, -48, -1, 7, 4, 16, 9, 12, 12, 37, -10, 12, 4, 7, -15, 5, 16, 10, -16, -30, 9, -22, 40, 2, 21, 30, 46, 0, 43, 4, -12, 21, 39, -15, 9, 4, 20, -6, 34, -9, 26, -6, -8, -31, 3, -64, 69, 13, -2, -24, -4, 2, 2, 6, 16, 3, 0, -2, -12, 2, 0, 2, 1, -3, -1, 4, 14, 33, -4, -15, -1, 11, 3, 2, 14, 2, 41, 16, 70, 2, -7, 13, -3, 7, -32, -31, -1, -17, -17, -4, -11, 2, 2, -8, 10, 27, 8, 21, -2, 3, -2, -3, 1, 4, 24, 0, 12, 10, -6, 7, -3, 8, -21, 5, -22, 1, -2, -30, 38, -19, 3, -8, -12, 31, 25, -7, -7, -4, -3, 31, -2, -2, -13, 14, -14, -56, 4, 11, 6, -5, 7, 49, 0, -1, 26, 22, 1, 1, 6, -17, 27, 2, -21, -9, 27, 10, 16, -10, 4, -1, -2, 6, -1, 2, 3, 3, 19, -2, 17, -3, 2, 6, -34, -17, 8, -34, -1, -57, 50, 7, 0, 43, 77, -81, 4, -63, -63, -1, -20, -3, 48, 34, 3, 1, -28, 3, 48, 68, 54, 7, 19, 28, 105, 3, 16, -2, 4, -3, -18, 122, 3, -19, -32, 27, -2, 7, 3, -69, 28, 17, 0, -1, -10, 11, 38, 9, 30, 7, -41, 94, 13, 18, -54, -2, 74, 25, 35, 1, 19, 8, 1, 17, -58, -78, -10, 9, 28, 4, -22, 42, 54, 25, 16, -8, 37, -110, -28, 9, -44, 3, 5, 3, -11, -26, -56, 2, -46, -53, 9, -7, 0, -59, 7, 30, -4, 55, 17, 50, -14, 5, 21, -12, 11, -27, -4, 18, -45, -7, -24, -58, -55, 6, -93, 20, -31, 50, 10, 1, -1, 2, -26, 2, -35, 20, -15, -1, 33, -44, -21, 18, 10, -17, 8, -2, 26, 18, 52, -79, 7, 16, -12, 23, -21, -11, 19, 23, 29, 18, 40, -30, -6, 23, 1, 6, 53, 34, -38, 7, 25, 33, 35, -2, 2, -17, 6, 6, 13, 2, -85, -15, -48, -9, 19, 103, 30, -46, -6, 89, 8, -3, 3, 13, -40, -18, 11, 42, 50, 10, 3, 17, -17, 6, 24, 8, -14, 13, 65, 10, 42, 22, 17, 7, 6, 11, 21, 6, 49, -19, 3, 9, 17, 17, -100, -39, 9, 73, -1, 14, 4, 80, 18, 7, -17, -10, 21, -93, -44, 13, -10, 54, 7, 55, -7, -45, 8, 37, -42, -3, -3, -22, -12, 41, 19, 41, -1, -3, 11, -5, -10, 25, -15, 20, 5, 13, 6, -35, 11, 2, -4, 16, -1, 68, -76, -67, 44, 2, -2, 4, 32, 3, 23, 43, 13, 11, 3, 39, 19, 8, -75, -6, 8, 0, 26, 5, -42, 16, -3, -57, 10, 28, 0, -26, 10, 2, -8, -73, -23, 9, -20, -10, -39, -6, 89, -106, 2, 12, 14, 19, -42, -25, 22, 66, -40, -74, 27, -7, 15, -12, 6, -52, 9, 13, 36, 2, 1, 18, 42, 57, 15, 16, -9, -66, 0, 12, 33, 40, 5, 6, -9, 6, 2, -12, -1, 1, -72, 40, -40, 56, -16, 1, 3, 14, 1, 6, -13, 10, 8, 0, -10, -65, 8, -12, 14, -4, 63, -15, -48, -20, 63, -2, -72, 31, 26, 21, 26, 8, 18, 28, -17, 12, 0, -4, 42, -41, 5, 26, -37, 29, 40, 34, 5, 32, 4, -12, -35, -50, 87, 5, -1, 85, 17, 75, 99, -31, 16, 9, 0, -27, 82, 11, 9, 108, 8, 38, -43, 19, 9, -57, 62, -6, -49, -6, -87, 0, 19, 1, 21, 22, 22, 39, 36, 10, 4, 3, 8, 48, 54, 1, 12, 2, 21, 38, -91, 21, -48, 14, 38, 29, 0, 12, -1, 32, -26, -25, -95, 10, 5, -5, 0, 12, -28, 7, 29, 10, 32, 44, 68, 17, -40, 6, 7, -15, -28, -73, -6, 1, 6, 1, 25, 19, -19, -68, 2, 55, 5, 3, 42, 6, 3, -2, 31, 9, -12, -79, 11, 20, 0, 19, -19, -6, 6, 38, -5, -36, 8, 14, -91, 11, 9, 17, -12, -98, -3, 23, 97, 1, 26, 9, -25, -8, 20, 5, 0, 5, 21, 2, 9, 9, 22, -21, 12, -40, 49, -71, 46, 11, 7, -64, 35, 68, -39, -32, -45, 22, -5, -14, 15, 6, 4, 4, -35, 0, -1, 12, 30, 1, 6, 1, 18, 28, -7, -33, 0, 10, 10, 24, 32, 9, 14, -66, 85, 7, 10, 40, 27, 71, -12, -24, -21, 35, -1, -7, -1, 17, 1, 12, -13, 46, 38, 37, -4, -6, 30, -20, 0, 4, 21, 4, 10, 22, 5, 38, -2, 17, -52, -2, -79, 10, -1, -3, 61, -20, 2, -8, 13, 20, 16, 3, 32, 2, 6, 38, 52, 57, -3, 42, 29, -42, 1, 27, -1, -2, -15, 64, 8, 3, 11, 52, -7, 10, 13, 54, 8, 9, -6, -14, 52, 17, 60, 11, 26, -1, 17, 29, 14, 9, 1, -22, 1, -27, 36, 13, -52, 10, -69, -46, 10, -35, 0, 18, 113, 15, 3, 127, 18, -93, 124, -86, -14, 16, 100, 22, 83, 127, 90, 74, -54, 28, -18, 105, 120, 16, 30, 70, -50, 3, -103, 127, 127, 29, -36, 101, 23, -59, -46, 122, 110, 37, -9, -90, 41, 45, 14, 12, -23, 78, 83, 5, 53, 5, 44, 19, 13, 18, 127, 33, 127, -25, -7, 1, 1, 34, 19, 27, -127, -94, 8, 16, 36, 127, -6, 127, 127, 49, -3, -96, -7, -18, -36, 12, -66, 22, -17, 74, 6, 127, -108, 12, -53, -127, -17, -3, 53, -103, -27, -13, -6, 102, 3, 127, -43, -11, 29, -12, -5, -49, 56, 127, -13, 6, 10, -75, 127, -30, -113, 79, -54, 127, 69, 127, 12, 49, 110, -7, 6, 39, 18, -30, 68, -6, -46, -35, 89, -31, 27, 9, 107, -59, 127, 127, 100, -3, 127, -39, -3, -31, 39, -7, -19, -13, 7, -90, 73, 46, 15, 10, 99, 22, -127, 35, 92, 40, 56, -30, 95, -20, -6, -26, 58, 57, -92, 4, -3, -36, 45, 112, -32, 45, 10, 109, -53, -33, 4, 18, -113, -43, 31, 29, 127, 6, -30, 29, -40, 12, 123, 16, -69, 9, -19, 56, 61, 64, 118, 35, 9, 50, 35, 22, 38, -26, 3, -127, 36, 46, -127, -43, -121, 127, 6, 1, 32, 121, 7, 22, -81, -7, -21, -115, -14, -31, -13, 127, 55, 99, -21, -17, 20, 127, -81, 97, 6, 19, -21, 101, 17, -62, -16, 10, 43, -21, 44, 127, -11, 45, 16, 38, 127, -102, 9, -12, 28, -56, 43, 127, -127, -89, 127, 8, -10, 19, 80, -27, 45, -10, 127, 76, 22, 78, 19, 17, -50, 27, 8, 23, 115, 36, -37, -8, 10, 1, 121, 127, 12, 2, 81, 27, -5, -127, -25, -5, -72, 12, -105, -39, 106, -119, -4, 1, 50, -61, -74, -60, 127, 127, -5, -127, 67, -65, 44, 19, 14, 14, 36, -32, 127, -72, 25, 78, 6, 127, 91, 40, -31, -64, 8, 38, -17, 127, 24, 28, 15, -36, 29, 35, 13, -19, -18, 58, -21, 122, -60, 82, 29, 29, 27, 22, 127, 38, 17, -38, 7, -72, 18, 10, 46, -87, 127, -86, -112, 86, 107, 17, 11, -58, 76, 30, 35, 12, 96, 86, -47, 42, 3, -24, 127, -51, 13, 127, -127, 93, 8, 58, 34, -5, 29, 22, -55, -73, 6, 13, 27, -73, 56, 44, -127, 5, 47, -45, 3, -35, 90, 38, 15, -19, 115, -8, -72, -69, -18, -97, 107, -22, -88, -7, -91, 24, -81, -20, 29, 44, 1, 94, 84, -51, 10, 7, -70, 127, 109, 24, 44, -27, 64, 111, -26, 19, -121, 51, 127, 127, 31, 36, -15, 46, -127, 1, -126, 13, -1, 127, -41, 92, -48, -2, 127, -37, 127, 62, 127, 25, 26, 17, -26, -36, -20, 27, -15, -15, -26, 70, 49, 54, -50, -13, 2, 103, 56, 47, 127, 9, -115, 31, 127, 13, -32, -54, 42, 33, 0, -18, -20, 73, -9, -8, 16, -127, 55, 43, -33, 33, -61, 88, -16, -122, -29, 127, 85, 14, 127, -88, -18, 0, -10, -16, 30, 35, 2, 48, -35, 90, 32, 76, -67, 25, -33, -60, 127, 56, 31, -42, -36, 127, -105, -5, -5, 112, 13, -7, 13, 127, 12, 16, -72, 27, 15, -4, 127, -14, 17, 10, 12, -3, 16, 116, -1, 17, 25, 45, 115, 13, -35, -103, -72, 40, 30, 127, 127, 127, 40, 4, -35, 127, 34, 31, 127, 42, 7, 127, 2, -33, 30, -3, -4, -8, 127, -16, 0, -18, 41, 7, 60, 38, -17, -1, 21, 15, -34, -56, -77, 1, 11, -48, 9, 100, 10, -2, 59, -13, 61, 9, 16, 21, -13, -43, 120, 26, 18, 127, 127, 14, 8, 84, 5, 20, 127, -51, 46, 2, 127, -16, -3, 57, 9, 127, 2, 39, 40, 58, -44, 50, 60, -54, 127, 17, 31, 45, 44, 23, 20, -65, 127, -94, 119, 30, -92, 34, -39, -67, 65, 4, -10, 42, 45, 4, 4, 50, 87, -94, -1, -50, 47, -2, -13, 0, 50, 30, -12, 4, -22, 4, -71, 79, 47, 5, 22, 14, -35, 1, 14, 0, -1, -5, -17, 127, 4, -23, -26, 20, 9, 11, 7, -91, -18, 9, 0, 0, -5, 37, 34, 17, 41, 6, 122, -98, 5, 15, -39, 1, 71, 24, -28, 2, -50, 9, -2, 19, -55, -66, -7, 8, 29, 5, -22, 50, 52, 28, -11, -3, -45, 127, -33, 8, -48, 3, -1, 8, -8, -27, -43, 1, -42, -63, 2, -7, -10, -62, 9, 31, -1, 36, 17, 53, -19, 4, 19, -14, -21, -30, 0, 14, 31, -6, -25, -54, -45, 8, -100, 21, 5, 56, 17, 9, 2, 2, -21, 4, -39, 21, -6, -9, 27, 20, -26, 8, 6, -19, 5, 3, 27, 9, 39, -67, 13, 14, -8, -36, -21, -12, 22, 13, -36, 18, -42, -20, -9, 31, -3, 5, 28, 29, -41, 4, 31, 32, 31, -6, 3, -28, -1, 6, 13, -8, -76, -13, 44, -5, 17, 127, 38, 12, 11, 101, 5, -16, 5, 4, -52, -17, 15, 43, 49, -26, 5, 13, -14, 5, 21, 8, -21, 14, -22, 18, 41, 17, 25, 3, -16, 5, 9, 5, -10, 12, 4, 8, 17, 18, -78, -35, 10, 63, 1, 16, 0, 72, 13, 3, -15, -15, 26, -113, -38, 10, -6, 55, 5, 63, -8, -33, 12, 28, -45, -6, 0, -27, -5, 42, 18, 49, 1, -1, 9, -9, -11, 24, -3, 20, 9, 13, 11, -33, 12, -12, 1, 24, 0, 73, -76, -57, 44, 6, 1, 9, 29, 0, 15, 44, 11, 8, 8, 53, 23, 6, -72, -5, 6, 1, 25, 1, 127, 9, -4, 45, 12, 23, 1, -27, 30, 2, -11, -68, -9, 14, -22, 7, -42, -6, 90, -102, -6, 5, 10, 18, -50, -29, 24, 71, 33, -80, 27, 4, 11, -9, 6, 16, 13, 12, 37, 0, 2, 23, -47, 63, 5, 15, -1, -70, -4, 9, -72, 37, 4, 5, -20, 4, 3, -4, 3, 8, -68, -3, 33, 52, -19, 5, 2, 12, 1, 8, -9, 7, 3, -15, -15, -52, 6, -7, 12, -10, 59, -12, -50, -18, 58, 1, 24, 37, 24, 10, 15, 6, 16, 17, -17, 8, 3, -2, 45, 26, 9, 27, -31, 28, 46, 30, 10, -38, 4, -11, -32, -41, -19, 11, 1, 76, 11, 71, 83, 1, 17, 13, -1, -25, 69, 8, 8, 127, 17, -54, -32, 6, 1, -68, 54, -8, -52, -7, -90, -1, 15, -8, 21, -50, 19, 38, 31, -27, 3, 2, -26, 49, 61, 3, 8, 1, 26, 55, 87, -86, -27, 21, 43, 26, -2, 13, -1, 26, -60, 30, -97, 7, 3, 4, 5, 9, -29, 6, 22, -86, 34, 46, 73, 14, -29, -6, 7, -14, -33, 23, -11, 0, 8, -1, 14, 16, -17, 35, 1, 64, 3, 3, 45, 5, 2, -4, 25, 16, -28, 66, 9, 20, -1, 15, -21, 5, 9, -49, -4, -48, 14, 13, 14, 9, 14, 14, 33, -95, -5, 21, 86, -1, 29, -7, 11, -6, -13, 0, -6, 7, -46, 0, 5, 9, 19, -12, 13, 66, -39, -76, 45, 0, 11, 47, -57, 73, -39, -36, -40, 27, -4, 9, 16, 14, 2, 0, -39, 6, -3, -11, 34, 0, 4, -1, -46, -30, -9, -27, -1, 4, 10, 11, 27, 8, 7, -55, 108, 14, 3, 38, 33, 67, -1, 67, -19, 34, 2, 0, 7, 9, 0, 20, -14, -69, 33, 36, -3, 16, 38, 66, 3, 10, 28, 2, 15, 19, 7, 36, 0, 14, -35, 3, -69, 13, -4, 28, -38, -4, 3, -16, 15, 25, 17, 3, -11, -1, 9, 37, 54, 58, -6, 46, 37, -35, 1, 25, -3, 3, -10, -98, 10, 7, 13, 50, -5, 9, 11, 63, -13, 12, -17, -22, -67, 9, 53, 15, 24, 4, 17, 17, 3, 7, 2, -19, -3, -22, 25, 15, -56, 15, -69, -45, 13, 44, 3, 36, 22, -4, 8, 19, 86, -30, 2, -15, 33, 2, -51, 0, 10, -36, 10, -25, -21, 6, -44, -18, 23, 0, 5, 2, -40, 2, 39, -15, -16, -9, 15, 64, -6, 36, -34, -13, -5, 5, 13, -39, -3, 8, -4, 2, 13, 27, 5, 21, -66, 4, 61, -50, -9, 15, -9, 2, -27, 13, -9, 0, -22, 10, 5, 9, 5, -22, -12, 2, 14, -7, -9, -21, 7, 17, 9, 21, -39, 40, -3, 2, -31, -4, 23, 11, 1, -4, -20, 5, -16, -58, 43, -3, -5, -11, 6, 32, 5, 34, 5, -7, 14, 1, -3, 12, 7, -11, 9, -5, 34, 0, -33, -12, -27, 12, -48, 4, 24, 6, -10, 3, 8, -4, -13, 8, -26, 8, 3, 8, 7, 34, -6, 31, 0, -5, -9, 3, -2, 49, 19, 4, 1, -14, -26, -46, -29, 0, 6, -14, -30, 1, -60, 16, 3, 17, -1, 4, 36, 27, -15, 9, 30, 16, 4, -8, 14, -17, -10, 5, 2, 17, -86, -6, 33, -2, 4, 48, 24, 21, -1, 1, 12, 1, 1, -1, -2, -2, 2, 19, 9, -14, 6, -17, -23, -2, -3, 5, -3, -1, 1, 8, 3, -1, -23, 6, -20, 8, 14, -3, -16, 32, 0, 37, 25, 1, -70, -11, 30, -8, -6, 15, -2, 19, 1, -8, 23, 3, -4, -45, 25, 9, -4, 15, -8, 16, 0, 35, 5, 10, -34, -57, -8, 0, 9, -20, 39, 30, -10, 6, -5, -2, -11, -12, 7, 14, 6, 6, -13, 3, 4, 26, -12, 14, 1, 26, -2, -51, 11, 4, -11, 3, -25, 23, 12, 55, -23, -42, 0, 21, 14, -16, -70, 4, 3, -1, 17, 53, 35, -3, -1, 36, 1, 7, -4, -18, 5, -3, -12, -6, 2, 10, -7, 30, 8, 0, 35, -58, 7, 32, 7, 4, 8, -13, 5, 24, 36, -12, -10, -3, 1, -4, -6, 42, -12, 11, -3, 2, -2, 22, -35, 0, 2, 8, 7, 6, 8, 1, -43, 8, 2, 14, -10, 4, 8, -16, -1, -15, -29, 4, 39, 2, 2, 3, -1, 2, 7, 12, 2, -4, -5, 43, -14, -56, 3, -5, 8, 45, 13, 5, 2, -24, 34, 0, -5, 12, 15, 30, 11, 4, -5, -8, -18, 13, 1, 5, 3, 48, -1, -26, 5, -5, 17, 12, 0, -19, -2, -12, -9, -37, -33, 3, -4, 56, 5, 56, 44, 4, 8, 8, -5, -10, 41, -7, 7, 60, -26, -28, 1, 8, 6, -31, -5, 26, -1, -21, 1, -4, 14, -4, 16, -17, 4, -21, -18, 1, 4, -3, -33, 6, -76, -18, 2, -5, 15, 27, 44, -30, 5, 4, 0, -2, -3, -2, -6, 15, -6, 23, -30, -2, -1, -31, 26, 4, -1, 11, 0, -6, 14, 50, 2, 1, 37, 11, 16, -11, -22, 26, -1, -4, -7, 6, 19, -3, -3, 6, 1, 6, -2, 9, -4, -1, 12, -2, 1, -9, -6, 22, 1, 9, 2, 15, 6, 28, 2, -43, -10, 12, 8, 0, -5, 3, 13, 12, -7, -32, 7, -19, 42, -2, 22, 27, 9, 0, -42, 5, -7, 18, -24, -15, 10, 2, 12, -11, 39, 41, -21, -2, -7, -31, 2, 30, -54, 6, -6, -18, -12, 5, 7, 2, 19, 6, -3, -3, -22, -3, 0, -2, 6, -4, -1, -2, -22, -22, -7, -11, -4, 6, -2, 4, 5, 5, 31, 13, -44, 4, -19, 12, -9, 3, -31, 20, 9, -23, -20, -4, -9, 0, 0, -17, 18, -40, 11, 17, -1, 3, -6, 26, -3, 2, 5, 0, 12, 12, -2, 10, -4, 9, -26, 29, -21, -1, 0, 29, -50, -17, 4, -5, -4, 31, 18, -2, -23, 0, -4, 30, 1, -3, -14, 6, -15, -50, 2, 12, 5, -4, 1, -61, 7, 0, 29, 19, 1, 4, 5, -17, -18, 2, -18, -6, -51, 8, 1, -12, 3, -7, 1, 24, 15, 3, -1, 0, 22, -6, 7, -2, 3, 7, -41, -4, 16, 31, -3, -10, 29, 6, 9, 38, 61, -33, 7, -17, -22, 2, -29, 0, 8, -3, -44, 6, -8, -2, 18, -24, 1, 8, 15, 36, 21, 4, 7, -12, 9, 2, 0, 39, -16, 31, -32, -3, -4, 18, -1, -11, 7, -2, -2, 4, 2, 31, 24, 10, -23, 1, -45, 49, 14, 4, 5, 4, 13, 10, 26, 1, 15, 12, 1, 12, -20, -11, -4, 3, 5, 13, -2, 15, 9, 2, -3, 10, 21, -48, 4, 5, -28, -1, 14, 11, 9, -2, -21, 2, -16, -74, -11, -4, -2, -32, 0, 6, 1, 21, -3, 21, -11, -2, -2, 0, 27, -10, -1, 22, -31, -4, -21, -15, -27, -5, -37, 8, -13, 13, 58, 13, 3, -7, 0, 2, 10, 9, 3, 0, 9, -21, 19, 20, -4, -17, -7, -3, 7, 3, 27, 11, 6, 5, -6, 3, -12, -8, 15, 7, 13, 2, 17, -13, 9, 0, -1, 0, 57, 31, -18, 9, 14, -7, 24, 28, 8, -13, 21, 2, 1, -7, -34, -9, -19, -22, -6, 23, 0, -1, 4, -15, 12, -1, 5, 4, 6, -2, 8, -2, -7, 15, 6, -2, -19, -9, 14, 3, -9, -4, 27, 1, 25, -3, -15, 6, 4, -4, 14, -2, 127, -21, -1, 16, 21, 13, 6, -12, 20, -7, -7, 10, -1, 34, 13, 1, 4, -2, 1, -35, 5, 2, 5, 20, 6, -15, -1, 19, 3, 22, -26, -5, 11, -15, -5, 17, 24, 19, 18, 1, -12, -10, -12, 2, 1, 5, 13, 5, 9, -15, -2, 6, -5, 18, 15, 33, 12, -109, 19, 0, -6, 6, 19, 0, -11, 34, -34, -15, -1, 11, 7, -9, -14, -1, 9, -6, 20, 28, -23, -5, -9, -23, -5, 10, -13, -4, 0, 1, -7, -1, -11, -6, -34, -22, -29, -7, 26, -35, -1, 35, 5, -1, -9, -19, 9, 11, -17, -28, 4, -7, 21, -9, 4, -41, 12, 1, 8, -3, 0, 9, 11, 31, 16, 8, -5, -43, 4, 6, -4, 6, -5, 1, 5, -4, -3, 0, -3, -6, -14, 27, -15, 19, -11, 2, -15, 11, 4, 3, 9, 3, -9, 17, -8, -32, 6, 0, -4, 8, 23, -5, -19, 22, 23, -4, -13, 8, 33, -22, 17, 2, -1, 5, -18, -12, -7, -8, 15, -33, -4, 4, 1, 5, 6, 19, 10, 5, 5, -8, -38, -43, 11, 6, -4, 44, -6, 47, 44, -36, 4, 7, -5, -5, 36, -2, 7, 15, -6, 16, -16, 16, 12, -29, 4, 23, -16, 6, -10, -2, -4, -12, -8, 4, 6, 18, -9, 6, 2, -7, 21, 10, 58, -11, 6, 0, -8, 23, -20, 20, 13, 19, 26, 2, 1, 11, -2, 11, 5, -20, -24, 4, 1, -2, -1, 14, -7, 11, -15, -6, 15, 13, 9, 2, 0, -4, 2, -7, -11, -27, 1, -10, 5, 4, 13, -5, -9, -15, -3, -55, -7, 16, 19, 0, 0, -6, -6, 12, 3, -23, 2, 10, 1, 10, 8, 18, -7, 14, -13, 4, -2, -2, -11, 4, 4, 7, -10, -10, -8, -2, 26, 3, 26, 16, 42, 2, 19, 5, 2, 10, 24, 13, 5, 5, -7, -15, 21, -31, 31, 5, -7, -5, 4, -44, 23, 16, -18, -15, 7, 6, 2, -4, -5, 9, 3, -5, -7, 2, 4, 3, 38, -6, 8, -2, 13, 21, -3, 23, -8, 1, 5, -1, 8, 1, -8, 1, 73, 6, -5, 18, 22, 7, 17, -4, -21, -10, -18, 16, 3, -31, -1, 19, 8, 22, 6, 8, 2, -15, 10, 4, -2, 6, -42, 1, 10, 15, -6, 14, -1, 9, -12, 10, -25, 2, 2, -10, 45, 4, -1, -25, 1, 4, 13, -1, 17, 8, -22, 14, 14, 20, 11, 19, -4, -27, -1, 10, 0, 1, -15, 15, 12, 7, 35, 15, -1, 17, 2, -27, 10, 5, -19, -19, 13, 17, 6, -27, 7, 4, 28, 15, 13, 1, 2, -6, -20, -3, 27, -3, 8, 10, -5, -24, 4, -36, -5, 8, 29, -4, 5, 18, 84, -68, 2, 0, -13, -4, -15, 7, 16, 23, -16, -10, -16, 5, 0, 52, 15, 9, 6, 17, 3, -4, 33, 34, 22, 9, 0, 68, -4, 31, -9, 5, 13, 15, -3, -59, 14, 6, 1, 6, -2, 13, 16, 17, 24, -4, -68, 11, -10, 20, -7, 2, 33, 7, 34, 5, -8, 3, 10, 9, -23, -23, 8, 1, 17, 6, 0, 48, 35, 18, 7, 7, -9, -44, -9, 3, -35, 4, -14, 4, 2, -3, -14, 0, -21, 5, 8, -2, 16, 8, 0, 4, 1, 35, -1, 27, -31, -1, 1, -10, 39, -11, 0, -1, 0, -2, -41, -20, -13, -23, -70, 1, -12, 20, 36, 14, 10, -2, 4, 5, -12, 15, -6, 3, 15, -5, 0, -10, -14, -30, 3, 10, 11, 20, 23, -52, -5, 5, 10, -10, -17, -3, 15, -7, 2, -1, 18, -14, -5, 5, -3, -1, 46, 18, -16, -1, 21, -17, 4, 41, 8, -4, -14, -10, 7, -1, -26, -4, -4, -15, 4, 69, 20, -14, 2, 27, 0, -1, 1, 3, 2, 4, 7, 7, -14, 1, 0, -8, -4, 0, 23, 5, -7, -1, -3, 4, 37, 5, 2, 9, -4, -3, 10, -3, 89, -8, 3, 36, 9, 10, -49, -8, -11, -1, -6, 17, -7, 31, 15, -3, -7, -11, 6, -47, -9, -1, 3, 30, -6, 8, -6, -23, 1, 32, -42, -13, 11, -1, -10, 29, -5, -4, -2, 1, 0, 0, 15, -6, -6, 14, 5, 7, 25, 5, 2, -8, 2, 0, 2, 43, -6, -41, 36, 11, -1, 10, 11, -6, 13, -5, 4, 4, -3, 18, 8, -3, -42, -2, 8, -2, 13, -10, -32, -7, 1, -13, 14, 22, -12, -10, 19, 0, -5, 14, 3, -23, -19, 16, -21, -9, 24, -53, 6, 12, 9, -1, -24, -5, 39, 61, -14, -55, 21, -6, -4, -1, 2, 0, 35, 2, 17, 2, 5, 11, -7, 53, 6, 6, -12, -17, -4, 5, 14, 13, 7, 4, 5, -2, -2, 8, 0, 3, -19, 35, -19, 22, -8, 8, 15, 9, 1, 10, 41, 2, -8, -25, 3, -42, 8, 2, 2, -3, 33, -15, -33, 49, 13, -5, 0, -9, 13, 23, 1, 4, 26, 13, -9, -7, 0, 0, 39, -17, 7, -10, -2, 3, 21, 17, 4, 9, -8, -3, -21, -24, 18, -6, -2, 57, 7, 33, -5, -5, 6, 6, -4, 3, 19, 2, 1, 67, -15, 7, -20, 3, -1, -25, -1, 4, 7, -4, 33, 0, 15, 0, 17, 14, 7, 13, 57, 10, -3, -2, 8, 17, -101, 3, -7, 2, -2, 41, -38, 27, 20, -2, 13, 7, -5, 11, -12, 19, 3, -12, -59, 7, 1, 5, 4, -1, -25, 6, -10, 9, 27, 15, -1, 4, 48, -12, -8, -9, -23, 21, 0, 0, 8, 10, -10, 12, -9, -29, 4, 24, -4, 16, 39, -1, 8, 7, 10, 8, 1, -20, -1, 10, 2, -1, -6, 11, -8, 1, -9, -2, 0, 11, -2, -2, -4, 5, -16, -42, -3, 0, 20, 4, 14, -14, -12, 0, 5, -7, -5, 10, -4, 29, 2, -12, 10, 20, 41, 0, -10, -23, -11, 18, 8, -18, -22, 38, -48, -22, -10, 12, 8, -9, -8, 1, -6, -3, -76, 3, 4, 1, 57, -3, 4, -2, 10, 12, -1, 55, -3, 6, 1, -12, 13, 2, -16, -16, 88, 9, -11, 22, 16, 26, 11, 8, -50, -7, -12, 18, 0, -3, 0, 14, -12, 4, -7, 12, -4, -3, 34, -6, -6, -6, 27, 11, -18, 2, 1, 4, 5, 1, -45, -1, -43, 3, 0, 14, 34, 19, 2, -2, 22, 22, 16, -2, 21, 0, -9, 22, 30, 18, 0, 30, -13, -46, 1, 11, 4, 2, 1, -4, 7, -2, -13, 2, 0, 1, 5, -4, 3, 8, 0, -21, 7, 11, 22, -13, 24, 2, 6, -21, 13, 7, 3, 0, -41, 5, 1, -1, 6, 6, 8, -27, -4, -13, 3, -6, 86, -12, -19, 44, 88, -110, 59, -8, -1, 4, 66, -5, 46, 52, 127, 20, -42, 4, 0, 125, 17, 12, 13, 15, -14, 6, 42, 97, 48, 10, 3, 46, 0, 22, -9, 17, 13, 19, 18, -80, 21, -2, 12, -4, 7, 30, 40, 20, 16, -14, -22, -7, -12, 32, 126, 1, 48, 13, -7, -3, 1, 0, 2, 11, -31, -58, -7, 6, 49, -24, 11, 58, 35, 9, -3, -32, -1, -18, -10, 12, -27, -1, -4, 40, 18, 50, -35, -6, -23, -120, 9, 5, 22, -49, -7, -14, -4, 73, -10, 13, -26, 2, 13, -2, 13, -50, 26, 6, -3, -2, -54, -52, 77, -73, -83, 60, -13, -3, 109, 37, 10, -7, 91, 6, -30, 0, 10, 12, 29, 2, -2, 3, -4, -38, 9, 4, 29, 6, 28, 66, -5, -4, 75, 3, -28, -2, 23, -19, -26, 9, 14, -43, -3, 20, -4, 9, 37, 27, -30, 14, 57, -16, 24, 117, 52, -17, -15, 1, 33, 26, -67, -31, 6, -32, 9, 40, 35, -1, 4, 9, -9, -18, -3, 7, 5, -27, 11, -19, 23, 5, -1, 13, -34, 6, 44, 2, -26, 4, -15, 13, 37, -31, -26, 1, -11, -2, 25, 5, 74, 0, 4, 34, 26, 7, -95, -5, -39, 31, -12, -10, -19, 85, 20, -4, -36, -11, -28, -83, 2, 5, -3, 38, -12, -11, 4, 24, 2, 62, -63, -11, -10, 15, 3, 78, 15, -4, -3, 0, 18, -4, 10, 13, -2, 37, 4, -1, -3, 39, 5, 0, -2, -2, 25, 110, -17, 19, 50, 11, -10, 9, 12, -8, 24, -23, 83, 19, -7, 45, 27, -11, -51, -4, 8, -5, 50, 8, -9, 18, -10, -6, 58, 52, -11, 14, 38, 3, -18, -72, 2, -79, -25, 2, -4, 3, 16, -80, 11, 9, 21, -6, -81, -24, 47, 12, 13, -106, 24, 15, -1, 0, -5, -4, 38, -1, 9, -16, 16, 12, 2, 59, 42, -3, -14, 36, 2, -7, 1, 26, 6, 7, -14, 5, -10, -7, 0, 5, -84, 32, -6, 42, -28, 37, 31, 8, 9, 10, 108, -3, -19, -13, -16, -75, 10, -6, 5, 0, 65, -39, -83, 127, 50, -1, 3, -18, 54, 51, 23, 5, 47, 46, -23, -9, 2, 11, 44, 0, -8, -27, -14, -3, 60, 4, -4, -12, -1, -14, -45, -73, 12, 6, 2, 38, 22, 50, -98, -11, 9, -6, 6, 9, 28, -15, -2, 115, -41, -11, -54, -42, 3, -38, 21, 18, 32, 1, 20, -1, 5, -11, 13, 1, 16, -23, 127, -22, -3, -3, -18, 27, 58, -2, -17, -3, -7, 35, -26, -4, -6, 19, 22, 17, 3, 10, 2, 21, -1, -22, -67, 16, 3, 2, 0, -19, -16, 9, -12, -3, 26, 2, 18, 0, 12, -3, 9, -14, -23, -9, -7, -10, 1, 10, 7, 16, -4, 15, 4, 36, 3, 7, 97, -7, 36, 11, 15, 13, -5, -31, 9, 5, 3, -2, -23, 19, -7, 0, -6, 17, -4, 15, -3, -7, -26, -24, 0, -93, 8, -16, 47, 13, 30, -14, 4, -13, -8, 9, 34, 16, 16, 32, -9, 22, 20, 5, 15, 19, -24, -32, -43, 36, 4, -13, 18, 53, -108, -37, -33, 59, -1, -3, -6, 9, -6, 1, -74, -5, -1, 4, 63, -2, -4, -3, 5, -20, 9, 127, 1, 8, -1, 0, -9, -4, -5, -30, -26, -2, -16, 49, 0, 21, -27, 8, -43, -7, 2, 22, 10, 23, 1, 57, -4, -23, 10, 29, -14, -4, 93, -12, 1, -3, 13, 1, 24, 1, -2, -18, 22, 2, -24, -1, -60, 20, 1, 18, -15, 28, 1, -33, 13, 18, -4, -7, 5, -1, -19, -3, 54, 4, -21, 44, 38, -74, 0, -18, 3, -5, 75, 3, 14, -9, 18, -23, 4, -11, 7, 23, -5, 1, 26, 79, -23, 17, 57, -16, 44, -5, -4, -12, 11, -3, -3, -18, 48, 12, 56, 12, -12, 13, 6, -12, -6, -4, -11, -2, 42, -7, 5, 22, 98, -68, 9, -10, 7, -2, -17, 6, 14, 26, -14, -10, -18, 1, -10, 27, 16, 8, 10, 27, -19, -1, 38, 33, 22, 17, -1, 66, -9, 31, -2, 10, 0, 15, 0, -61, 12, 13, 0, 1, -4, 20, 19, 17, 19, -1, 61, -1, 11, 21, -24, -1, 40, 11, -35, 6, -6, 2, 2, 4, -33, -25, -15, 1, 12, 1, -4, 41, 35, 17, -3, 2, -2, 48, -9, 6, -30, 3, -8, 3, 0, -2, -26, 4, -16, 4, 5, -6, 8, -11, 2, 10, -2, 45, 0, 23, -31, -2, 4, -1, -45, -9, -3, -3, 1, 0, -44, -25, -15, -27, -86, 4, 15, 20, 38, 19, 9, -2, 12, 6, -8, 13, 2, 2, 9, 7, 1, -13, -17, -22, 4, 6, 8, 14, 21, -42, -1, 5, 18, -21, -16, -1, 15, -11, -21, 1, -12, -14, -11, -2, -4, -2, 41, 25, -16, 2, 23, -17, 4, 43, 6, 1, 4, -4, 5, -5, -57, -7, -5, -16, 3, 63, 16, 14, 1, 9, 1, 9, 2, 2, 8, 2, 8, 4, -13, 8, 5, -3, -10, 0, 24, 4, -1, 1, -4, 5, 43, 11, -2, 8, 2, 2, 6, -3, 28, 3, 2, 33, 1, 7, -33, -5, -7, 3, -2, 5, -4, 47, 11, -7, -15, -4, 10, -39, -11, 0, -2, 24, -9, 4, -4, -22, 7, 26, -34, -16, 4, -2, -2, 37, -13, -8, 6, 1, -14, -1, 14, -5, -2, 16, 9, 10, 27, -1, -1, 1, 4, 4, 6, 52, 3, -51, 37, 12, -8, 10, 13, -2, 10, -2, 8, 0, -6, 15, 5, -3, -33, -2, 11, -3, 11, -28, 14, -17, 0, 4, 19, 22, -14, -12, 17, -2, -7, 22, -14, -27, -13, -7, -22, -11, 24, -31, 9, 20, 9, -4, -25, -8, 43, 52, 1, -46, 32, -17, -14, -2, 2, -1, 30, 2, 24, 2, 5, 6, 8, 39, 9, 10, -13, -24, -8, 6, -10, 17, 6, 3, 10, -1, -1, 4, -2, 5, -13, -15, -5, 27, -7, 10, 11, 12, 3, 10, 34, -1, -8, -19, -1, -32, 8, -1, 4, -6, 33, -20, -33, 50, 17, -7, 13, -16, 17, 37, 5, 3, 28, 12, -2, -3, 4, 0, 34, -7, 7, -14, 1, 5, 16, 12, 4, -2, -4, -6, -31, -35, -1, 0, -2, 64, 0, 40, -8, -5, 7, 3, 1, -1, 24, 3, 3, 69, -16, -13, -13, 0, -4, -18, -1, 5, 2, -11, 38, -3, 14, 5, 3, -10, 7, 11, 62, 3, -2, -3, -13, 11, -63, 1, -7, 2, 4, 17, 0, -63, 40, 7, 27, 9, -4, 4, -10, 15, 1, 10, -56, 12, 3, 6, -3, -4, -23, 7, -12, 4, 27, 17, 4, 4, 53, -13, -8, -10, -13, 0, 1, 1, 12, 13, -6, 22, -12, 15, 5, 27, 1, 15, 44, 0, 8, 6, 16, 12, -1, 11, 1, 11, 0, 0, -3, 11, -7, 3, -10, 2, -1, 13, 4, -1, -1, -3, 17, -49, -6, -3, 28, 2, 18, -5, -21, -4, -15, -2, -4, 14, -3, 35, 4, -16, 15, 15, 33, 53, -12, -17, -8, 16, 5, 9, 35, 33, -42, -25, -23, 17, 7, 4, -6, -10, -3, -2, -47, 4, 4, -1, 59, -1, 4, -1, -1, -7, 2, 57, 0, 6, 1, -7, 4, 1, -9, -30, -42, 3, -1, 22, 17, 14, -5, 17, -46, -2, -12, 17, 1, -9, 2, 13, -11, -14, -6, 14, -7, 9, 24, -4, -5, -9, 22, 5, 5, 3, -3, 2, 2, 1, -37, -23, -39, 2, -1, -24, -25, 29, 2, -6, 29, 18, 21, 1, -10, -1, -7, 16, 33, 16, 1, 21, -12, -52, 0, 14, 3, -2, 4, -15, 8, 1, -15, 7, -1, 4, 3, -12, 9, 3, 7, -28, -3, 13, 22, -12, 24, 3, 8, -14, 10, 10, 4, 2, -35, 6, 11, -3, 16, 10, 17, -22, 3, 15, 2, 10, 24, 0, 7, 36, 56, -34, 8, -7, 29, 3, -26, 1, 2, -6, -48, 5, -8, -1, -13, -44, -3, 8, 12, 24, -25, -1, 9, -13, 19, 0, 0, 41, -12, 29, -29, -7, 4, 9, 0, -22, -13, 1, -3, 7, 3, 36, 16, 14, -12, 3, 83, -50, -13, 0, -6, 6, 7, 10, -25, -1, -18, 10, 7, 14, -17, -19, 1, 6, 8, 18, -1, 15, 8, 9, 1, 12, -21, 49, 3, 5, -26, -1, 11, 10, 6, -4, -19, 1, -9, -63, -3, -5, 5, -19, -2, 10, 2, 12, -4, 15, -11, -1, 0, 1, -30, -15, 3, 13, 31, -4, -19, -11, -22, -7, -26, 11, 20, 14, 53, 8, 7, -1, 16, 3, 5, 5, -5, 6, 6, 20, 15, 16, -5, -21, -8, 0, 8, 9, 37, 14, 5, 9, -1, -25, -11, -4, 24, 12, -12, 1, -18, -7, 8, -8, 3, 1, 68, 27, -21, 15, 16, 3, 6, 25, 5, -13, 16, 0, 0, -4, -17, -8, 12, -18, -4, 37, 2, 1, 6, 0, 9, -5, 3, 10, 3, 3, 5, 7, 14, -16, 6, -3, -20, -6, 14, 7, -10, 1, 0, -3, 27, -6, -10, 3, -6, -9, 21, -1, 25, 9, -3, 19, 13, 12, 4, -9, 24, -5, -5, 13, 0, 36, 13, 1, -2, 8, 1, -51, 3, 4, 6, 21, 10, -2, -1, 18, 2, 19, -31, -1, 18, -9, -3, 19, 11, 20, -17, 0, -12, -13, -10, 2, 8, 5, 13, 7, 10, -11, -2, 22, -2, 11, 14, 34, 15, -99, 24, -2, -3, 6, 6, 4, -6, 32, -17, -5, -2, 29, 13, -13, -20, 2, 14, -6, 22, 27, 56, -1, -3, 22, 5, 9, -14, -3, 1, 6, -8, -10, 5, -5, -31, 14, -36, -7, 30, -44, -1, 23, 8, 5, -3, -9, 13, 22, 18, -26, 1, -3, 16, -10, 3, 41, 16, 0, 7, -4, 1, 12, -10, 29, 16, 7, -6, -42, 1, 12, -17, 7, 0, 1, -8, -1, -1, 2, -2, 0, -20, -12, 14, 18, -13, -2, -12, 9, 3, 5, 7, -4, -7, 18, -4, -40, 7, 4, 7, 9, 21, -6, -16, 22, 25, 0, -2, 9, 18, -33, 14, 7, -3, 3, -12, -4, -7, -7, 17, 9, -4, 2, 3, 5, 2, 24, 10, -13, 4, -2, -31, -19, -8, 12, -7, 32, 6, 38, 44, 15, 6, 7, -13, -2, 47, -4, 7, 18, -8, -25, -19, 9, 8, -17, 8, 22, -17, 11, -9, -2, 5, -18, -18, -10, 6, 10, 13, -15, 3, -6, -9, 18, 50, -11, 4, 5, -11, 25, 12, -14, 10, 18, 14, 3, 1, 20, -2, 16, -6, 18, -23, 5, 1, 0, -6, 14, -8, 9, -14, -11, 14, 24, 5, 1, 32, -2, 1, -9, -14, 22, -7, -10, -5, 7, 9, -7, -5, 12, -3, -59, -4, 9, 20, 2, 0, -10, -12, 11, -3, 11, 4, 4, 2, 9, 9, 10, -2, -26, -14, 10, 1, 6, -11, 0, 10, 7, 15, -7, -11, -3, 23, 3, 17, 9, 6, 3, -12, 2, -1, 6, -31, 11, 4, 9, -10, -20, 32, 46, -11, 6, -2, -9, 7, 23, -25, 19, -34, -10, -4, 13, -1, 3, 2, 6, 2, -3, -7, 2, 5, -2, 43, -6, 11, 0, -10, -16, -1, 21, -2, 4, 10, 10, 17, 0, 12, 4, -62, 1, -3, 21, 20, 9, 25, 3, -30, -11, -19, 15, 1, -13, -5, 18, 7, -38, 4, 7, -2, 22, 2, 30, -2, 7, -34, 4, 3, 12, -4, 16, 1, 6, -25, 10, -26, 4, 1, -3, -39, -2, -1, -24, 5, 0, 23, -1, -7, 6, -21, 17, 15, 25, 11, 22, -10, -32, 0, 9, 1, -1, -7, -21, 21, 4, 38, 18, -2, 13, 2, -36, -9, 2, -18, -27, -27, 12, 11, -31, 4, 3, 22, 3, 11, -3, 5, -2, -8, 1, 19, 1, 10, 6, -17, -21, 7, 36, -6};

float bias_raw[672]={-1.2730425596237183, -0.9222303628921509, -0.22324098646640778, 0.015529632568359375, -1.3730933666229248, 0.6316578388214111, -1.0409808158874512, 1.3214614391326904, -2.4015560150146484, -0.9927726984024048, -0.6731989979743958, -0.4040927290916443, -0.6488162279129028, 0.4085654020309448, 0.5049527883529663, -3.147822380065918, -1.562978744506836, -0.35797834396362305, 0.5424088835716248, -1.1337743997573853, -0.22047385573387146, -1.3157800436019897, -1.9833595752716064, -0.05825090408325195, -0.25218069553375244, 0.6489089727401733, -0.28603869676589966, 0.09594062715768814, 0.5794482231140137, -2.1759252548217773, -2.8211047649383545, 0.7154682278633118, -0.5466769337654114, 0.4769343137741089, 0.14308315515518188, -2.307676315307617, 0.8277795314788818, 0.29589009284973145, -2.7975049018859863, -0.4848535656929016, 0.9286109209060669, -1.2048676013946533, -0.8865888714790344, -0.630268931388855, -0.361178994178772, -0.13269944489002228, 2.5123884677886963, -0.5261082053184509, 1.106694221496582, -0.0732773169875145, -1.404892921447754, 1.0892059803009033, -1.6044164896011353, 0.8726386427879333, 1.7561984062194824, -1.7136403322219849, -0.41798174381256104, 0.32397884130477905, -0.2597895860671997, -1.0519722700119019, -0.47116661071777344, -1.6353691816329956, -2.4255475997924805, 0.958028256893158, -0.409381628036499, 0.5175160765647888, 0.7106267213821411, -1.3706104755401611, 0.2647658586502075, 0.20134377479553223, -1.0939435958862305, 0.09004940092563629, -0.07283556461334229, -0.9030389189720154, -1.7742400169372559, -1.1630370616912842, -0.3024943470954895, -0.9353663325309753, -1.6711987257003784, 0.893201470375061, -1.3717718124389648, 0.012073636054992676, -0.47352975606918335, -1.647731900215149, -3.394503116607666, -1.8279732465744019, -0.45368140935897827, -1.525738000869751, -6.7929229736328125, -1.8468005657196045, 0.23767870664596558, 0.4273177981376648, -0.04160518944263458, 0.13548994064331055, 1.022904872894287, 1.239213466644287, -0.8305148482322693, -0.5032405257225037, 1.1120539903640747, -0.8581559658050537, 0.6225454211235046, 0.22690802812576294, 0.3114314675331116, 0.678466796875, -2.034303665161133, -0.7082590460777283, 0.6303713917732239, -1.9794453382492065, -1.5923478603363037, -0.9147083163261414, 0.36736610531806946, -0.2665938138961792, -0.5942608714103699, 2.073235511779785, 0.6488980054855347, -0.5651885271072388, -0.6236039400100708, -1.410874605178833, -0.41614243388175964, -0.7247480154037476, -0.4844399094581604, -2.3014352321624756, -0.296613872051239, -0.8471056818962097, -0.20889133214950562, 0.6229608058929443, -2.7936673164367676, -0.790473997592926, -0.6098608374595642, 0.16003382205963135, -0.7115879654884338, 0.490220844745636, 1.019850730895996, -1.2047390937805176, -0.222770094871521, -0.0010529011487960815, -2.2381391525268555, -0.5767989754676819, 0.8386256694793701, -2.38377046585083, -3.0845532417297363, 0.05915609002113342, -1.6209437847137451, 0.3530941903591156, -1.8224412202835083, -0.5130003690719604, -0.645220160484314, -2.3512027263641357, -1.35597562789917, -0.8893773555755615, -1.6595754623413086, -1.29280424118042, 1.2301273345947266, 2.3822004795074463, 0.9084942936897278, -0.02633756399154663, -1.7198935747146606, -0.14367318153381348, -1.4744300842285156, -1.0296361446380615, 0.5454542636871338, -3.91495943069458, -1.978775143623352, 1.38202702999115, 0.47726574540138245, 0.8555812835693359, 0.20247600972652435, -0.23978430032730103, -0.7105907201766968, -2.9171478748321533, -2.473299026489258, 1.661529541015625, 0.8487736582756042, -1.1470887660980225, -0.9354020357131958, -0.3832104802131653, 0.008148431777954102, -1.316441297531128, -1.411992073059082, -3.7446396350860596, -0.45219701528549194, -0.8342067003250122, 0.6783693432807922, 2.2090582847595215, -3.8172965049743652, -0.04983118176460266, 0.975672721862793, -0.7805089950561523, -0.16087549924850464, -1.5471833944320679, -1.3810436725616455, -1.4610148668289185, 0.37498903274536133, -3.131999969482422, -0.5928643345832825, -0.9292356967926025, -1.2806888818740845, -0.4275364875793457, -1.0536959171295166, 0.0038851499557495117, 1.7511383295059204, 0.4584338665008545, -0.1279977709054947, 0.62137770652771, -0.8932954668998718, -0.9840074777603149, 1.142615795135498, -3.7982635498046875, -0.5409138202667236, -1.2871861457824707, -0.9387720823287964, -0.17145255208015442, -1.0879595279693604, 0.1897801160812378, -0.47925615310668945, 1.7067596912384033, 0.45004087686538696, 0.5436340570449829, -1.0637348890304565, 0.1764030158519745, -1.4627578258514404, 2.663461685180664, -0.6695916056632996, 0.4291263818740845, -0.7229747176170349, 0.03450042009353638, -0.9563069939613342, -0.6716073751449585, 1.0712242126464844, -0.22287476062774658, -1.009093165397644, -0.6737978458404541, -0.5379459857940674, -2.4464707374572754, 0.11978177726268768, 1.0713858604431152, -0.23040947318077087, -0.4049743115901947, 0.5913165807723999, 0.024147868156433105, -1.4511830806732178, 1.0692473649978638, -3.743675470352173, 0.8381928205490112, 0.29082807898521423, 1.6950578689575195, 1.3495254516601562, -1.1916999816894531, -0.6364648938179016, 3.236912250518799, 0.15979743003845215, -0.8409000635147095, 0.012944430112838745, 0.6167424917221069, -1.177489995956421, 2.7201573848724365, -3.1409943103790283, -2.2093706130981445, 1.5665552616119385, -1.4778525829315186, -1.0376510620117188, 0.33794111013412476, -0.7695448398590088, 0.7233278155326843, -0.7339460253715515, 2.803748607635498, 1.1888436079025269, 0.19316738843917847, 0.3783985674381256, -0.8803660869598389, -1.104240894317627, -0.19628340005874634, 0.9604265689849854, 0.5302546620368958, -0.19270867109298706, 0.17193818092346191, -0.7208001613616943, 0.9142425060272217, 0.5904098749160767, -0.06816529482603073, -0.8755403757095337, -0.18234924972057343, -2.5618174076080322, 0.872928261756897, -0.3916071057319641, 0.15455752611160278, -2.8759632110595703, 0.43297839164733887, 1.9155685901641846, 0.761771559715271, -0.9112821221351624, 0.5070189237594604, -2.40959095954895, -0.4257528781890869, 0.22982779145240784, 1.0626635551452637, -0.7163066267967224, 0.6770525574684143, 1.5220332145690918, 0.6744893789291382, -0.07776355743408203, -1.5278379917144775, -1.1823546886444092, -1.0851093530654907, -0.08471094816923141, 0.20158261060714722, 1.0224882364273071, -0.883301854133606, 1.0316059589385986, -2.1925601959228516, 0.9127136468887329, -0.6778515577316284, -0.3078901767730713, -1.7083806991577148, 0.5469775199890137, -0.8524911403656006, -0.845520555973053, -0.8659430742263794, -0.46404755115509033, 0.22038626670837402, -0.8968548774719238, 0.22730213403701782, -1.4671505689620972, 0.5623245239257812, -1.227867841720581, -1.5807831287384033, 0.24885261058807373, 1.1637489795684814, -0.6460549235343933, -1.1198081970214844, 1.3317410945892334, -0.1941279172897339, -0.7415890693664551, -0.8394709229469299, 0.9288505911827087, 1.1527115106582642, -0.11531892418861389, -1.0191888809204102, 0.09572342038154602, -1.4592540264129639, -1.1262834072113037, -0.4750712811946869, -0.5180138349533081, -1.845025658607483, -0.11202999949455261, -3.1057586669921875, -0.6872155666351318, 1.5761576890945435, 0.6742103695869446, -0.8993866443634033, -3.3483023643493652, -0.9426895380020142, -4.256346225738525, 3.6728103160858154, -3.614281415939331, -0.5428050756454468, -0.26393669843673706, -0.984197199344635, 2.1995198726654053, 0.788920521736145, -1.6517032384872437, 0.48475608229637146, 1.750616192817688, 0.11858904361724854, -0.41253897547721863, -3.2253849506378174, -0.6513844132423401, -0.780055582523346, -0.7203422784805298, -0.822293758392334, -0.31040453910827637, -0.5701112151145935, 0.6697555780410767, 1.1038024425506592, -2.5633909702301025, -1.6773267984390259, 1.706752896308899, -1.74758780002594, 1.4182324409484863, -0.11846236884593964, -0.5266570448875427, 0.9754542112350464, -2.592219829559326, -0.550983190536499, 0.8298088312149048, -0.8049699664115906, -1.7765569686889648, -0.5472297668457031, -0.5193569660186768, 0.9615428447723389, -1.28981351852417, 2.724108934402466, -0.5967456102371216, -1.569118857383728, -1.0531866550445557, -0.9875691533088684, -0.37550199031829834, 1.1442922353744507, 1.0605425834655762, 0.8264936208724976, -0.1327645480632782, -0.7029722929000854, -0.05300694704055786, 2.7336266040802, -0.1374700665473938, 0.4816454350948334, -0.915498673915863, -2.182828903198242, -2.0516440868377686, -0.6551580429077148, 0.5977854132652283, 0.6300685405731201, 0.3682526648044586, -0.31495559215545654, 0.9250407218933105, 0.1528395116329193, -0.6543145775794983, 1.4161978960037231, -0.05077308416366577, -0.1427295058965683, 0.42277204990386963, -0.7617434859275818, 0.11870576441287994, 0.41942569613456726, -1.0018510818481445, 0.02825513482093811, -0.30704838037490845, -0.3360414505004883, -1.4512829780578613, 2.0388519763946533, -1.382334589958191, -0.3078731894493103, 0.30103999376296997, -1.097890853881836, -1.18691086769104, 0.37803980708122253, -0.2382742166519165, -1.7669236660003662, -1.4950071573257446, 1.1125608682632446, 0.7749472856521606, 0.7059977650642395, 0.33529990911483765, -0.9227890372276306, 1.0956767797470093, -1.3214778900146484, -0.4680140018463135, 1.0594860315322876, 0.6835064888000488, -1.0331025123596191, -0.5978304743766785, -0.7047266960144043, -4.504294395446777, -0.6704036593437195, -0.072176493704319, -1.2439422607421875, -1.1565594673156738, -0.2565191388130188, -3.62713623046875, -1.0898981094360352, 1.4038035869598389, -0.09681788086891174, 0.3386108875274658, -1.784956455230713, -0.1573767066001892, -1.2604341506958008, -0.41622141003608704, 0.04001167416572571, -1.1012623310089111, -1.1098796129226685, -1.4733189344406128, 1.9962818622589111, -0.06306993961334229, -0.20790697634220123, 0.8292326927185059, -0.5067790746688843, -1.22771155834198, 0.21721598505973816, 0.09544980525970459, -1.199052333831787, 1.1215746402740479, 0.5872633457183838, -0.7271589040756226, -0.007598996162414551, -1.4012110233306885, -0.4524815082550049, -0.9587538242340088, -1.1946505308151245, -2.923978090286255, -0.8233660459518433, -0.692878246307373, -0.6586126089096069, -3.201383113861084, 0.37395545840263367, -0.6155092716217041, -4.969276428222656, -0.7194894552230835, 0.15889984369277954, -3.4543187618255615, -0.9005811214447021, -1.0289027690887451, 0.686826229095459, -1.437793254852295, -0.2452821582555771, -1.0386708974838257, -0.08491063117980957, 0.46233826875686646, -0.35839685797691345, -0.018507162109017372, -0.7055876851081848, -1.792075276374817, -0.0929725170135498, -2.959303379058838, -0.9563275575637817, 0.709381103515625, 0.5364705324172974, 0.0705353319644928, 0.7041557431221008, -0.9371609091758728, -0.583111584186554, 0.18716877698898315, 0.06646870076656342, 0.15705111622810364, -0.8850011825561523, -1.819637656211853, -0.4226970374584198, -3.227616786956787, -1.3525111675262451, -0.48818671703338623, 0.06662997603416443, 1.1900036334991455, -0.4112255573272705, -0.5096098184585571, 0.15473522245883942, 0.5982859134674072, -1.0346992015838623, 0.19116291403770447, 0.11806412041187286, 0.44507840275764465, -1.0476802587509155, -0.5591627955436707, -1.2187433242797852, -0.7780795097351074, -0.24017810821533203, 0.7477298974990845, -0.47796526551246643, -0.28638124465942383, 0.5857547521591187, -1.1797758340835571, 1.3390522003173828, 0.5423951148986816, 0.1954631805419922, 1.3331043720245361, -1.2365331649780273, 1.5245574712753296, -1.791580080986023, -1.17499840259552, -0.008481740951538086, 1.7915916442871094, -0.4889383316040039, -0.39475858211517334, -1.548317313194275, -1.1705551147460938, 0.23034608364105225, 0.15207332372665405, -0.8425003290176392, -2.046213150024414, -0.8887801170349121, -2.923278570175171, -0.9430456757545471, -1.2307078838348389, 0.8295691013336182, -0.7022193074226379, -0.2607303261756897, -1.2188141345977783, 0.538998007774353, -0.917522132396698, -2.524480104446411, 0.9897380471229553, 1.829045057296753, 0.8513314723968506, -1.0926868915557861, -1.3582125902175903, -0.0072653889656066895, -1.363135814666748, 0.09575825929641724, 2.5059690475463867, -1.1764445304870605, -0.45843935012817383, -1.1490252017974854, -0.5840964317321777, 0.393364816904068, -1.031728744506836, 0.8651634454727173, -1.1317099332809448, -0.5395830273628235, 0.3769769072532654, -0.10856086015701294, 0.6183907389640808, 1.0669652223587036, 0.021401524543762207, -0.9433753490447998, -0.425028920173645, -0.18850475549697876, -1.3656597137451172, 0.8780112266540527, -3.2173261642456055, -0.4806930422782898, 0.5103873610496521, -0.7120051383972168, 0.7777338027954102, -0.7430847883224487, -1.2177762985229492, 0.6169602870941162, 0.8831676840782166, 0.6454336643218994, 0.600944995880127, 0.8497263789176941, 0.8049464225769043, -2.410176992416382, 0.6586681008338928, -1.5854039192199707, -1.032033920288086, 0.8700251579284668, 0.861737072467804, -1.006844401359558, 0.614703893661499, -0.8856406211853027, -0.6917933225631714, -0.7769702672958374, -1.3188501596450806, -1.252880334854126, -3.278247594833374, -1.1426366567611694, -0.32525959610939026, -1.2915345430374146, -1.1273337602615356, -1.7556408643722534, -0.6058248281478882, -0.8778455853462219, -2.2347238063812256, -0.23223760724067688, -1.8756251335144043, -2.110715627670288, 1.972693920135498, -1.3209928274154663, -1.2081420421600342, -0.30893629789352417, -1.8878660202026367, -0.6650677919387817, -2.4554054737091064, -1.1009304523468018, -0.18544180691242218, -0.337035596370697, 0.535347580909729, -0.6114951372146606, -2.017899990081787, -0.2763795852661133, -1.1230230331420898, -1.4323523044586182, -0.6458013653755188, -0.4519960582256317, -1.8956302404403687, 1.1016449928283691, 0.7693803310394287, 2.222334861755371, -1.811544418334961, -0.9667574763298035, 0.11154243350028992, 0.9955869913101196, -1.2364592552185059, -0.5582183003425598};

int8_t* filter_tensor_data=filter_raw;
float* bias_tensor_data=bias_raw;

bool has_conv_bias=true;
int stride_width=1;
int stride_height=1;
TfLiteFusedActivation activation=kTfLiteActNone;
int dilation_width_factor=1;
int dilation_height_factor=1;
const int filter_dims_size=4;
const int filter_dims_raw[4]={1,5,5,672};
const int bias_dims_size=1;
const int32_t bias_dims_raw[1]={672};
TfLitePadding paddings=kTfLitePaddingSame;
TfLiteType filter_type=kTfLiteInt8;
TfLiteType bias_type=kTfLiteFloat32;
const float scale_filter=0.0;
const int32_t zero_point_filter=0;
const float scale_bias=0.0;
const int32_t zero_point_bias=0;

struct OpData {
  TfLitePaddingValues padding;
  // The scaling factor from input to output (aka the 'real multiplier') can
  // be represented as a fixed point multiplier plus a left shift.
  int32_t output_multiplier;
  int output_shift;
  // The range of the fused activation layer. For example for kNone and
  // uint8_t these would be 0 and 255.
  int32_t output_activation_min;
  int32_t output_activation_max;

  // Per channel output multiplier and shift.
  std::vector<int32_t> per_channel_output_multiplier;
  std::vector<int> per_channel_output_shift;

  // Hybrid per channel temporary tensors.
  int input_quantized_id = kTensorNotAllocated;
  int scaling_factors_id = kTensorNotAllocated;
  int input_offset_id = kTensorNotAllocated;
  int32_t input_quantized_index;
  int32_t scaling_factors_index;
  int32_t input_offset_index;
};

void ExtractDepthConvParams(TfLitePadding padding, int stride_width, int stride_height,
                               int dilation_width_factor, int dilation_height_factor,
                               TfLiteFusedActivation activation,
                               TfLiteDepthwiseConvParams* data_params) {
  // TfLiteDepthwiseConvParams data_params;
  data_params->padding = padding;
  data_params->stride_width = stride_width;
  data_params->stride_height = stride_height;
  data_params->dilation_width_factor = dilation_width_factor;
  data_params->dilation_height_factor = dilation_height_factor;
  data_params->activation = activation;
  // return data_params;
}

void GetDepthConvTensor(TfLiteType type, const char* name, TfLiteIntArray* tensor_dims_data, 
                       TfLiteQuantizationParams quant_params, char* tensor_data,
                       TfLiteAffineQuantization* quant_struct, size_t bytes_size,
                       TfLiteTensor* tensor) {
  tensor->type = type;
  tensor->name = name;
  tensor->dims = tensor_dims_data;
  tensor->params = quant_params;
  // tensor->data.raw = reinterpret_cast<char*>(tensor_data);
  tensor->data.raw = tensor_data;
  tensor->bytes = bytes_size;
  tensor->allocation_type = kTfLiteMemNone;
  // data_0.allocation = allocation;
  tensor->is_variable = false;
  if (type != kTfLiteFloat32) {
    tensor->quantization.type = kTfLiteAffineQuantization;
    tensor->quantization.params = quant_struct;
  } else {
    tensor->quantization.type = kTfLiteNoQuantization;
  }
  tensor->sparsity = nullptr;
}
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  // This is a builtin op, so we don't use the contents in 'buffer', if any.
  // Instead, we allocate a new object to carry information from Prepare() to
  // Eval().
  return new OpData;
}

void Free(TfLiteContext* context, void* buffer) {
  delete reinterpret_cast<OpData*>(buffer);
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  // auto* params =
  //     reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data);
  TfLiteDepthwiseConvParams data_params;
  ExtractDepthConvParams(paddings, stride_width, stride_height, dilation_width_factor, dilation_height_factor, activation, &data_params);
  TfLiteDepthwiseConvParams* params = &data_params;

  OpData* data = reinterpret_cast<OpData*>(node->user_data);

  bool has_bias = false;

  // TF_LITE_ENSURE(context, has_bias || NumInputs(node) == 2);
  const TfLiteTensor* input;
  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));
  TfLiteTensor filter_tensor;
  TfLiteIntArray* filter_dims_data = TfLiteIntArrayCreate(filter_dims_size);
  int size_filter = 1;
  for (int i = 0; i < filter_dims_size; i++) {
    // std::cout << "dims_raw: " << dims_raw[i] << std::endl;
    filter_dims_data->data[i] = filter_dims_raw[i];
    size_filter *= filter_dims_raw[i];
  }
  size_t bytes_size_filter = sizeof(float) * size_filter;
  TfLiteQuantizationParams filter_params;
  filter_params.scale=scale_filter;
  filter_params.zero_point=zero_point_filter;
  TfLiteFloatArray* scale_array_filter = TfLiteFloatArrayCreate(1);
  scale_array_filter->data[0] = scale_filter;
  TfLiteIntArray* zero_point_array_filter = TfLiteIntArrayCreate(1);
  zero_point_array_filter->data[0] = zero_point_filter;

  TfLiteAffineQuantization quant_struct_filter;
  quant_struct_filter.scale = scale_array_filter;
  quant_struct_filter.zero_point = zero_point_array_filter;
  quant_struct_filter.quantized_dimension = 0;
  // float* filter_data;
  // filter_tensor_data = filter_raw;
  GetDepthConvTensor(filter_type, "filter", filter_dims_data, filter_params,
                       reinterpret_cast<char*>(filter_tensor_data),
                       &quant_struct_filter, bytes_size_filter, &filter_tensor);
  const TfLiteTensor* filter = &filter_tensor;
  // TF_LITE_ENSURE_OK(context,
  //                   GetInputSafe(context, node, kFilterTensor, &filter));
  const TfLiteTensor* bias = nullptr;

  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TfLiteTensor* output;
  TF_LITE_ENSURE_OK(context,
                    GetOutputSafe(context, node, kOutputTensor, &output));

  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);
  TF_LITE_ENSURE_EQ(context, NumDimensions(filter), 4);
  TF_LITE_ENSURE(context, params->dilation_height_factor > 0);
  TF_LITE_ENSURE(context, params->dilation_width_factor > 0);

  const TfLiteType data_type = input->type;

  const TfLiteType filter_type = filter->type;
  const bool is_hybrid =
      data_type == kTfLiteFloat32 && filter_type == kTfLiteInt8;
  TF_LITE_ENSURE(context,
                 data_type == kTfLiteFloat32 || data_type == kTfLiteUInt8 ||
                     data_type == kTfLiteInt8 || data_type == kTfLiteInt16);
  TF_LITE_ENSURE_TYPES_EQ(context, output->type, data_type);
  if (!is_hybrid) {
    TF_LITE_ENSURE(context,
                   filter->type == data_type || data_type == kTfLiteInt16);
  }

  if (data_type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
  }

  // Filter in DepthwiseConv is expected to be [1, H, W, O].
  TF_LITE_ENSURE_EQ(context, SizeOfDimension(filter, 0), 1);

  if (has_bias) {
    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kBiasTensor, &bias));
    if (data_type == kTfLiteUInt8 || data_type == kTfLiteInt8) {
      TF_LITE_ENSURE_TYPES_EQ(context, bias->type, kTfLiteInt32);
      TF_LITE_ENSURE_EQ(context, bias->params.zero_point, 0);
    } else if (data_type == kTfLiteInt16) {
      TF_LITE_ENSURE_TYPES_EQ(context, bias->type, kTfLiteInt64);
      TF_LITE_ENSURE_EQ(context, bias->params.zero_point, 0);
    } else {
      TF_LITE_ENSURE_TYPES_EQ(context, bias->type, data_type);
    }
    TF_LITE_ENSURE_EQ(context, NumDimensions(bias), 1);
    TF_LITE_ENSURE_EQ(context, SizeOfDimension(filter, 3),
                      SizeOfDimension(bias, 0));
  }

  int channels_out = SizeOfDimension(filter, 3);
  int width = SizeOfDimension(input, 2);
  int height = SizeOfDimension(input, 1);
  int filter_width = SizeOfDimension(filter, 2);
  int filter_height = SizeOfDimension(filter, 1);
  int batches = SizeOfDimension(input, 0);

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params->padding;
  int out_width, out_height;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
      params->dilation_height_factor, params->dilation_width_factor, height,
      width, filter_height, filter_width, padding, &out_height, &out_width);

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training or
  // calibration.
  if (data_type != kTfLiteFloat32) {
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
                      kTfLiteAffineQuantization);
    TF_LITE_ENSURE(context, filter->quantization.type != kTfLiteNoQuantization);
    const auto* affine_quantization =
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
    TF_LITE_ENSURE(context, affine_quantization->scale);
    TF_LITE_ENSURE(context, (affine_quantization->scale->size == 1 ||
                             affine_quantization->scale->size == channels_out));

    data->per_channel_output_multiplier.resize(channels_out);
    data->per_channel_output_shift.resize(channels_out);
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
        context, input, filter, bias, output, params->activation,
        &data->output_multiplier, &data->output_shift,
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier.data(),
        data->per_channel_output_shift.data(), channels_out));
  }

  if (is_hybrid) {
    TF_LITE_ENSURE(context, filter->quantization.type != kTfLiteNoQuantization);
    const auto* affine_quantization =
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
    TF_LITE_ENSURE(context, affine_quantization->scale);
    TF_LITE_ENSURE_EQ(
        context, affine_quantization->scale->size,
        filter->dims->data[affine_quantization->quantized_dimension]);

    int temporaries_count = 0;
    data->input_quantized_index = temporaries_count;
    if (data->input_quantized_id == kTensorNotAllocated) {
      TF_LITE_ENSURE_OK(
          context, context->AddTensors(context, 1, &data->input_quantized_id));
    }
    ++temporaries_count;
    data->scaling_factors_index = temporaries_count;
    if (data->scaling_factors_id == kTensorNotAllocated) {
      TF_LITE_ENSURE_OK(
          context, context->AddTensors(context, 1, &data->scaling_factors_id));
    }
    ++temporaries_count;
    data->input_offset_index = temporaries_count;
    if (data->input_offset_id == kTensorNotAllocated) {
      TF_LITE_ENSURE_OK(
          context, context->AddTensors(context, 1, &data->input_offset_id));
    }
    ++temporaries_count;

    TfLiteIntArrayFree(node->temporaries);
    node->temporaries = TfLiteIntArrayCreate(temporaries_count);

    node->temporaries->data[data->input_quantized_index] =
        data->input_quantized_id;
    TfLiteTensor* input_quantized;
    TF_LITE_ENSURE_OK(
        context, GetTemporarySafe(context, node, data->input_quantized_index,
                                  &input_quantized));
    input_quantized->type = kTfLiteInt8;
    input_quantized->allocation_type = kTfLiteArenaRw;
    if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {
      TfLiteIntArray* input_quantized_size = TfLiteIntArrayCopy(input->dims);
      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_quantized,
                                                       input_quantized_size));
    }
    node->temporaries->data[data->scaling_factors_index] =
        data->scaling_factors_id;
    TfLiteTensor* scaling_factors;
    TF_LITE_ENSURE_OK(
        context, GetTemporarySafe(context, node, data->scaling_factors_index,
                                  &scaling_factors));
    scaling_factors->type = kTfLiteFloat32;
    scaling_factors->allocation_type = kTfLiteArenaRw;
    const int batch_size = SizeOfDimension(input, 0);
    int scaling_dims[1] = {batch_size};
    if (!TfLiteIntArrayEqualsArray(scaling_factors->dims, 1, scaling_dims)) {
      TfLiteIntArray* scaling_factors_size = TfLiteIntArrayCreate(1);
      scaling_factors_size->data[0] = batch_size;
      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, scaling_factors,
                                                       scaling_factors_size));
    }
    node->temporaries->data[data->input_offset_index] = data->input_offset_id;
    TfLiteTensor* input_offsets;
    TF_LITE_ENSURE_OK(context,
                      GetTemporarySafe(context, node, data->input_offset_index,
                                       &input_offsets));
    input_offsets->type = kTfLiteInt32;
    input_offsets->allocation_type = kTfLiteArenaRw;
    if (!TfLiteIntArrayEqualsArray(input_offsets->dims, 1, scaling_dims)) {
      TfLiteIntArray* input_offsets_size = TfLiteIntArrayCreate(1);
      input_offsets_size->data[0] = batch_size;
      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_offsets,
                                                       input_offsets_size));
    }
  }

  TfLiteIntArray* outputSize = TfLiteIntArrayCreate(4);
  outputSize->data[0] = batches;
  outputSize->data[1] = out_height;
  outputSize->data[2] = out_width;
  outputSize->data[3] = channels_out;
  return context->ResizeTensor(context, output, outputSize);
}

TfLiteStatus ComputeDepthMultiplier(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    const TfLiteTensor* filter,
                                    int16* depth_multiplier) {
  int num_filter_channels = SizeOfDimension(filter, 3);
  int num_input_channels = SizeOfDimension(input, 3);
  TF_LITE_ENSURE(context, num_input_channels != 0);
  TF_LITE_ENSURE_EQ(context, num_filter_channels % num_input_channels, 0);
  *depth_multiplier = num_filter_channels / num_input_channels;
  return kTfLiteOk;
}

template <KernelType kernel_type>
TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteDepthwiseConvParams* params, OpData* data,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
                           &output_activation_max);

  DepthwiseParams op_params;
  op_params.padding_type = PaddingType::kSame;
  op_params.padding_values.width = data->padding.width;
  op_params.padding_values.height = data->padding.height;
  op_params.stride_width = params->stride_width;
  op_params.stride_height = params->stride_height;
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.float_activation_min = output_activation_min;
  op_params.float_activation_max = output_activation_max;
  TF_LITE_ENSURE_STATUS(ComputeDepthMultiplier(context, input, filter,
                                               &op_params.depth_multiplier));
  if (kernel_type == kReference) {
    reference_ops::DepthwiseConv(
        op_params, GetTensorShape(input), GetTensorData<float>(input),
        GetTensorShape(filter), GetTensorData<float>(filter),
        GetTensorShape(bias), GetTensorData<float>(bias),
        GetTensorShape(output), GetTensorData<float>(output));
  } else {
    optimized_ops::DepthwiseConv<float, float>(
        op_params, GetTensorShape(input), GetTensorData<float>(input),
        GetTensorShape(filter), GetTensorData<float>(filter),
        GetTensorShape(bias), GetTensorData<float>(bias),
        GetTensorShape(output), GetTensorData<float>(output),
        CpuBackendContext::GetFromContext(context));
  }
  return kTfLiteOk;
}

template <KernelType kernel_type>
TfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                           TfLiteDepthwiseConvParams* params, OpData* data,
                           const TfLiteTensor* input,
                           const TfLiteTensor* filter, const TfLiteTensor* bias,
                           TfLiteTensor* output) {
  auto input_offset = -input->params.zero_point;
  auto filter_offset = -filter->params.zero_point;
  auto output_offset = output->params.zero_point;

  DepthwiseParams op_params;
  op_params.padding_type = PaddingType::kSame;
  op_params.padding_values.width = data->padding.width;
  op_params.padding_values.height = data->padding.height;
  op_params.stride_width = params->stride_width;
  op_params.stride_height = params->stride_height;
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.input_offset = input_offset;
  op_params.weights_offset = filter_offset;
  op_params.output_offset = output_offset;
  op_params.output_multiplier = data->output_multiplier;
  op_params.output_shift = -data->output_shift;
  op_params.quantized_activation_min = data->output_activation_min;
  op_params.quantized_activation_max = data->output_activation_max;
  TF_LITE_ENSURE_STATUS(ComputeDepthMultiplier(context, input, filter,
                                               &op_params.depth_multiplier));
  if (kernel_type == kReference) {
    reference_ops::DepthwiseConv(
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
        GetTensorShape(filter), GetTensorData<uint8_t>(filter),
        GetTensorShape(bias), GetTensorData<int32_t>(bias),
        GetTensorShape(output), GetTensorData<uint8_t>(output));
  } else {
    optimized_ops::DepthwiseConv<uint8, int32>(
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
        GetTensorShape(filter), GetTensorData<uint8_t>(filter),
        GetTensorShape(bias), GetTensorData<int32_t>(bias),
        GetTensorShape(output), GetTensorData<uint8_t>(output),
        CpuBackendContext::GetFromContext(context));
  }
  return kTfLiteOk;
}

template <KernelType kernel_type>
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
                                     TfLiteDepthwiseConvParams* params,
                                     OpData* data, const TfLiteTensor* input,
                                     const TfLiteTensor* filter,
                                     const TfLiteTensor* bias,
                                     TfLiteTensor* output) {
  DepthwiseParams op_params;
  op_params.padding_type = PaddingType::kSame;
  op_params.padding_values.width = data->padding.width;
  op_params.padding_values.height = data->padding.height;
  op_params.stride_width = params->stride_width;
  op_params.stride_height = params->stride_height;
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.input_offset = -input->params.zero_point;
  op_params.weights_offset = 0;
  op_params.output_offset = output->params.zero_point;
  op_params.quantized_activation_min = data->output_activation_min;
  op_params.quantized_activation_max = data->output_activation_max;
  TF_LITE_ENSURE_STATUS(ComputeDepthMultiplier(context, input, filter,
                                               &op_params.depth_multiplier));

  if (kernel_type == kReference) {
    reference_integer_ops::DepthwiseConvPerChannel(
        op_params, data->per_channel_output_multiplier.data(),
        data->per_channel_output_shift.data(), GetTensorShape(input),
        GetTensorData<int8>(input), GetTensorShape(filter),
        GetTensorData<int8>(filter), GetTensorShape(bias),
        GetTensorData<int32>(bias), GetTensorShape(output),
        GetTensorData<int8>(output));
  } else {
    optimized_integer_ops::DepthwiseConvPerChannel(
        op_params, data->per_channel_output_multiplier.data(),
        data->per_channel_output_shift.data(), GetTensorShape(input),
        GetTensorData<int8>(input), GetTensorShape(filter),
        GetTensorData<int8>(filter), GetTensorShape(bias),
        GetTensorData<int32>(bias), GetTensorShape(output),
        GetTensorData<int8>(output),
        CpuBackendContext::GetFromContext(context));
  }
  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedPerChannel16x8(
    const TfLiteDepthwiseConvParams* params, const OpData* data,
    const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output) {
  DepthwiseParams op_params;
  op_params.padding_type = PaddingType::kSame;
  op_params.padding_values.width = data->padding.width;
  op_params.padding_values.height = data->padding.height;
  op_params.stride_width = params->stride_width;
  op_params.stride_height = params->stride_height;
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.depth_multiplier = params->depth_multiplier;
  op_params.weights_offset = 0;
  op_params.quantized_activation_min = data->output_activation_min;
  op_params.quantized_activation_max = data->output_activation_max;

  reference_integer_ops::DepthwiseConvPerChannel(
      op_params, data->per_channel_output_multiplier.data(),
      data->per_channel_output_shift.data(), GetTensorShape(input),
      GetTensorData<int16>(input), GetTensorShape(filter),
      GetTensorData<int8>(filter), GetTensorShape(bias),
      GetTensorData<std::int64_t>(bias), GetTensorShape(output),
      GetTensorData<int16>(output));

  return kTfLiteOk;
}

template <KernelType kernel_type>
TfLiteStatus EvalHybridPerChannel(TfLiteContext* context, TfLiteNode* node,
                                  TfLiteDepthwiseConvParams* params,
                                  OpData* data, const TfLiteTensor* input,
                                  const TfLiteTensor* filter,
                                  const TfLiteTensor* bias,
                                  TfLiteTensor* output) {
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
                           &output_activation_max);
  const int batch_size = SizeOfDimension(input, 0);
  TF_LITE_ENSURE(context, batch_size != 0);
  const int input_size = NumElements(input) / batch_size;
  TfLiteTensor* input_quantized;
  TF_LITE_ENSURE_OK(context,
                    GetTemporarySafe(context, node, data->input_quantized_index,
                                     &input_quantized));
  int8_t* quantized_input_ptr_batch = input_quantized->data.int8;
  TfLiteTensor* scaling_factors_tensor;
  TF_LITE_ENSURE_OK(context,
                    GetTemporarySafe(context, node, data->scaling_factors_index,
                                     &scaling_factors_tensor));
  float* scaling_factors_ptr = GetTensorData<float>(scaling_factors_tensor);
  TfLiteTensor* input_offset_tensor;
  TF_LITE_ENSURE_OK(context,
                    GetTemporarySafe(context, node, data->input_offset_index,
                                     &input_offset_tensor));
  int32_t* input_offset_ptr = GetTensorData<int32_t>(input_offset_tensor);

  for (int b = 0; b < batch_size; ++b) {
    const int offset = b * input_size;
    tensor_utils::AsymmetricQuantizeFloats(
        GetTensorData<float>(input) + offset, input_size,
        quantized_input_ptr_batch + offset, &scaling_factors_ptr[b],
        &input_offset_ptr[b]);
  }

  DepthwiseParams op_params;
  op_params.padding_type = PaddingType::kSame;
  op_params.padding_values.width = data->padding.width;
  op_params.padding_values.height = data->padding.height;
  op_params.stride_width = params->stride_width;
  op_params.stride_height = params->stride_height;
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.depth_multiplier = params->depth_multiplier;

  op_params.weights_offset = 0;
  op_params.float_activation_min = output_activation_min;
  op_params.float_activation_max = output_activation_max;
  TF_LITE_ENSURE(context, filter->quantization.type != kTfLiteNoQuantization);
  const auto* affine_quantization =
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  if (kernel_type == kReference) {
    reference_integer_ops::DepthwiseConvHybridPerChannel(
        op_params, scaling_factors_ptr, GetTensorShape(input),
        quantized_input_ptr_batch, GetTensorShape(filter),
        GetTensorData<int8>(filter), GetTensorShape(bias),
        GetTensorData<float>(bias), GetTensorShape(output),
        GetTensorData<float>(output), affine_quantization->scale->data,
        input_offset_ptr);
  } else {
    optimized_integer_ops::DepthwiseConvHybridPerChannel(
        op_params, scaling_factors_ptr, GetTensorShape(input),
        quantized_input_ptr_batch, GetTensorShape(filter),
        GetTensorData<int8>(filter), GetTensorShape(bias),
        GetTensorData<float>(bias), GetTensorShape(output),
        GetTensorData<float>(output), affine_quantization->scale->data,
        input_offset_ptr, CpuBackendContext::GetFromContext(context));
  }

  return kTfLiteOk;
}

template <KernelType kernel_type, TfLiteType input_type>
TfLiteStatus EvalImpl(TfLiteContext* context, TfLiteNode* node) {
  // auto* params =
  //     reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data);
  TfLiteDepthwiseConvParams data_params;
  ExtractDepthConvParams(paddings, stride_width, stride_height, dilation_width_factor, dilation_height_factor, activation, &data_params);
  TfLiteDepthwiseConvParams* params = &data_params;

  OpData* data = reinterpret_cast<OpData*>(node->user_data);

  TfLiteTensor* output;
  TF_LITE_ENSURE_OK(context,
                    GetOutputSafe(context, node, kOutputTensor, &output));
  const TfLiteTensor* input;
  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));
  // const TfLiteTensor* filter;
  // TF_LITE_ENSURE_OK(context,
  //                   GetInputSafe(context, node, kFilterTensor, &filter));
  TfLiteTensor filter_tensor;
  TfLiteIntArray* filter_dims_data = TfLiteIntArrayCreate(filter_dims_size);
  int size_filter = 1;
  for (int i = 0; i < filter_dims_size; i++) {
    // std::cout << "dims_raw: " << dims_raw[i] << std::endl;
    filter_dims_data->data[i] = filter_dims_raw[i];
    size_filter *= filter_dims_raw[i];
  }
  size_t bytes_size_filter = sizeof(float) * size_filter;
  TfLiteQuantizationParams filter_params;
  filter_params.scale=scale_filter;
  filter_params.zero_point=zero_point_filter;

  TfLiteFloatArray* scale_array_filter = TfLiteFloatArrayCreate(1);
  scale_array_filter->data[0] = scale_filter;
  TfLiteIntArray* zero_point_array_filter = TfLiteIntArrayCreate(1);
  zero_point_array_filter->data[0] = zero_point_filter;

  TfLiteAffineQuantization quant_struct_filter;
  quant_struct_filter.scale = scale_array_filter;
  quant_struct_filter.zero_point = zero_point_array_filter;
  quant_struct_filter.quantized_dimension = 0;
  // float* filter_data;
  // filter_tensor_data = filter_raw;
  GetDepthConvTensor(filter_type, "filter", filter_dims_data, filter_params,
                       reinterpret_cast<char*>(filter_tensor_data),
                       &quant_struct_filter, bytes_size_filter, &filter_tensor);
  const TfLiteTensor* filter = &filter_tensor;
  // const TfLiteTensor* bias =
  //     (NumInputs(node) == 3) ? GetInput(context, node, kBiasTensor) : nullptr;
  TfLiteTensor bias_tensor;
  const TfLiteTensor* bias;
  if (has_conv_bias) {
    TfLiteIntArray* bias_dims_data = TfLiteIntArrayCreate(bias_dims_size);
    int size_bias = 1;
    for (int i = 0; i < bias_dims_size; i++) {
      // std::cout << "dims_raw: " << dims_raw[i] << std::endl;
      bias_dims_data->data[i] = bias_dims_raw[i];
      size_bias *= bias_dims_raw[i];
    }
    size_t bytes_size_bias = sizeof(float) * size_bias;
    TfLiteQuantizationParams bias_params;
    bias_params.scale=scale_bias;
    bias_params.zero_point=zero_point_bias;

    TfLiteFloatArray* scale_array_bias = TfLiteFloatArrayCreate(1);
    scale_array_bias->data[0] = scale_bias;
    TfLiteIntArray* zero_point_array_bias = TfLiteIntArrayCreate(1);
    zero_point_array_bias->data[0] = zero_point_bias;

    TfLiteAffineQuantization quant_struct_bias;
    quant_struct_bias.scale = scale_array_bias;
    quant_struct_bias.zero_point = zero_point_array_bias;
    quant_struct_bias.quantized_dimension = 0;
    
    // float* bias_data;
    // bias_tensor_data = bias_raw;
    GetDepthConvTensor(bias_type, "bias", bias_dims_data, bias_params,
                        reinterpret_cast<char*>(bias_tensor_data), 
                        &quant_struct_bias, bytes_size_bias, &bias_tensor);
    bias = &bias_tensor;
  } else {
    bias = nullptr;
  }

  TFLITE_DCHECK_EQ(input_type, input->type);

  switch (input_type) {  // Already know in/out types are same.
    case kTfLiteFloat32:
      if (filter->type == kTfLiteFloat32) {
        return EvalFloat<kernel_type>(context, node, params, data, input,
                                      filter, bias, output);
      } else if (filter->type == kTfLiteInt8) {
        return EvalHybridPerChannel<kernel_type>(context, node, params, data,
                                                 input, filter, bias, output);
      } else {
        TF_LITE_KERNEL_LOG(
            context, "Type %s with filter type %s not currently supported.",
            TfLiteTypeGetName(input->type), TfLiteTypeGetName(filter->type));
        return kTfLiteError;
      }
      break;
    case kTfLiteUInt8:
      return EvalQuantized<kernel_type>(context, node, params, data, input,
                                        filter, bias, output);
      break;
    case kTfLiteInt8:
      return EvalQuantizedPerChannel<kernel_type>(context, node, params, data,
                                                  input, filter, bias, output);
      break;
    case kTfLiteInt16:
      return EvalQuantizedPerChannel16x8(params, data, input, filter, bias,
                                         output);
      break;
    default:
      context->ReportError(context, "Type %d not currently supported.",
                           input->type);
      return kTfLiteError;
  }
}

template <KernelType kernel_type>
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
  const TfLiteTensor* input;
  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));

  switch (input->type) {  // Already know in/out types are same.
    case kTfLiteFloat32:
      return EvalImpl<kernel_type, kTfLiteFloat32>(context, node);
    case kTfLiteUInt8:
      return EvalImpl<kernel_type, kTfLiteUInt8>(context, node);
    case kTfLiteInt8:
      return EvalImpl<kernel_type, kTfLiteInt8>(context, node);
    case kTfLiteInt16:
      return EvalImpl<kernel_type, kTfLiteInt16>(context, node);
    default:
      context->ReportError(context, "Type %d not currently supported.",
                           input->type);
      return kTfLiteError;
  }
}

}  // namespace jwgksy

TfLiteRegistration* Register_jwgksy_REF() {
  static TfLiteRegistration r = {
      jwgksy::Init, jwgksy::Free, jwgksy::Prepare,
      jwgksy::Eval<jwgksy::kReference>};
  return &r;
}

TfLiteRegistration* Register_jwgksy_GENERIC_OPT() {
  static TfLiteRegistration r = {
      jwgksy::Init, jwgksy::Free, jwgksy::Prepare,
      jwgksy::Eval<jwgksy::kGenericOptimized>};
  return &r;
}

TfLiteRegistration* Register_jwgksy_NEON_OPT() {
  static TfLiteRegistration r = {
      jwgksy::Init, jwgksy::Free, jwgksy::Prepare,
      jwgksy::Eval<jwgksy::kNeonOptimized>};
  return &r;
}

TfLiteRegistration* Register_jwgksy_NEON_OPT_UINT8() {
  static TfLiteRegistration r = {
      jwgksy::Init, jwgksy::Free, jwgksy::Prepare,
      jwgksy::EvalImpl<jwgksy::kNeonOptimized, kTfLiteUInt8>};
  return &r;
}

TfLiteRegistration* Register_jwgksy() {
#ifdef USE_NEON
  return Register_jwgksy_NEON_OPT();
#else
  return Register_jwgksy_GENERIC_OPT();
#endif
}

// Warning: Clients using this variant are responsible for ensuring that their
// models only need the UINT8 type. TFLite's op registration mechanism doesn't
// yet allow for more nuanced registration mechanisms.
TfLiteRegistration* Register_jwgksy_UINT8() {
#ifdef USE_NEON
  return Register_jwgksy_NEON_OPT_UINT8();
#else
  return Register_jwgksy();
#endif
}

}  // namespace builtin
}  // namespace ops
}  // namespace tflite
