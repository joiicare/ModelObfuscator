/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/
#include "tensorflow/lite/kernels/internal/optimized/integer_ops/conv.h"

#include <stddef.h>
#include <iostream>
#include <cstdint>
#include <vector>

// Only use multi-threaded Eigen if ruy is disabled.
#if !defined(TFLITE_WITH_RUY)
#define TFLITE_WITH_MULTITHREADED_EIGEN
#endif

#include "tensorflow/lite/c/builtin_op_data.h"
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/kernels/cpu_backend_context.h"
#if defined(TFLITE_WITH_MULTITHREADED_EIGEN)
#include "tensorflow/lite/kernels/eigen_support.h"
#endif
#include "tensorflow/lite/kernels/internal/compatibility.h"
#include "tensorflow/lite/kernels/internal/types.h"
// b/131835803 forces us to include multithreaded_conv.h before optimized_ops.h
#if defined(TFLITE_WITH_MULTITHREADED_EIGEN)
#include "tensorflow/lite/kernels/internal/optimized/multithreaded_conv.h"
#endif
#include "tensorflow/lite/kernels/internal/optimized/optimized_ops.h"
#include "tensorflow/lite/kernels/internal/quantization_util.h"
#include "tensorflow/lite/kernels/internal/reference/conv.h"
#include "tensorflow/lite/kernels/internal/reference/integer_ops/conv.h"
#include "tensorflow/lite/kernels/internal/tensor.h"
#include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
#include "tensorflow/lite/kernels/internal/tensor_utils.h"
#include "tensorflow/lite/kernels/kernel_util.h"
#include "tensorflow/lite/kernels/padding.h"
#include "tensorflow/lite/util.h"

namespace tflite {
namespace ops {
namespace custom {
namespace cpmalk {

// This file has 4 implementation of Conv.
enum KernelType {
  kReference,
  kGenericOptimized,  // Neon-free
  // kMultithreadOptimized is a mixture of an Eigen-based kernel when threads
  // are available and kGenericOptimized when we must use only one thread.
  kMultithreadOptimized,
  // The kernel uses use CBLAS interface for matrix multiplication.
  // It's fast when an optimized CBLAS implementation is available (e.g. Apple
  // Accelerate Framework), and it's slow when falling back to naive
  // implementation.
  kCblasOptimized,
};

const int kTensorNotAllocated = -1;

static constexpr size_t kMaxIm2colBufferSizeMobile = 1024 * 1024 * 1024;  // 1GB

int8_t filter_r   aw[38400]={-6, 15, -54, 124, -79, 95, 32, -68, -27, -55, 37, -51, -19, 16, 38, 82, 77, 64, 70, 14, -38, -19, 8, -39, -34, 15, -27, 38, -16, -44, -54, -26, -5, -41, 63, -9, -5, -10, -18, 0, -48, 3, -41, -56, 29, 3, -51, 17, 1, 6, 36, 2, 21, -22, 4, 38, 65, -84, 68, -85, -38, 32, -17, -7, -14, -51, -9, 31, 127, -27, 49, 88, -25, 41, 51, 42, -52, -5, -87, 53, 2, -21, 3, -109, 26, 36, -10, 14, -1, -43, 52, 37, 8, 4, -8, 26, -40, 16, -46, 41, 2, -2, -45, -41, 33, -14, 12, 85, 31, 78, -8, 52, -55, 44, 38, -48, 24, 99, -1, 5, -44, 11, 43, 44, 29, -13, -60, -29, -89, 61, 40, 29, -87, 34, -66, 70, 89, -26, 40, -9, -34, 36, -23, 47, 31, -50, -34, 10, 127, 4, -27, -21, 22, 12, 49, -67, -17, 112, 32, -42, -2, -45, -58, 97, -53, -8, -26, 18, -14, 42, 7, -20, 2, -19, 18, 39, -25, -52, 1, 10, -19, -12, -24, -6, 127, 23, 7, -35, -29, 3, 9, -26, 6, -18, -85, -33, -13, 28, 26, 35, 19, 4, 52, -31, 9, -11, -21, 66, -38, 10, 32, -15, -41, 49, -14, -2, -24, 5, -29, 25, -21, 12, 28, -5, -7, 23, 15, 62, -63, -5, 42, -9, -28, 17, -8, -49, -11, 15, 9, 80, -52, 11, 1, 16, -18, 24, -7, 16, -7, 51, -24, -25, -42, 0, -31, -17, -12, 6, -9, 10, 9, -11, 6, 6, -11, 43, -11, -10, 0, 34, -1, 24, -19, -21, 16, -32, -7, 9, -15, -49, -9, -2, 37, -44, 11, -4, -3, -20, -7, -12, -127, 10, 20, -51, -54, 10, 14, -8, 30, -11, 10, -29, 18, -2, -12, 8, 10, -23, 33, 13, 1, -18, 21, -20, -59, -31, -6, -49, 86, 19, -25, -15, -104, -56, 26, 16, -17, 8, -63, -50, -70, 66, -62, -58, 44, 93, -54, 8, 83, 55, -49, 83, 22, -42, 33, -91, 90, 50, 61, -63, -13, -91, -45, 113, -51, 76, 127, -90, -24, 5, 26, -1, -35, 59, -38, 48, -86, -19, -52, 112, 44, 18, 82, -2, 76, -26, -27, 5, 14, -8, 70, 106, 77, 13, -17, -25, -2, 23, 29, -28, -52, -63, -3, 39, 3, -1, -1, 36, -68, -3, -20, -27, -11, -29, -75, -9, -38, 19, -37, 25, 17, 71, 35, -19, 28, 91, -19, 10, 11, 0, -48, 15, -51, -21, 42, -30, 25, 33, -27, -45, 21, -13, 20, -4, 27, -68, 42, 17, 6, -127, -55, -12, 11, 3, 32, 33, 39, 5, -54, -17, -45, -39, -18, -4, 48, 5, 23, 22, 38, 10, 0, -22, 79, -6, 29, 21, -1, 10, -13, -59, -12, -35, 56, -43, -9, -35, -41, -20, 59, 49, -16, 81, -89, 63, 36, -39, 23, 87, 91, -48, -29, -100, -30, 40, 75, 79, 28, 36, -95, 0, -82, 21, -1, 50, -60, 99, 43, -13, 50, -3, 19, 31, 47, 17, 58, -35, 22, -79, -42, 45, -50, 10, -2, 35, 74, 16, 56, -29, 4, 32, -32, -74, -38, -105, 69, 17, 117, -22, -55, 127, -8, -21, 38, -30, 25, -17, -77, 93, 41, 51, 0, 76, 12, -35, -19, -1, 8, 8, -13, -66, 62, 41, -75, -31, 24, -2, -14, -8, 11, 9, 7, -62, -32, 4, -21, 56, -17, 41, -91, -53, 37, -43, -84, 84, -14, 61, -23, 23, 4, -79, 46, 81, 53, 58, 27, -12, 1, -58, 70, 23, 25, 20, 104, 38, -63, 17, 0, 48, -43, 52, -78, -25, -35, 2, 127, 53, 8, 66, -24, -74, -37, 31, -19, 15, -49, -21, 12, 60, -12, -22, 29, 48, -7, 55, 18, -59, -57, -47, 26, 31, 89, -19, -51, -70, -4, -42, 12, 3, -18, -15, -20, -34, 98, 8, -32, -41, -28, -112, -37, 21, 45, 21, 34, 37, -2, 32, -92, -6, 66, 19, 64, 27, -20, -41, -90, -28, -106, 33, -28, 32, -7, 64, -22, 1, 4, -8, 113, 15, 47, -90, 77, 3, -59, 4, -11, -11, -3, 38, 3, 17, -21, 15, 0, -38, -127, 53, -4, -1, -25, -15, 56, 66, -15, -12, 4, 8, 63, 26, -62, -3, 29, 39, 35, -66, -39, 41, 8, 3, -47, 31, 2, 11, 111, 92, -74, -12, -2, -67, -33, 9, -12, 7, -8, 38, -33, 26, 9, 33, 50, -18, -17, 1, 22, 40, 12, 4, 24, 111, -27, -70, -49, 57, -18, 87, -16, -19, 90, -20, -5, -47, 3, 25, 39, -126, 72, -39, 30, -49, -28, -59, -36, 20, -3, -7, -42, -17, 8, -42, -127, 21, -6, -31, 29, 5, -16, 47, 0, 41, -64, -15, 27, -10, 38, -52, 34, -9, 42, 60, 4, -32, -60, 31, -33, 34, -33, -127, 74, -35, -40, -14, -58, 30, -34, -30, 23, 12, 39, -19, -3, 30, -4, 5, -28, 8, -11, 21, 27, 10, 42, -28, -5, -35, 24, -45, -45, -20, -39, 28, 0, -52, 75, 8, -49, 87, -5, 28, 43, 18, -16, 32, 34, -114, -30, -29, -6, -21, 53, 5, -6, 6, 24, -19, 21, -64, -30, -17, 37, -79, 23, 24, -95, 5, -19, -127, 21, -4, -7, 16, -15, 20, -26, 38, -53, -35, -24, 4, 10, -10, -36, 40, -11, 18, 6, -29, -37, 26, 38, -19, -31, 30, -7, -33, -18, -59, -24, -7, -35, -53, -19, 9, 51, 20, 8, 26, 8, 18, 37, 25, 41, -18, 33, 14, -58, 9, -1, -4, 35, -10, 13, -30, 16, 18, -19, 18, -10, 23, 19, -17, -20, -65, 36, -34, 43, 9, 25, -5, -48, 16, -36, 14, -40, -44, -4, 20, -14, 6, -40, -8, -18, -3, -38, 10, -45, -41, 2, -25, 2, 10, 13, 17, -34, -2, -14, -34, 49, -5, 13, 43, 0, 20, 22, -12, 27, 16, -15, 15, 51, 10, 22, -4, -33, 26, -8, 127, -13, -1, -37, -47, 1, -7, 5, 3, 7, -9, 34, 49, 42, 4, 32, -26, -17, -4, -12, 23, 55, 4, 7, 14, 8, -11, 0, 2, -59, 12, -19, -72, -21, -16, -21, -18, 82, -50, 33, -46, 12, -38, 29, 42, 5, -103, 14, -119, 53, 56, -64, -3, -23, -17, 28, -63, 71, -55, -32, -77, 19, -71, -55, 64, 6, 74, 81, -17, -17, -85, -93, -22, -127, -104, -30, 81, 36, -79, 7, 40, -34, -3, 7, 36, 38, -44, 16, -48, 32, 46, -19, 66, -57, -48, -39, -11, -82, -23, -15, -35, -74, 66, 36, 50, 0, 45, 75, 32, -63, -39, -31, 93, 83, -29, -34, 27, 54, 41, -26, 84, 6, 19, -25, -9, -16, -9, -28, 42, 84, 8, 60, 1, 15, -30, -27, 40, 3, -25, -33, -20, -15, 21, 51, 46, 6, -25, 44, -24, -10, -25, 52, 41, 14, -59, 62, -27, 6, -17, 2, 44, 47, -9, 18, 16, 15, -5, -40, 8, -13, 127, -83, 6, -57, -4, 6, 6, -31, -13, 16, -56, 24, -79, 7, 61, -2, -10, 5, -42, 9, -71, -30, -8, -6, 12, -6, 19, 15, -40, -32, -22, -41, -89, 16, 22, -2, -24, -46, 74, -26, -11, 41, 32, 57, -19, 5, 3, -68, 67, -56, -85, 8, -11, -127, 77, -15, -15, 77, -25, 50, 20, 29, -74, -22, 31, 18, -42, -71, 8, -20, 3, 9, 83, -56, -10, -1, 44, -5, -51, -18, 68, 25, -28, -5, 65, 24, 32, -48, -55, 5, -20, 10, -5, 27, -55, 15, 43, 20, 16, -25, 16, 114, -41, 24, 12, 22, 50, 4, -2, 0, -19, -61, 5, -14, -43, -42, -35, -27, -47, 10, 25, 4, 127, -19, -36, -69, 31, 71, 4, -46, -42, -48, 43, 33, 46, -14, 88, -100, -49, 24, 15, 29, -26, -2, 73, -56, -84, -28, 10, 57, 43, 19, -16, -29, 34, 50, 12, -82, -11, 42, -9, 58, 28, -68, 15, 26, 9, -8, -20, -70, -32, -63, -85, -23, -37, -87, 36, -76, -8, -21, 38, 69, -18, -30, 18, 40, -40, 26, 2, -5, -7, -6, 9, -9, -82, -10, 16, 17, -3, 34, -43, 57, 97, 12, 50, 81, 9, 44, -4, -40, 6, -23, -27, 8, 40, -15, 31, -38, -1, 12, -49, -16, -39, 19, 50, -13, -43, 74, -29, 45, 46, -36, -35, -76, -20, 12, 10, 19, -127, 20, 30, 84, -1, 123, 40, 78, 13, 57, -59, -29, 45, 6, -18, 11, 32, 23, -3, -17, 50, -14, 54, 25, -28, -18, -16, 95, 46, 58, 26, -48, -68, 8, -3, 29, 70, 41, -37, 27, 18, -50, 12, 86, -10, 23, 20, -57, -4, 25, -60, 24, 2, 6, 43, -10, -3, 5, 45, -16, 27, 33, 21, 2, -42, 31, -39, -12, 20, 9, 33, -23, 0, 38, 49, 64, 8, -35, -21, -67, -47, 8, -30, 14, 1, 20, 43, 6, -53, 20, 19, 19, -27, -10, -22, 24, 127, 3, 14, -7, 27, -2, 58, 42, -5, -7, -27, 46, -12, 32, -29, 45, -97, -46, -45, -11, -80, -35, -5, 16, -35, -102, 19, 52, 5, 18, 37, 2, 15, 54, -22, -16, -20, -77, 43, -34, -71, 34, 47, -9, -5, -11, 71, 9, 20, -1, -100, 4, 16, 30, -83, -32, -61, 45, 15, -127, -43, -26, 32, -88, 106, -33, 80, 13, 28, -24, 5, -45, -88, -2, 13, 20, 35, 29, -34, -11, 67, 20, 92, -26, -23, -26, -5, 42, 19, -33, 44, -18, -31, 16, -27, 37, 61, -52, -1, -1, 41, -28, -3, 50, -38, -49, -20, 85, 19, 64, -57, -47, 9, -91, -73, 6, 39, 92, 73, 15, 23, -36, 26, 17, 13, -10, -24, -42, -39, -8, -71, 32, 45, 29, -34, -107, -36, 30, 14, 15, -29, -20, 11, -2, -4, 15, -68, 42, -7, 80, 23, 57, 50, 0, -51, -1, -43, 32, 24, 17, 121, 30, 4, -30, 8, 72, -21, -8, 11, 20, 50, 35, -127, -63, 0, -12, -53, 24, 96, 47, 97, -13, -20, 37, -49, 23, -66, -40, 0, 63, -73, -82, -29, -22, 31, -60, 6, -5, -2, 38, -1, 50, 60, 47, -21, 61, 21, -2, -47, -45, 49, 6, -18, -45, 32, 4, -5, 45, -48, 71, -28, -84, -16, -72, 14, 54, -51, 3, -59, -127, -14, 122, 25, -9, 41, 13, -28, -6, -49, 6, -55, -56, -94, 14, 6, -41, -103, -19, 6, -95, -7, 89, 13, 32, 0, 22, -71, -25, 32, -5, -62, 17, 4, 11, -33, -57, 32, 58, 20, 1, -4, 57, 3, -32, 18, 40, 12, -5, -107, -59, 53, 30, -27, -5, -72, -29, 19, -36, -7, -82, 42, 11, -33, -32, 47, 57, 0, 31, 8, 26, -20, -44, -23, -127, 18, -46, 40, -55, -53, -70, -52, -42, -126, 61, -34, -33, 24, 11, -20, 6, 36, -4, -58, 29, -73, -24, 117, -59, -57, 29, -19, -34, -25, -8, -116, 21, -32, -26, 16, -34, -60, -70, 14, -29, 30, 20, 9, -37, 68, 4, -28, 44, -44, 42, -81, 39, 2, 0, -43, 26, 14, -13, 5, -21, -14, -44, 9, 26, -17, 23, 35, 35, 12, -38, 9, 25, 6, 22, -35, -16, -5, 24, -44, -18, 11, 6, -7, -11, -127, -29, 4, 13, -28, -20, 26, -47, 26, -12, 53, -3, -21, -2, 45, 98, 25, -1, -10, 5, -60, 30, 32, 5, -26, -13, -64, 3, -8, -56, -7, -71, -103, 4, -45, 37, 2, 47, 34, 75, 110, -8, -56, 14, -35, -60, -20, -17, 47, 13, 44, -35, 5, 4, 89, 39, 76, -4, -26, 14, -14, 85, 33, 76, 54, -9, -64, -16, 20, -55, -35, -53, -48, 26, 40, 15, 38, -5, -4, 6, -69, -11, -25, 40, 35, -32, -4, -19, -75, -85, 127, -74, -75, -35, 26, 91, -49, 4, -78, -34, -3, -71, -1, -45, 38, 8, 102, -8, 39, -116, 14, 43, 16, 8, 11, 26, 2, -2, -2, 8, 89, 93, -26, 86, -42, -41, 34, -67, 10, 11, 53, 72, 73, -49, -11, -3, -2, 36, 1, -71, -63, 127, 32, -14, 4, -95, -54, 51, 53, -43, 20, -67, 97, -8, -42, -66, -2, 21, -43, 9, -22, 13, -95, -60, -23, 13, 10, -19, 29, -64, 3, 14, 81, -81, -53, 75, 35, -14, -73, 56, 127, -9, -31, -58, -9, 38, 3, -19, -93, -19, 82, -23, 64, -34, -42, 21, -30, 0, -13, -2, -41, -65, -39, -13, 23, 7, -20, -2, 23, -11, 18, -33, -1, 82, -2, 41, 13, 9, -45, -18, -22, 7, 10, 21, -18, 8, 37, 44, 23, -51, 1, 64, -46, 78, -13, 60, 16, -11, -8, 34, -20, 10, -25, 44, 41, -23, -30, 3, 27, 12, -23, 25, 31, -127, 0, 13, 28, 70, -3, -5, -71, 61, 45, -44, 25, -103, -29, -10, 46, 23, -7, -17, -82, 9, -33, -19, -19, -103, -6, 51, 35, 48, 127, 77, 47, 7, 20, 21, -66, 24, -38, -31, 41, -14, -57, -26, 17, 5, 23, 25, 68, 19, -104, -2, 57, -51, -50, -50, 8, 4, 35, -126, 12, 36, 44, 22, 17, 29, 6, -18, 31, 80, 37, 42, -81, 43, 59, 15, 44, -39, 57, -3, 32, 124, 69, 0, -19, 0, 48, 28, 26, 57, -10, -9, 4, 9, 30, 28, -99, -19, 1, 31, 5, -5, 24, 17, 58, -19, -26, -3, -7, 65, -62, 8, 13, -6, -19, -32, -18, -36, 21, 34, 84, 8, 49, -61, -2, 28, -7, -32, 13, 0, -63, -40, -11, 2, 0, 53, -21, 39, -19, -32, -82, 24, 28, 39, -24, -55, -21, -6, -2, -93, 1, 23, 11, 25, 53, 15, -36, -25, 41, -54, 4, 8, -49, 7, 59, 31, 12, 55, -69, -93, 8, -127, 64, 26, 120, -10, 14, -36, 49, -55, 7, -75, -4, 42, 89, 45, 48, -6, 42, -57, -14, 19, 14, 14, -76, 70, 50, 29, -36, 42, 95, 51, -45, 24, -122, -3, -21, 36, 59, 58, -53, -81, 16, 20, 52, -42, 34, -69, 85, -9, -127, 27, 7, 109, -12, -26, 77, 32, 55, 51, 62, -9, -17, -60, -19, -111, -34, -20, 14, -11, 0, -27, -17, -7, 14, -127, 94, 24, -20, 24, 10, -57, 21, 27, 21, 16, -1, 9, -60, -20, -6, 20, 39, 3, -22, 127, -43, 17, 0, 85, -61, -20, -10, 24, 21, -19, -26, 3, 14, 2, 14, 25, 57, 45, -55, -7, 12, 57, -18, -25, 34, 31, 8, -33, 70, -24, -10, 4, 28, -7, 8, -19, 16, 30, -17, 13, -49, -2, -3, 32, 42, 23, -83, 5, -9, -49, 13, 22, 1, 22, -35, 26, 12, 4, 29, 17, 30, -35, -66, 14, 37, -45, 80, 33, -84, -35, 27, -54, -87, 30, 20, 81, 19, 26, 71, -28, 25, -50, -35, 28, -83, 3, -60, 21, 7, 97, 12, -14, -8, 72, -63, 47, -50, 14, -98, 45, 20, 33, 22, -58, -46, 39, -15, -50, -19, 23, -13, 22, -56, -31, -25, 60, 9, -2, 21, -15, -79, 31, 62, 22, -34, -45, -33, -79, 29, 8, -29, 59, 29, 127, 25, -4, -76, -4, 42, 45, -39, 29, 27, 23, -26, 59, 2, 8, 42, -40, 1, 36, -22, -10, 17, 20, 89, -25, 85, 2, 44, 12, 91, 104, -124, 6, 48, 15, 52, -8, 92, -9, 34, -4, 16, -90, 58, 12, -73, 30, -25, 7, 49, 68, 70, 7, -45, 12, 89, 53, -35, 8, -24, -4, 44, 7, 34, -120, 22, 71, -8, 24, -86, 18, 45, -92, 28, 18, 36, 54, 4, -74, -76, -3, -58, -127, 46, 6, -24, 12, 11, 47, 60, -11, -46, 10, -31, 78, -3, 13, -7, 31, -3, -13, 96, 75, -38, 13, -11, -36, 26, 60, 50, -27, 13, -88, -7, 28, 27, -42, 20, 28, 127, -43, -19, 11, 6, 53, -11, -24, 23, 16, -46, 21, -84, 11, 46, -4, -28, -1, 8, 5, 48, 54, -25, 18, 14, -103, -8, 36, -61, 41, -30, 17, -8, 44, -42, 58, 2, 19, -26, 30, 3, -61, 62, 52, 13, -9, 2, -25, 8, -10, 19, 17, -2, 26, 10, -120, -35, -88, -35, 68, -24, 30, -59, -19, -34, 73, -79, 25, -17, -38, 22, -11, 20, -74, -82, -34, 27, -16, 15, -1, 49, -64, 112, 21, -2, 11, -11, -33, -48, 69, -44, 0, -7, 15, -95, -40, 1, -17, 7, -19, 74, -35, -36, 24, -2, -127, 24, 96, -16, -14, -61, 39, 12, -48, 26, 86, 59, 14, 86, 21, -52, 52, 48, 14, 53, 16, 45, 2, -11, -103, -70, -75, 55, 0, 27, -35, 7, 25, -2, -4, -11, -18, 19, 16, -53, -26, 23, -61, -69, -7, -43, -40, -13, -59, 48, -1, -21, 10, 47, 37, 32, -56, -16, 3, 7, 35, 42, -23, -3, -42, 5, -34, 70, 30, -45, 67, -12, 84, 50, 77, -46, 0, -34, -20, -2, -14, 14, -16, 2, -4, 20, -69, 30, -57, 78, 39, -33, 37, 10, 47, 44, 35, -52, 38, 62, 53, 3, 17, -1, 51, -8, 17, 49, 127, -49, -80, -63, 51, -34, -22, 64, 7, 45, -18, -127, 33, 12, -17, -62, -71, 43, 7, 26, -33, 14, -73, 11, 18, 59, 19, -89, -98, 43, -8, -12, 82, -28, -38, -37, -75, 11, 72, -56, -6, -92, 98, 27, 6, 118, 58, -7, -43, -24, -108, -33, -31, 28, -42, -19, 33, 9, -32, -44, 26, 6, -59, 12, 120, -29, 56, 12, -17, -14, 107, 87, 52, 12, -38, -16, 47, 12, -7, -44, 97, 0, 16, -45, -40, 19, 49, 37, -14, 15, 15, -45, 15, 26, -13, -27, -59, 11, 38, 45, 13, 36, 13, 45, 22, 8, 127, -44, 26, -36, 15, 34, 30, -26, 40, 32, -104, 78, -22, -32, 17, 73, -51, -9, -2, -14, -24, -9, -4, 26, 12, -11, 33, 46, 1, 7, -55, -19, 28, 54, -19, -12, 27, 32, -9, -6, -25, 70, -49, 66, -58, -60, -10, 15, -52, -13, 17, -82, 19, 14, 21, 30, 2, -32, -79, -1, 74, -45, 53, -26, -91, 3, -9, 12, -31, -45, -88, 61, 19, -8, 0, -42, 12, -9, 1, -64, -35, -8, -20, 85, 127, -17, -14, 64, -19, 16, -73, -20, 20, 13, 23, -17, 1, 25, 3, 0, 26, 37, -60, 27, 36, -34, -36, -14, 72, -20, -9, 73, 56, -38, -15, -18, -6, -17, 10, 106, -5, -61, -3, 19, 34, -16, -27, -15, 26, 52, -52, -18, 49, 66, -5, 16, -4, -37, 17, -19, -8, -11, -32, 5, 49, -17, -36, -1, 31, -81, 10, -12, -67, 51, -11, -14, 22, 15, -24, -34, -5, 37, -38, -65, -31, -9, -11, 12, 15, 35, -9, 29, 58, 42, 17, -33, -57, 44, 17, 19, 19, -16, 7, -19, 20, -6, -11, 2, -3, 0, 6, 4, 37, 3, -37, -13, 7, -4, 14, 12, 79, 3, -23, -9, 8, -28, 0, -14, 127, -13, -15, -102, -48, -9, 10, 32, 1, -48, -17, -24, 11, -25, -24, -7, 14, 97, -24, 19, -48, -5, 46, 17, 11, 52, 33, -22, -7, -14, -26, -29, -12, 3, -10, 47, 12, -6, -21, 15, -29, 12, 7, 3, 32, -44, -42, -2, -31, 23, -37, 17, -20, 49, -4, 32, -7, 9, -21, 32, -12, -32, -16, 40, -12, 6, 13, 14, 6, -31, -3, 0, 11, 17, 10, -7, -127, -43, -15, -7, 2, -23, -22, -26, 34, 44, -13, 14, 42, 8, -7, -127, 19, 7, 11, -105, -24, -37, 32, 17, 63, 3, 2, 11, 21, 49, 10, -22, -9, -5, -7, -17, -6, 7, -21, 9, -7, 45, -39, 29, 40, 19, -28, 8, 38, 20, 26, -34, 30, 42, 20, 19, 2, -46, -6, 23, 27, -20, -11, -25, 6, 26, 25, 19, 9, 19, 41, 43, -6, -27, -9, 46, -9, -18, -7, 86, -8, 7, -39, -1, 13, 40, -28, -24, 30, 6, 71, 9, 71, -88, -10, 21, -23, -10, 4, 4, -42, -39, -31, 79, 49, 63, -58, 40, 40, -42, -81, -63, -61, 36, -88, -94, 89, -46, 35, 52, 8, 8, 59, -42, 115, -89, -81, -82, -64, 53, -30, -49, -75, 2, -49, -20, -21, 21, 56, 59, -13, -51, -19, -23, -4, -10, 32, -65, -22, 71, -73, 0, 0, -23, 127, -76, -16, -26, -44, -4, -22, -73, -7, -17, -72, -33, 35, -64, -68, 3, 17, 12, -16, -1, -3, -6, 3, -9, -18, -105, 45, -19, 6, 10, 24, 30, -34, 29, -26, -24, 37, -5, 24, 17, -48, 11, 9, 35, -30, -23, 26, 14, 23, 3, -5, 37, 27, -35, 36, -20, 13, -9, 0, -46, 4, 6, -43, 12, -5, -6, 37, -6, -11, 52, 26, 11, -22, -21, -16, -16, 25, -8, 10, 4, 10, -26, 17, 38, -26, -127, 19, 16, 2, -4, -18, -89, -7, 14, -47, 9, 3, 17, -45, -13, -78, -1, -7, -31, 11, -41, 19, -10, -38, -1, -120, -13, 4, 52, -12, 54, 40, -1, 3, 52, 92, -21, 61, -26, -21, -32, 14, -78, -62, -9, 1, 38, -4, 28, 3, -49, -6, 78, 35, -74, -83, 127, -101, 19, -99, -6, 26, 11, -13, -18, -24, 66, -4, -15, 1, -68, 26, 29, 3, 11, -58, 14, -58, 22, -13, 72, 99, -10, -34, 3, -97, 10, 67, 61, 39, -1, -24, -56, 14, -38, -76, 42, 17, 0, 3, -53, -24, 16, 0, -100, 105, -12, 59, 39, -115, -22, -22, -16, -5, -75, 3, -90, 14, -27, 25, 104, -4, -30, 90, -22, -44, 15, 105, 18, 3, -64, -20, 91, 86, 20, -5, 50, 6, 49, 1, -48, 7, 54, 127, -52, 26, 93, -3, 77, -73, 22, -36, 19, -8, 99, 24, 88, 8, 21, 68, -14, -52, -104, 57, -25, -9, 64, -72, -75, 97, 32, 18, 28, 111, 33, 3, -71, -22, 17, 11, -24, -51, -19, 61, -79, 108, -5, -8, 35, 75, -87, -49, -38, -4, -16, -6, -26, 29, 1, 80, 127, 42, 14, 22, -54, -4, 54, 73, -57, 95, 103, 29, -8, -43, 48, -66, -20, -47, 84, 19, 9, -21, 22, 92, -12, -33, 29, -10, 6, 112, -23, 91, -20, -10, 7, -70, 9, -25, -55, 17, 7, 126, -103, 38, -26, 21, 20, 30, -8, 18, -37, -54, 98, -70, -17, -13, -17, -40, -62, 82, -21, 24, -63, 85, -4, 20, -15, -47, -13, 21, -22, 5, -27, 45, -15, 80, 13, 0, -98, -40, 3, -64, 43, -105, -27, 30, -49, -26, 25, 28, 27, -23, -22, -58, 102, 61, 48, 25, 0, -61, 5, -8, -6, -127, -101, 22, 65, -31, -23, -58, 26, 36, 35, -40, -32, 34, -13, -44, -6, 56, 17, -33, -120, 70, -47, 14, 117, -20, -48, 96, 38, -57, -30, -45, -33, 1, -2, -41, 47, 4, -16, 7, 9, 11, -32, 25, -31, 8, -19, -25, 24, -13, -5, -4, -1, 0, 16, 0, -14, 24, -20, 12, 11, -24, 23, -14, -6, -4, -30, 19, -9, 1, 2, 7, -42, 11, 42, -2, -32, 10, -3, -45, -7, -33, -42, -12, -3, 7, 20, -38, -28, 7, -9, 6, -21, 8, 26, 18, 38, -17, 0, 127, -13, -7, 10, -12, 6, -11, -1, -11, -5, 30, -20, -81, -19, -89, 5, 47, -4, 7, -59, -46, -50, -29, -13, 25, 41, -3, 52, -33, 54, -41, -54, 12, 65, 39, -51, -42, -2, 65, 29, 96, 11, 6, 46, -73, -5, -28, -23, 20, -31, 5, -113, -58, 92, -86, -24, -26, 11, -33, 16, 40, -52, -11, -8, 36, -46, 59, 63, 95, -76, -9, 8, 31, 20, 13, 48, -10, -20, -127, 40, 11, -9, 38, 13, -26, -15, -79, -60, -43, 66, -52, 7, -127, -23, -73, 122, 4, -2, -13, 42, -52, -58, -60, -21, -13, -70, -116, -57, 18, 24, -62, -8, 6, -14, 55, -17, -11, -67, 91, -24, -45, -24, -15, 12, 99, -40, 0, 7, 86, 21, 13, -31, -35, 71, 22, 7, 28, 113, -10, 55, -69, 55, -24, -112, -65, 59, -58, -6, 66, -15, -50, 99, -54, 3, 7, -6, -10, -40, -31, -64, -32, 12, 0, 107, 4, 89, -105, 7, 114, 43, -88, 21, 32, 25, -68, -69, -21, 28, -14, 81, -54, -31, -92, 5, 42, -45, 78, 64, -17, -28, 33, -13, -7, -3, -22, -2, 9, -27, 127, 94, -18, -12, -5, -56, -39, 105, -15, 89, 39, 10, 43, -50, -18, 26, 47, 63, 62, 0, 40, -19, -29, 99, 29, 19, 82, -12, -11, 19, -59, -9, 21, -10, 30, 42, 78, -48, 4, 52, 26, -23, -67, -32, -31, -19, -5, -37, 17, -26, -54, 47, -7, 8, 41, 51, 21, 34, -23, 48, -25, 27, 3, -84, 63, -49, -60, 57, -61, 44, -8, -17, -56, -3, -1, -19, 20, -45, 14, 42, 82, 45, -16, -4, 34, -58, 38, -9, -27, 47, 0, 119, -24, 9, -28, 62, -38, 37, -32, -24, 83, 37, 76, -63, -38, 124, 22, -5, 1, -33, 46, -31, -1, 59, -34, 58, -2, -52, -89, -90, -13, 3, -127, -61, 7, 28, 91, -23, -34, -76, -60, -29, 22, 66, 15, -21, 2, -53, 40, 35, -32, -106, -37, -14, 24, 10, -10, -37, -33, 33, -38, -51, 37, 15, 42, 5, 35, -60, 23, -39, 17, -26, 16, -5, -31, 40, 1, 52, 29, -53, 56, -11, -2, -1, -35, 48, 17, -5, -25, 14, 1, 40, -30, -127, -14, -4, 9, 1, -28, 15, -10, 6, -33, 16, 76, 65, 17, -9, 57, 42, 66, -33, -23, 84, 32, 9, -19, -63, 45, 25, -35, 21, -2, 60, 0, -30, 44, -104, -77, -24, 54, -82, -42, 37, 37, 24, -64, -37, 60, 64, 13, -81, -20, 41, -58, 44, 7, 34, -15, -10, 67, 39, -31, 43, 64, 61, 16, 2, -62, 90, -18, 4, -17, 14, 33, 105, 14, 33, -127, 26, 41, 41, -35, 95, -18, -47, -49, 7, -39, -30, 58, -86, -43, -60, 17, -85, -36, -5, -21, 49, -65, 9, -51, 43, 38, 46, -3, -73, 61, -32, 82, -68, 36, 46, 46, 52, -29, -36, 23, -14, -37, 55, -57, 25, 41, -25, 98, -20, -14, -1, 64, -79, -18, 61, 53, -77, 83, 97, 22, 19, -13, 44, 87, 17, 24, -50, -88, -20, 12, 4, -36, 25, 10, -12, 71, 68, 6, 36, 51, 19, 43, -35, 4, 2, 63, 8, -12, -44, -38, 53, -4, -46, 67, -27, -28, -6, -57, -3, -81, -38, 69, -61, -51, 5, 32, 34, -127, 18, -33, -8, 65, 31, -1, 33, -16, -10, 13, 48, 11, 7, 12, -33, -35, 33, 22, 3, 15, -50, -18, -7, -50, -17, 52, 25, 39, -9, 4, -54, 71, -4, 15, -11, -52, 38, 4, 4, 8, -19, -11, -11, 31, 3, 35, -45, 29, 1, -49, -31, -16, 18, -14, 43, 0, -28, 127, 10, 33, 17, -36, 46, -36, 42, 15, 50, -33, 13, 24, 12, -26, 8, 34, -88, -9, 28, -31, -2, -1, -82, 22, 10, -18, 48, 3, 28, 36, 40, 10, -127, -9, -53, 10, -54, -13, 4, 69, 22, 3, 2, 1, 31, -7, -35, -26, 32, -12, 5, -45, -9, -83, -26, 18, 23, -21, 10, -6, 12, -23, 33, -56, 9, 6, -46, -18, 19, -2, 8, 18, 23, -29, -7, -4, -38, -56, -48, 21, 37, -5, 18, 24, -44, -12, -34, 8, -82, -47, -4, -45, 5, 8, 1, 38, 23, -12, 14, -2, 24, 15, 89, -4, -18, 17, -12, -72, 38, 26, 79, -60, -2, 3, 33, 8, -12, -101, -7, -33, 127, 57, 26, -16, 45, -64, -35, -22, -17, 2, 76, 13, 35, -1, -6, 6, 94, 103, 64, 87, -36, 30, -73, -65, -28, 3, -39, -78, -14, -95, 119, 17, -78, 47, 3, 86, 18, -43, -29, 17, 27, 82, -48, 65, 15, -16, 47, 13, -2, -6, -12, -23, 22, -46, -9, 5, -40, -6, -30, 42, 14, -37, -14, -61, 10, -48, -7, 11, -62, 24, 127, -29, -64, -23, -7, 19, 22, 26, -18, 18, -18, -18, -23, 24, 19, 7, 39, -28, 26, -14, -5, -5, 7, -80, 13, 0, 17, -32, 2, 3, 29, -10, 22, -32, -9, -16, -18, -48, 1, -1, 13, 0, 13, -2, 22, 17, -39, -13, -15, -56, -21, 17, -35, 13, -2, 14, 12, 14, -7, -7, -12, 0, -10, 6, -9, 16, 20, 25, -8, -31, 53, 12, 30, -9, 13, 20, -38, -16, -58, -21, 13, -13, 5, 4, 8, 11, -29, 6, -28, -6, -49, -12, 13, 13, -14, -44, 28, 19, -11, 17, 0, 28, 7, 45, -1, 21, -41, -36, -47, -23, 9, -26, 7, -11, 14, -19, -18, 12, 11, 33, -31, -11, 127, 15, -19, -31, 11, 8, 10, -21, -18, 33, 1, -18, -21, 36, -41, 5, -30, 31, 11, 16, 14, -34, 25, -13, 10, 16, 26, -9, 9, 102, -2, -19, 3, 5, -26, -9, 15, -127, -117, 3, 34, -17, 63, 18, -55, 13, 43, 83, -38, 68, -3, 61, 62, -22, 42, -28, 27, -4, -62, -25, -38, -4, -91, -33, 39, 14, 109, 40, -73, -16, -45, 25, 32, -67, 18, -65, -11, 100, -35, 22, 70, 2, -57, -35, -52, 7, 33, 13, 9, -33, 87, 96, 75, 41, 90, -31, -29, -23, 53, 21, -28, -83, -33, -30, 40, 9, 53, -37, 44, 9, 30, 4, -60, 30, 7, 12, 45, 105, 26, 17, 18, -23, -44, 25, 11, 85, 26, 72, 41, -12, -6, -21, 17, -1, 127, 68, -64, -14, 65, 71, 6, 21, -80, -16, -36, 47, 4, 34, 15, -26, -8, 16, -18, 26, 40, 36, -3, -22, 40, 14, 17, 47, 1, 48, 22, -4, 22, -102, 10, 69, 36, 26, 71, -10, -3, 74, -41, 68, -24, -3, 45, 2, -52, -54, -108, 1, -4, 47, 68, -5, 15, -48, 3, 16, 42, -118, -53, 85, 39, 24, -87, -3, 40, -1, -46, -70, 22, -20, 31, -33, 1, 10, -27, -22, 75, 7, -4, 25, 12, -72, -43, 16, 12, -41, -18, 23, 30, 20, 25, -28, 40, 34, 27, 26, 31, -24, 2, 22, 18, 12, -7, -13, 1, -11, -22, 48, -16, 69, 51, 25, 2, -36, -31, -38, 25, 45, -127, 17, 0, -34, -12, -47, -39, 42, -1, 45, -19, -31, -7, -28, 16, 5, 21, -28, -57, 101, -30, -48, 20, 35, 23, -4, -16, -14, -53, 5, 30, 2, 19, -23, 0, 46, -40, -11, 57, 54, -24, 15, -79, -30, -50, 5, -22, -34, -38, -6, 72, -5, 18, 17, -31, -7, 36, -19, -76, 42, 21, -13, -24, 87, -127, 3, 12, -74, 7, 25, 51, -2, -34, -13, -32, 25, 74, 31, 11, 16, -50, 61, -6, -3, 13, 103, 57, 4, 2, 39, 51, 33, 24, 20, 53, -18, -47, 20, 37, -13, 44, -15, 21, 41, -18, -94, -46, -7, -11, -11, -52, -1, -24, -127, 63, 41, 8, -47, 16, 19, 1, 3, -25, -26, -60, -43, 11, 5, -38, 19, -47, -5, 22, -15, -2, -16, 5, -14, 56, 20, -2, -37, -7, -2, 66, -21, -9, -3, 25, 15, -17, -77, 8, -18, 28, 43, 31, -87, -56, 41, 126, 17, 12, 33, 28, 3, -2, 7, -35, -16, 59, -7, 2, 30, 14, 9, 17, 21, 64, 44, 5, -26, 25, -9, -27, -8, 28, -13, -8, 1, 6, -30, 22, 42, 9, 24, -43, 21, 51, 4, 14, -22, 24, 29, -4, 4, -1, 28, 12, -37, 34, -41, 8, 30, -12, -17, -46, -26, -55, 3, 19, -6, 77, 35, 23, 27, -1, -25, -1, 33, -12, 36, -5, -2, -19, 29, -27, 105, -5, 1, 127, -20, -23, -33, -23, 17, -19, -94, -39, 13, 36, -44, -40, -28, 1, 22, 9, 26, 1, 80, -5, 44, 35, -32, -82, 1, -22, 9, 13, -14, -51, -33, -40, -40, -67, -23, -1, 8, 4, 40, 0, 66, -26, -12, 50, -11, -79, -53, 41, -21, 22, 5, 31, -60, -24, -2, 105, -6, 55, -72, -74, -70, -26, 15, 19, -34, 68, 55, 1, -39, -24, -127, 62, 21, 76, -6, -95, 21, -3, -7, -103, 33, 16, -36, -10, 31, 35, 30, -18, 38, 2, -1, 18, -60, 72, -5, -16, -65, -7, -2, 10, -43, 7, 7, -12, 28, 42, -15, 86, -6, 2, 3, 12, 72, 8, -1, 39, 6, -3, 45, -14, -9, 21, 7, -20, -35, -1, 7, -43, -11, -25, -9, -2, 25, -23, 11, -28, 3, -3, -10, -1, -12, -51, -31, 7, 55, 25, -44, -17, 7, -53, 16, 78, -6, -12, -33, 33, 13, -25, -11, 127, -3, 26, 30, 6, -18, 20, 76, -43, 37, 13, 1, 18, -3, 39, -62, -13, -15, 29, -34, 4, -70, 66, 123, -47, 8, 32, 3, -90, -21, -2, 1, 89, 2, 27, -9, -76, 12, 26, 37, -6, -13, 26, -7, 49, -127, -24, -8, 11, 26, 4, -24, 38, 50, 37, -21, -5, 24, 19, -77, -48, 3, -16, 27, 55, -6, -35, -9, -6, 12, -6, -30, 64, 17, -15, -77, -55, 26, -3, 44, 18, 4, 29, -38, 16, -3, 15, 20, -13, 28, 6, -44, 18, -10, 0, 35, 92, -16, 3, -4, 71, 1, 31, -9, -127, -72, -48, 32, -10, -31, 28, -6, 39, -54, 18, 62, 27, -39, -9, -6, 81, 29, 1, -19, -35, -91, -2, -4, -20, -18, -30, 32, -1, 11, 17, -47, 13, -34, 32, -4, -3, 11, 0, 8, 42, -38, 18, 15, 6, -39, -59, -106, 92, 33, 42, 29, -53, -99, -35, -18, -7, -34, -63, -14, -5, 25, 25, 22, 19, -75, 11, -2, 35, -5, 21, -16, -24, 2, 80, 55, -17, 45, -2, 4, -16, -5, 29, 58, -42, -34, -35, -74, -36, 96, 47, 3, 0, -9, 10, -85, -114, -40, -40, -55, -127, 20, -42, 8, 73, -4, 95, 25, -37, -2, 22, 54, 26, -55, -91, 0, 53, 11, -45, 26, 65, 27, -6, -24, -27, 38, 13, -16, -15, 64, 49, -34, 72, -65, -75, -33, 7, -33, 32, 56, -58, 10, -101, 76, 21, -23, -41, 16, 3, -5, -44, -14, -5, 34, -11, -48, 14, 31, 62, 16, -1, -9, 53, 13, -19, 28, 61, 9, -3, 127, 56, 26, -12, 46, -76, 3, -2, -8, -56, -6, 18, 5, 2, 21, -22, -23, 4, 27, -41, 22, -9, -21, -10, 84, -7, -2, -36, -48, 75, 10, -80, 20, 0, 41, 49, -51, 28, -4, 11, -3, -47, 32, 20, 45, -40, 72, -28, -36, -11, -22, -1, 26, 6, -31, -26, -11, 8, 32, 36, 108, 49, -21, -43, -35, 2, -27, 85, 66, -21, -39, -4, -52, 6, 33, 35, -37, 0, -10, 47, 113, -15, -10, 8, 18, -127, 44, 18, -30, 60, -27, 29, 29, 51, -37, 52, -23, -49, 54, -8, 5, -5, 44, -119, 52, 46, 11, -82, -64, 32, 4, 16, 46, 60, 43, 3, -24, -28, 78, -55, -37, -5, 45, 4, 104, -18, 41, -56, -85, -57, -41, -1, 15, -15, 17, -21, 9, -26, 23, 4, 12, 19, 54, 28, -15, -8, -54, 1, 26, 46, 41, 97, 18, 28, -44, 21, 65, 28, -18, 4, -14, 35, -25, -24, 5, -15, -11, -3, 3, 64, -5, -15, -47, 50, 80, -3, 22, -30, -22, -44, 91, 23, -8, -41, 1, -73, 17, -15, -8, -104, -40, 26, 13, -61, -21, -32, 46, 58, 66, -3, -65, -88, 63, 15, 22, 10, -14, 78, -44, -17, -2, 29, -16, -10, -12, -8, 28, 22, 21, 102, -9, -127, 29, 19, 81, -23, 31, -41, -9, -2, -18, -84, -39, 42, -10, 62, -60, 43, -17, 15, 0, -43, 31, 56, 34, -40, -18, 28, -59, 16, 20, -2, -49, -6, -1, -23, -23, 6, -71, 12, 51, -3, -50, 26, -14, -6, 9, -14, 51, 59, -62, 29, -14, 3, -38, 49, -16, 23, 14, 54, -31, 47, -6, -28, 127, -39, -25, 35, 20, -26, 4, 26, 6, 34, 18, -39, 15, -13, 3, 15, 17, 8, -19, 4, 28, 14, 49, 38, -2, 39, 26, -13, -69, -90, 8, -41, -27, 3, -23, 22, -37, 52, 83, 30, -14, -72, 85, -65, 47, -8, -60, -34, -29, 2, -78, 14, -66, -3, 8, 17, -26, -21, 39, -1, 13, -48, -25, -62, -20, -13, 8, -51, -50, 67, -39, -42, 73, 32, 49, -44, -75, 29, 76, 10, -14, -32, 15, 35, 17, 17, 33, -28, 40, -13, 26, -8, 40, 115, -9, -21, -10, 127, 53, -38, 78, 16, -40, 37, 61, 13, 3, 14, -22, 1, 19, 104, 35, 41, 124, 1, -60, 25, 127, -55, 31, 26, 6, 82, 22, 5, 38, -82, 28, 25, 21, -48, 6, 60, -2, -31, -48, 60, -39, -9, 20, -43, -85, -17, 18, 7, -61, -16, 32, 101, 97, -81, -55, -119, 54, -42, 87, 74, -30, -9, 21, 28, -27, -96, 57, 41, 20, -100, 34, -30, 119, -11, 0, 57, -45, 67, 16, 29, 58, 31, -58, -91, 66, -86, 1, 33, -3, 73, 94, 52, -2, 14, -33, -74, 17, -7, 38, 41, 10, 40, -13, -99, 12, 42, 41, 127, -35, -41, 53, 49, -62, -25, -51, 12, -91, 7, 35, -13, 90, -48, 21, 36, -54, 2, 42, -117, -90, 43, -16, -31, 20, -8, 26, 39, 49, -20, -54, -30, -54, 80, 29, 68, 13, 69, 29, -17, 27, 60, 53, 31, -69, 64, 12, 43, 27, -20, -9, -74, -93, -61, 23, 89, -42, 34, 19, -33, -6, -15, -3, 29, 45, 13, 7, -5, 49, 10, -34, 9, 79, 34, 0, -32, 30, 2, 39, -25, 127, -70, 20, -27, 17, -6, 11, 92, -69, 41, 24, 5, 18, -8, 41, 11, -11, -28, -7, 8, -56, -4, 49, 51, 24, -11, -27, -117, 56, -107, 17, 10, -47, -27, 15, 8, -22, 10, 12, 18, 28, -22, 5, 13, 68, -7, -13, 71, 32, 2, 4, -27, 8, -36, -20, 12, 30, -22, -34, 23, -32, -49, 61, 5, 6, -127, 49, -76, 5, -23, -6, 44, 32, 68, -19, 10, -35, -39, -60, 38, 3, -27, 29, -2, -27, 41, 67, 51, 12, 46, -91, -32, 23, -83, -26, 14, 29, -45, 39, 68, -69, -6, 50, 30, -28, 11, 97, 39, -67, -17, -33, -101, 53, -8, 36, -2, 5, -33, 73, 20, 18, 56, 35, -23, -11, 61, -9, -12, 49, -85, -61, -111, -38, -85, -49, 64, 73, 52, 18, 54, 31, 91, -30, -20, 4, -25, 8, 12, 18, 55, 6, 3, 1, 12, -12, 18, 5, 19, 30, 46, -6, 76, -32, 20, -15, -29, -18, -37, 12, 18, -25, -29, 14, -8, 20, 52, -14, -60, 33, -17, 20, -79, 44, 14, 71, -1, 9, -44, -48, -11, -16, 25, -13, -64, 46, 51, -29, 51, 50, -13, 5, -29, -47, 8, -25, -38, -13, -26, -26, 0, -20, 16, -4, -8, 25, -18, 127, -16, -9, 11, -16, 23, 8, 51, 14, -42, -73, 19, -51, 72, -62, 46, 21, 34, -11, -15, 96, 7, -39, -22, -28, -80, -17, -93, -29, 27, -19, 97, 107, -79, 42, -65, -3, 86, 87, -127, -27, 9, -47, 51, 6, -102, -75, 18, -42, 7, 10, 59, 36, 14, -1, -14, 68, 47, 11, 47, 40, 3, 41, 74, 110, -21, -34, 4, -18, 19, 92, 12, 29, 7, -17, 90, 15, -64, 34, -23, -36, -11, 85, 52, -52, -24, 3, -8, 4, 58, -21, -11, 21, 35, 74, -10, -35, -3, -87, -51, -74, 3, 19, 29, 2, 66, 20, -1, 12, 12, -10, -1, 23, -11, 13, -18, -11, -5, 27, 26, 19, -46, 17, 65, 33, 40, 4, -16, 122, 9, 40, -54, 14, 9, -23, 0, 4, -48, -64, -24, -46, 35, -44, -34, -29, -40, -18, 11, 18, -36, -127, -16, 1, -21, 84, -40, -86, -45, -5, -26, 21, 15, -88, -16, 63, -69, 68, 10, 93, -127, -110, -9, -23, 26, 87, 81, 107, 33, 8, 49, 33, 39, -28, 31, -37, 34, -3, 80, -53, -18, 23, 0, -49, 31, -17, -10, -20, 85, 8, 100, 15, -69, -5, -26, 81, 7, 67, 48, 48, -74, -64, -47, -76, 45, 2, 10, 45, 22, 6, -30, 39, 114, -27, 121, 4, -48, -45, 34, 35, 111, 63, -98, -43, 108, -36, -104, -61, -52, 85, -78, 22, 14, -89, -4, -17, -80, -37, 5, 48, 127, -3, -26, 34, -17, 73, -30, 28, -23, 15, -115, -106, 15, 71, 2, -57, 24, -17, -9, 13, -2, 37, 36, -34, 8, 19, 32, 11, 80, -87, -43, -38, -9, -18, -2, 10, -5, 73, -8, 53, -14, 50, 10, -51, 23, -12, 5, -30, 32, -56, 49, -101, -80, -76, 18, 26, -25, -39, 15, 33, -55, -29, 85, -32, -39, 2, 25, 43, 4, 7, 43, -2, -38, 4, 7, 2, 13, -58, 29, 17, 1, -17, -16, -6, -19, -15, -53, 30, -15, -10, 11, 56, 0, 29, 23, -29, -37, 52, 1, 20, -72, 18, -49, -24, -8, 33, -26, -40, 4, -7, -69, 71, -11, -15, -41, 12, 21, -42, 17, 12, 21, 68, -36, -26, -28, 20, -14, 55, -55, 24, 30, 34, -6, 40, 5, -10, -10, 0, 22, 2, 24, -127, -44, -11, -10, 15, -34, -59, 23, 9, -21, -22, 9, 101, 8, 3, 127, 31, -34, -9, -22, -12, -20, 2, 14, 13, -32, 26, -26, -8, 46, 15, 2, 27, -42, 41, -24, 4, -8, 0, 48, 8, 31, -2, 23, -12, 34, -44, 4, -6, -8, 8, 3, 14, -3, 19, -12, 32, 16, 7, -44, 83, 27, -86, 23, -28, -42, 28, 12, 26, 13, -7, -67, -27, 10, 2, -2, 17, -30, 18, -107, 8, -4, -4, 16, -22, 21, -3, -33, 19, 20, 4, 22, -92, -19, -20, -59, 0, -13, -34, -94, -12, 30, -12, -19, -30, 79, -39, 82, -20, -3, -58, 127, 97, 17, 40, -4, 29, 37, -16, 20, 48, 24, -12, -30, 8, -35, 16, -94, 9, 21, 0, -28, -1, -12, 30, 38, 66, 23, 34, -86, -59, -6, -120, -13, 71, 9, -2, 44, 14, -40, 127, 45, -46, -42, 54, 19, 7, 65, -48, 73, -5, 1, -10, -47, -30, 17, -65, -15, -38, -29, -50, 4, -45, -10, -88, 11, -33, 13, 17, 36, 28, 52, -1, -34, 45, -16, -12, -21, -18, -9, -3, -73, 10, 73, -6, -68, 42, -59, -82, 95, 127, 33, -5, -42, 26, 21, 36, 24, 38, 45, -27, 35, 55, -9, -5, 34, 6, -16, -11, -14, 45, 43, -66, -1, -11, 12, 11, 34, -10, -39, 1, -59, 4, 47, 30, -37, -26, 16, -14, 19, 1, 33, -37, 40, 37, 19, 5, -72, -11, 85, -24, -26, -16, -7, -80, 5, 32, -20, -23, 20, -87, 18, -66, 74, -69, -2, 37, 41, -17, -46, 91, 39, -7, 112, 49, 82, -18, 8, -5, -33, 11, 118, -39, -76, -23, 58, -9, 74, 65, -37, -4, -26, 45, 13, 40, -96, -42, 30, -34, -39, -11, 127, 88, 87, 26, -8, 3, 25, -14, 93, -89, 8, 99, 40, 15, 23, -30, 45, -48, -4, -20, 47, -25, -41, -20, 119, 60, -99, 116, 72, 45, -45, 14, 5, -106, -39, 72, -23, -55, 2, -16, -35, 6, -35, 13, 47, -11, -6, -55, -33, -71, 12, -6, 13, 20, -47, 37, -89, 3, 127, 28, -6, 34, -55, -70, 52, 34, 1, -29, 69, -2, 61, 65, 39, -38, -37, 59, -26, 9, -18, -60, 54, 40, -43, 21, 41, -64, 13, 30, -8, 42, 0, -37, 17, 30, -11, -46, 0, 84, -13, 111, -6, 44, -23, 46, 19, 21, -59, 9, 78, 35, 51, -13, -53, -17, -3, -19, -13, -1, -3, 6, -42, -46, 43, -46, -17, 21, 18, 12, 49, -9, 35, -49, 37, -20, -127, 13, 1, 27, 15, -35, -79, 50, 18, 66, 11, 19, -19, -28, 56, 36, 1, -58, -28, -49, 100, -44, 24, -45, 14, 59, -2, 16, -35, 14, 62, -17, -51, 27, 52, 11, -10, 1, -29, 50, 2, 9, 19, 0, 33, 29, -72, -31, -24, -3, -24, 54, -12, -19, -10, -29, -20, -50, 18, -29, -127, -16, -61, -4, -79, 38, -23, 20, -52, -13, 19, -12, -6, -10, 10, 27, -3, 4, -24, 2, -21, -47, -10, 9, 64, -19, -16, 37, -1, -17, -9, -8, 23, -3, 24, 23, -28, -20, 40, 54, 33, -84, -10, -5, 5, -13, -11, -42, -43, 43, -59, -4, -42, 2, 15, 1, -99, -1, 5, -22, -3, -53, -22, -10, 50, 12, 41, -2, 25, 7, -53, 43, -63, 70, 46, 71, -12, 22, 21, 1, 35, 30, -25, 22, 57, 20, -22, 9, -1, 92, 13, -66, -15, 19, -23, -24, 28, -46, -8, -13, 33, -4, 15, 33, 38, 62, -33, -14, -9, 11, 0, -18, -68, 48, 61, -2, 4, -1, 14, -13, 31, -4, 25, 84, 6, -57, -13, 53, -30, 14, -127, 40, -45, 25, 10, -43, 17, -11, 1, 23, -6, -16, 19, -4, -65, -57, -39, -19, -11, 10, -48, -23, 8, 8, 26, -47, -31, -56, -127, -11, 36, 6, 18, 23, -18, 65, -98, -37, -47, 23, -12, 54, 95, -23, -20, -10, -6, -21, 91, 41, 33, 11, -26, 12, 3, -35, -8, -13, 20, 87, -77, 88, -28, 20, -12, -29, -28, 42, 39, 49, 40, 15, -38, 50, -9, 26, 50, -22, 0, -54, 26, -11, 94, 1, 2, 83, -39, 8, 65, -63, -72, -66, 19, -41, -8, -16, 9, -35, -18, 14, -29, -44, -83, 54, -26, 73, 22, -29, 27, -3, -35, -64, 63, 32, 24, -55, -127, -16, -37, 54, -7, 18, -25, -34, 23, 1, 4, 1, -5, 9, -28, 48, -57, 17, 1, 23, -28, 46, -19, 4, -33, -55, -10, 3, -26, 22, -5, 0, -53, 49, 55, 10, -20, 3, -3, 9, 22, 9, -66, 60, 2, 7, 35, -5, -57, 8, -28, -2, -5, -29, 13, 7, 92, 27, -5, 73, 6, 45, 45, -41, 1, 20, -3, -9, 9, 20, -16, 3, 54, -12, -14, -99, -16, 11, -27, -45, -24, 12, 16, -59, 127, 69, 77, 45, -14, 124, -60, -13, -40, -23, -5, 43, -18, 4, 60, -107, -52, -49, -41, -63, -52, 44, 56, 11, -106, -10, -67, -57, -40, -31, -4, -31, 58, -64, 24, 38, 25, 69, -82, -85, 40, 61, 59, 83, -104, 81, -50, -8, 15, -6, -8, -68, 11, 43, -3, 81, 99, 29, -27, -14, 77, 95, 91, 23, -31, -60, 57, -105, -5, -92, 29, -19, 28, -30, 32, -26, -83, -69, 28, 1, 18, -110, -61, 70, 48, -17, -64, 111, 2, 9, -20, -54, -62, 63, -5, -39, -62, -66, 15, 79, -3, 25, -64, 19, 7, 30, -16, -30, 40, 7, 21, 55, 19, 6, -26, -80, 25, -79, -44, -66, -24, -28, 37, 74, -1, -66, 127, -3, 25, 24, 12, -44, -49, -15, -40, 13, 26, 41, 68, 4, 43, -57, -84, 107, 22, -88, -20, -95, 1, -1, -35, -2, -13, -60, 9, 33, 10, -1, -55, -111, -23, 50, -25, 18, 85, 127, -24, 17, -60, 68, 2, -91, 30, 2, -29, 81, -24, -61, -12, -123, -5, 22, 86, 27, -78, -22, 46, 33, 15, 3, -44, -11, 18, -114, 8, -36, 65, 85, 25, -9, 13, 0, 67, 30, -39, 71, -14, 28, 32, -14, 56, 16, -22, 19, 14, 67, 35, -15, 15, -70, 17, -6, 27, 29, 41, 38, -8, -58, -89, -34, 84, -46, 51, 41, -26, 16, -15, -35, -21, -92, -13, 34, -9, 41, 63, 66, 17, -42, -16, 36, -69, -36, 2, 21, -3, -46, -50, -36, 14, -52, -19, 0, -4, -39, -6, -21, 41, 37, -58, -11, 34, 5, -7, -62, 54, 15, -4, -41, -29, 21, 27, -19, 18, -10, -19, -22, 6, 7, -25, 74, -15, -66, -25, -34, 53, 103, -44, 25, 77, -127, -22, 15, 35, -60, -3, 50, 32, -96, 23, -92, -43, 7, 8, -31, 36, -77, 7, -28, 67, -85, 62, 22, 37, -68, -10, 3, 44, -22, 18, 10, 5, -20, -57, -9, 42, 70, 12, 20, -22, 41, -2, -7, -37, 104, -56, -14, -60, -41, -2, -30, 54, -28, 18, -16, -51, -13, 0, -48, -26, 35, -18, 72, 34, -55, 50, 127, -45, -65, -21, -123, -12, 48, -45, 5, -15, 83, -15, -15, -22, -75, -27, -92, -31, -23, -45, -22, -13, -5, -48, -2, 17, -23, 7, 73, 29, 9, 25, 15, -24, 7, -75, -52, 19, 3, 18, 37, -2, 36, 8, 94, 3, 51, -104, 55, 27, -49, -53, -40, 8, 3, -43, -25, 61, -58, 36, 7, -68, -25, 65, -25, -41, 27, 21, -13, 5, -59, -42, -5, -35, -17, 125, -11, 30, -34, -19, -28, -2, -41, -36, 40, 21, 13, -53, 12, -47, -18, -58, 39, -32, 5, 127, -18, -42, 92, 30, -52, 16, 68, 41, -65, -127, -43, -21, 21, -3, 10, 31, -1, -1, 34, 32, 3, -38, 32, 4, -41, 39, -41, 34, -49, 24, -13, 3, 37, 95, 20, -80, -1, -17, -12, 17, -24, -20, 11, 41, 23, 13, -3, 40, -17, 53, 59, -2, 58, 32, -47, -91, -61, 10, 49, -49, 19, -115, -19, -29, -9, -83, -57, -9, 71, 7, -13, 27, 61, -16, -29, -25, 15, 13, 9, -43, -48, -5, -55, 21, 0, 24, -68, 29, -39, -2, -3, -8, -19, -127, 24, -39, 7, -19, 26, -3, -23, -3, 13, -31, 58, 8, 21, -8, -22, 1, 2, -37, -6, -5, -9, 16, -6, -22, -13, 1, 0, -21, -6, 22, -15, -26, 9, -2, 23, -8, -31, 34, -26, -2, 30, -14, 33, 39, -3, 1, -63, 35, -28, 17, 3, 27, -32, -22, 11, -17, 11, 13, 20, -71, 2, -14, -45, -3, 3, -46, -13, -1, -49, -14, -5, -33, -5, 127, -5, -40, 1, -43, 38, 30, 36, -2, 67, 49, 14, -1, 41, 25, 18, 50, -51, 8, -82, -3, -1, 16, -107, -1, 37, 46, -1, 39, -7, 27, 0, 9, -95, 3, -8, -42, -43, 10, 33, -29, 1, 45, 3, 6, -7, -3, 9, -5, 81, 6, -8, 1, 11, 28, 52, -12, 37, -24, -24, -38, 11, -3, 42, -24, 44, 60, -47, -2, -45, 59, 21, 50, 49, 38, 1, 4, -61, -36, -18, -3, -30, -66, -33, -7, -2, -21, 68, 91, 2, -8, 63, 10, -2, -2, 36, 90, 2, -24, 1, -3, -47, 12, -44, -49, 17, 19, 34, 6, -16, 7, -18, -13, -25, -17, 60, -87, -70, 30, -30, -28, -35, -12, -35, 34, 16, -2, -59, -30, -30, -41, -31, -40, -38, 13, 4, 22, -11, -50, -3, -9, 3, 6, -6, 127, 0, 34, 21, -59, -8, 1, -34, -66, -52, 15, 56, 24, -22, -43, 24, -53, -73, -21, 3, 55, -35, -119, 2, 0, -3, -4, -6, -16, -50, 125, 35, -22, 50, -79, 19, -127, -25, -5, 8, 10, 43, -15, 22, -9, -16, 73, 7, 72, 50, -26, 56, 11, 29, 39, -8, -25, 46, -8, 6, 35, 33, -10, -11, -97, -11, -53, -17, 43, 39, -69, -23, 45, -1, -59, -38, 52, -58, -15, -16, 27, 32, -40, -34, 99, 105, 49, 24, -42, 8, -94, -32, -29, 15, -74, -19, -39, 72, -1, 22, 71, -50, -98, 56, -68, -118, 48, -49, 19, 22, 127, 33, -8, -61, 78, 20, 75, 83, -2, -103, -71, 94, 47, -49, 63, 23, -11, 12, -29, 12, -56, 2, 16, -85, 7, 90, 109, -32, 26, 4, -119, -16, 40, -19, 5, -10, -49, -60, 68, 82, 75, 18, -44, 36, -123, -27, -39, -12, 46, -69, 36, -105, -13, -83, -3, -51, -5, 75, -1, 18, 58, 116, 37, 39, 22, -79, 10, 95, -41, -58, -30, 2, -62, -9, 12, -14, -5, -69, -2, -21, 38, 22, 78, 48, -2, 2, -39, 29, 18, -66, 30, -42, -111, 25, 108, -16, -9, 8, 47, 14, 15, 44, -60, -27, -15, -60, -127, -30, -14, -58, -4, -85, -30, -40, 38, -56, 51, -55, -95, 78, 23, -38, -5, -78, -29, 97, 85, 30, 76, -2, 14, -75, 0, 62, 71, 47, 10, -101, 66, 31, -28, 83, 63, -61, -6, -53, 34, -11, 4, 34, 17, -30, 88, 11, -15, -8, -1, 75, 0, 1, 21, 4, 3, 8, 2, -13, 32, -11, -7, -16, 14, 5, -30, -34, -51, 9, -19, 20, -33, 5, 0, -11, 7, -12, 15, -7, -56, -33, 0, 25, 20, -36, 0, -1, -41, 18, 90, -21, -23, 9, 28, 42, -8, -7, 127, 6, 20, 37, 8, -4, 26, 64, -30, 37, -18, -3, 30, -15, 50, -104, -6, -30, 22, -37, 11, -47, -6, -26, -68, 2, -24, 13, 12, 11, -125, -42, 10, -41, -40, -87, 54, -19, 102, -99, -3, 108, 30, 18, 40, -3, -7, -84, 43, -104, 48, -60, -17, -41, -45, 53, 27, -62, 47, 65, -127, -50, 0, -75, 9, -25, 10, 18, -21, 99, -26, -74, -20, 57, -67, -33, -67, 77, -56, -108, -16, 92, -32, 9, -22, -63, -25, 32, -66, 65, 30, -41, 18, -11, -48, -80, -11, -10, 61, 51, -45, 127, -4, 6, -36, -46, -15, -20, -36, -14, -41, 18, -13, -33, 50, -68, -55, 48, 8, 25, 15, -42, 8, 26, 13, -46, 42, -54, 0, -24, -11, 28, -3, -19, 1, -20, 24, 12, -17, -33, -32, -14, -64, -29, 36, -36, -13, 3, 18, -19, -12, -117, -25, 79, 9, -47, -15, 78, 14, -26, 27, 17, -22, -33, 39, 18, 4, 46, -40, 35, 21, 6, -6, -42, 43, -5, -24, 2, -36, 74, -19, 74, 4, -19, 36, 5, -26, 14, -34, -19, 7, 17, 42, -23, 34, -4, 9, 10, -2, 10, -9, -42, -2, 14, 3, -28, 0, 0, 16, -12, 7, 17, -5, 11, 15, -13, 6, -14, 10, -3, -7, 28, -16, -9, 8, -6, -5, 5, 4, 18, 7, 10, -9, 9, 56, 26, 11, -35, -8, -10, -127, -10, -35, -13, -32, -15, -8, 20, 10, -7, 7, -10, 29, -24, 5, -38, -3, 19, 10, -24, 20, 27, 5, 6, -51, -6, -30, 2, 26, -47, -84, -14, 35, 127, -4, -40, 26, 12, -30, -24, 25, -8, 48, 0, 8, -57, -11, 28, 25, 23, 0, 56, -13, 6, 13, -54, -6, 58, 61, -12, -62, -36, 29, -23, 47, 21, 47, 23, -1, -30, -37, -29, -7, -9, -12, -10, -19, 67, 17, 3, -32, 6, -33, -49, 14, -13, -14, -8, -13, 13, -45, -19, -4, -5, -8, 21, -3, -8, 10, 26, -15, 22, -34, 17, 45, 21, -39, -15, -127, 45, -30, -68, -16, -2, 29, 19, -40, -13, 12, 6, -14, -15, -5, 11, -39, -26, -42, 22, 51, -37, 30, 5, -3, -37, 44, -31, -4, -18, 18, 43, 21, 9, -32, 18, 54, 19, -30, 69, -80, -7, -8, -80, -3, 53, -36, -19, 91, 81, 23, 34, 107, -73, -43, -5, -8, 12, 18, 13, 45, -27, 25, 10, 48, -55, 81, 3, -31, -3, 4, 49, 12, 65, 40, 31, 70, -41, 1, -41, -24, 32, 32, 53, 20, 24, -34, 23, 103, 34, -19, -29, 127, 84, -114, -68, 40, -63, -19, -75, -6, -42, 4, -10, 5, 42, -9, -109, -24, 15, -44, 60, -8, -95, 37, -25, 69, -39, 29, -4, -61, 73, -48, -13, 26, 95, -40, -71, -21, -44, -51, 13, 30, 19, 15, 47, 46, 29, -43, -32, 34, 75, -17, 27, -32, 13, -23, 10, 65, 76, 55, 52, 16, 13, 47, -6, -2, -82, 49, 5, -22, -78, -84, 29, -98, -100, 47, 39, 10, 78, -68, 35, -2, -8, -37, 35, -62, 1, 48, -15, -17, -1, -18, 45, -20, 22, 1, 56, 34, -33, 43, 27, -25, -69, 20, 1, -18, -11, 35, -30, 20, 119, -7, -3, 50, 40, 47, 85, -9, 125, -78, 93, -22, -13, 34, 29, -18, -27, -127, 9, -22, -104, 46, 11, 1, -22, 5, 45, -15, 46, -31, -66, 77, 13, 15, -32, -71, 10, -5, -13, -36, 13, -46, 22, 20, 31, 8, 14, 121, -19, 54, 46, 65, 19, 76, 18, -13, -127, -40, 22, -11, -54, 9, 13, -7, -28, 16, 29, -49, -11, 87, -75, -31, 13, 62, -2, 74, -59, -21, 2, 16, -67, -5, -35, -3, -11, -4, 8, -15, -7, -34, 42, 58, 12, 2, 29, 9, 1, 28, -12, 92, 11, 17, 2, 45, 4, -12, 9, -50, 53, 67, -72, 71, -24, -15, 8, 28, -33, 51, 4, 10, 4, 78, -55, -78, -12, 80, -6, 64, -23, -30, -20, 49, -24, 21, -38, 31, 10, -21, -75, 68, 93, 49, 32, 18, -127, 41, 3, 3, -33, 2, 48, -16, 28, -12, -58, 33, -36, -56, 10, 50, 29, -42, -53, -15, 9, -36, 45, -7, 55, 17, -53, 99, 50, 66, -50, -36, 87, 67, 7, 30, -17, 17, 3, -8, 33, -38, 107, -70, -76, -50, -88, 19, 4, 59, -5, -127, -20, -28, -38, -11, 61, -44, -5, 24, 20, 32, 9, 7, -1, 44, 45, 13, -8, 19, -7, 1, -66, 51, 22, 51, 21, -12, 6, 13, 18, -34, -16, 17, 21, -23, 6, -30, 0, -17, 38, 21, 7, -22, 5, -22, -34, 19, -45, -5, 35, 13, 1, -61, 58, -28, -9, -15, 8, -20, -16, 45, -8, -29, -3, -49, 59, 6, 31, 57, -7, 34, 28, -24, 38, -60, 50, -30, -34, -31, -14, -34, -32, 19, 62, 127, -44, 38, -15, 0, 3, 26, -20, 34, 18, -19, 28, 27, 6, -21, -7, 13, -7, 9, 9, -29, 31, -18, -7, -1, 17, 12, -20, 15, -4, 11, -14, -44, 10, 73, -16, -31, -37, -3, -70, -3, -9, 43, -15, 11, -4, 6, -11, -7, -26, -37, -16, -75, 9, -52, 5, -7, -16, 39, 34, 28, 17, 35, -35, -13, 22, -80, -15, 4, -24, -25, 11, 26, -54, -51, 7, 6, -12, 74, 31, 20, -4, -18, 33, 38, -127, -18, -17, 20, 9, 12, -2, 39, -37, -31, 1, 1, 24, 20, -46, 39, 12, 15, 47, 13, -48, 7, -46, 12, 61, 65, -30, -9, 22, 29, 51, 56, 30, -1, -33, 8, -21, 35, -37, 59, -34, 4, 4, 39, 24, -50, 22, 55, -25, 33, 36, -12, 8, -19, 16, -39, 37, 6, -5, 35, -80, -4, 23, -6, 21, 2, 75, -15, -4, -18, -13, -127, -25, -32, -61, 38, 45, -7, 30, 45, 18, -40, -43, -47, -7, -21, -4, -24, -101, 63, 22, -95, -1, -41, 12, 57, 61, 36, -46, 11, 2, 46, -84, -7, 6, -33, 9, 26, 27, -33, -11, 72, -82, 5, -38, -48, 19, 19, 70, -31, -46, 54, 40, -37, -10, 35, 47, 57, 6, -12, -12, 19, -18, -114, -50, 16, 6, -16, -78, 33, 49, -9, 28, -64, 4, 9, 7, 28, -23, 36, 75, -46, 17, -3, 4, -11, -28, 12, -28, -85, 59, -17, 53, 3, 29, 24, -36, -5, 24, -67, 32, -21, -54, 7, -26, -44, 21, -30, -4, -49, 1, 14, 127, -15, 62, -20, 53, 3, -54, 55, -68, -61, -59, 4, 3, -19, -53, 25, 7, -15, 36, -22, -23, 6, -40, -40, 96, 14, -13, -52, -44, -3, 47, 26, 11, -47, 17, -48, -31, 32, -44, 32, 37, -73, 3, 12, 20, -17, 46, 14, -36, -17, 7, 17, 12, -23, -27, -10, 51, -52, 74, 6, -23, 21, 34, -43, 58, -15, -5, -22, 34, -42, 17, -6, 38, 68, -5, 48, 24, -1, -24, -11, 43, -4, 61, -4, 25, 11, 6, -19, 12, -27, -74, 32, -27, 7, 35, 41, 96, 13, -57, 12, -15, 29, 98, -50, 73, -36, -15, 14, -12, 7, 11, -70, 4, 61, 68, -39, 15, 15, 25, 45, -15, -26, -6, -63, -127, 42, -13, -8, 15, -91, -51, 46, 22, -80, 5, 36, 54, 24, 65, 3, 9, 11, -5, 127, -25, 16, -26, 67, 85, -24, -41, 48, 9, 54, -12, -3, -25, -10, -32, -33, 1, -8, -2, -5, 15, -1, 91, -24, -4, 7, -24, 32, 11, -16, 28, -2, 95, -21, -79, -40, 24, 12, -82, 73, 46, 54, -24, -70, -7, -7, -2, -46, 44, 60, 0, 25, 11, 20, 48, 2, 9, -10, -18, 24, -56, 35, -72, 90, -28, -87, -1, 46, -30, -2, 6, -1, -22, 2, 8, -31, -29, 8, -41, 38, 3, 10, -36, 34, -26, -47, -69, -6, -13, -34, -42, -37, 4, 28, -13, 23, -6, 2, 31, 39, -84, 27, -25, -21, -25, 48, 18, 48, 27, -48, -22, -27, -127, -29, -32, -19, 16, 5, 33, -36, -35, 22, 75, 11, -24, -49, -67, -25, -61, -44, 44, 30, -2, -45, -27, -77, 22, 13, 60, 16, -59, 23, -64, 5, -83, 20, -75, 78, -54, 28, -27, 14, 7, 19, -1, 14, -16, 60, -33, -11, -37, -29, 20, 40, 40, 104, -9, -68, -20, -51, 27, 49, 31, -45, -41, 72, 6, 24, 24, -30, 17, -8, -46, 35, -52, 23, -17, -33, 56, -62, -31, -82, -64, -33, -12, -21, 75, 42, -113, 60, 127, 55, -38, -45, -3, 7, 56, -37, 0, -20, 52, 25, -16, -13, -67, -7, -27, 21, -9, 0, 88, 40, -33, -8, 11, -8, -32, -85, -3, -22, 12, 50, -48, 44, -67, 12, 55, -10, 41, 11, -53, -22, -18, 39, -33, -31, 17, 6, 53, -12, 0, -14, -61, 51, 5, 24, -29, 8, -23, 20, -12, 17, -3, -66, 9, 58, -14, -7, 7, 20, 17, -12, -49, -34, -25, 39, -3, 30, -127, -28, -5, 90, 26, -26, -22, 47, 5, 68, 42, -24, 33, -4, -25, -11, 36, -2, -15, -7, 32, 3, 64, 22, 40, 0, -57, 3, 66, 17, 30, -2, -28, -36, 51, 39, 20, 39, -21, 56, 55, -3, -35, -34, -21, -16, 10, -13, 41, -8, 40, 89, -11, 46, -6, 35, -54, 26, 8, 1, 28, 57, -6, 48, -18, -4, 3, 58, -34, 23, -43, 19, -29, 51, 57, 22, -89, 6, -95, 34, 36, -67, 31, -19, -4, 19, 11, 14, 6, -2, 3, 27, 127, -22, -13, -5, -27, 38, 68, 14, -25, 53, -5, 18, 35, -1, 3, 72, 15, 43, 44, -9, 7, -32, -36, -25, 24, 52, -19, 2, 46, 39, 31, 6, 41, 30, -15, 17, -26, 15, 18, -25, -32, 0, 20, -17, 23, 12, 17, -20, 8, 10, -16, -7, -22, 14, -25, 44, 60, -20, -53, 13, -4, -32, -99, -5, 61, -64, -23, 21, 32, 9, -23, 127, -26, -18, -14, 10, 4, 54, 1, -27, 20, 22, -20, -67, -35, 66, -6, -9, 19, 22, -8, -30, -65, 5, 2, -12, 0, 22, 22, -43, -50, 36, 11, 9, -97, 32, 46, 2, -10, 15, 90, 22, 22, -51, -11, 5, -26, -30, -13, 18, -37, 27, 15, -3, -23, -56, 127, 22, -31, -102, 20, 53, -2, -33, 26, -11, -14, 19, -63, -5, 14, 43, 17, -33, 5, 38, 5, 29, 47, -11, 31, -18, 1, -18, 37, 11, 20, 19, 23, 18, 91, 49, -5, 14, -23, 45, -9, -4, 47, -33, -25, 12, -40, 9, -6, -46, 0, 38, -26, -36, 19, -2, -36, -4, 11, -84, 50, 23, -65, -46, -24, 25, 57, -11, 33, -49, -20, -95, 46, 85, -50, 4, 59, 36, -17, -85, -22, 79, -19, 41, -6, -56, -12, 28, -56, 20, 24, 73, -24, 51, -18, 86, -1, 19, -122, -67, 23, -78, 42, -71, -49, 24, -27, -53, -59, 127, 0, 11, 25, -23, -33, -7, -13, -5, -41, 76, -35, -40, -11, -64, 11, 12, 65, 2, 69, -35, 12, -14, 33, 18, 65, -120, -18, 10, 32, -7, -54, -96, 24, -19, -27, -19, -5, 35, -26, 7, 10, 36, -28, -40, -17, 14, -12, 65, 37, 9, -67, 26, 25, 58, -31, 40, 1, 25, 34, 0, -34, -44, 4, 44, 63, -5, 56, 30, -45, 9, 0, -82, 20, 0, -127, -26, 60, 23, 18, 5, 34, 4, -13, 1, -19, 51, 13, 29, 72, 1, 45, -18, -15, 11, -78, -31, -1, 12, -24, -33, -14, -58, 37, -4, -61, -4, -42, -106, -7, -35, 15, 44, -16, 12, 32, 19, -112, -33, 69, 16, 29, -74, -8, -3, 58, 34, 26, 85, 18, 12, 11, 73, 56, 31, -39, 7, -35, 28, 16, 3, 27, -41, -23, -16, -49, -45, -76, -50, -28, 95, 21, -26, -2, 14, -69, -11, -54, 16, 24, 3, 49, 57, 4, -12, -69, -41, 37, 2, 21, 127, -31, 65, -73, 4, -66, 51, 9, -21, -53, 40, 21, -41, 18, 127, 37, -19, 37, 14, -11, -30, 2, 7, -44, 47, -70, 7, 46, 23, -29, 20, 37, 56, 29, -16, -62, -47, 3, -26, 31, -24, -45, 4, -10, -43, 37, -8, -18, 68, -20, -35, 24, -35, -1, 27, 26, 56, 70, -22, -17, -29, 50, 97, 21, -1, -20, 37, -3, -25, 15, -7, 23, -45, 0, 53, 8, -41, -60, 37, -30, 30, 21, 5, 52, -54, 24, 64, -28, 19, 19, -45, 19, 42, 19, 73, 23, -34, -8, -86, 106, 11, -34, -44, 20, -32, -40, -98, 28, -59, 12, -22, 30, -2, -20, 24, -8, 11, -12, -27, 18, -7, -1, -45, -37, 39, -25, 9, 13, 49, -25, 80, -11, -11, 26, -46, -31, -17, 20, -23, 15, -26, 15, 38, -127, -86, 70, -15, -42, -36, -84, -23, 64, -18, 0, -21, -33, -23, 51, 46, -96, -37, -18, 51, -73, -11, 27, 2, 44, 40, 33, -68, 10, 3, -22, 39, 21, -8, 7, 32, -48, -18, 96, -4, -32, 43, 28, -34, -36, 44, 19, 82, 17, -64, 73, 7, -24, 26, 9, 24, -52, 23, 42, -60, -14, 62, -2, -61, -13, -16, 36, 25, -87, 22, 28, -10, -37, 30, -24, 82, 15, 47, -13, 6, 24, 46, -8, 0, -56, -10, 10, -5, -30, 19, -10, 13, -9, 46, 20, 77, -2, -31, -13, -49, 28, -25, -127, 4, -23, -12, -27, 7, -5, -6, 9, -45, -57, 36, -56, 127, -80, -15, 31, 25, -35, -52, 21, 14, -41, 54, -11, -4, 4, 12, -47, 35, 22, 46, 62, -63, 67, -13, -19, 0, 110, -33, -60, 10, -40, 58, -11, -12, -54, 7, -38, 8, -15, 20, 28, 28, 39, 4, 82, 7, -44, 96, -76, 32, -12, -18, 5, -23, 43, -43, -32, -5, 55, 13, 27, 3, -11, 74, -6, -76, -12, -5, -68, -36, 65, 8, -7, -16, -4, 51, -27, 11, -32, 35, -27, -27, 47, 51, -12, -52, 6, -48, 29, 19, 2, -20, 11, 11, -11, 22, -21, -23, -3, 7, -6, -26, -12, -1, 60, -19, 23, 14, -37, 38, -50, 22, -9, -54, 24, 16, 38, 19, -27, 13, 31, 18, 12, -10, -20, 22, 127, -30, 11, -70, -50, -1, -12, 6, -28, -66, 26, -44, 15, -25, 15, -4, 47, 43, 10, -2, 5, -50, -40, 24, -53, -12, 48, 0, -10, -46, -37, 1, 47, 6, -9, -36, -74, 24, 13, -6, 9, 20, -38, -20, 4, -31, -4, -67, 1, 7, -40, 44, -17, -15, 0, 9, 1, 34, -16, 32, 2, 26, -6, 19, -32, 6, -37, 27, 15, -21, -18, -13, -14, -9, -50, 15, -23, 41, 21, 61, -127, -12, 46, 83, -22, 15, -6, 14, 17, 23, 3, -11, 50, 55, 7, -6, -19, 2, 18, 10, 12, 2, 47, -9, 43, 16, -48, -44, 65, -13, 32, -117, -19, 35, -5, -86, -27, 32, -55, 53, -79, -12, 31, 37, 5, -19, 22, -55, 22, -4, 33, -4, 37, 56, -15, 66, 27, 37, 84, 16, 80, -41, -40, -99, -28, 30, 38, 42, -11, -31, 61, 40, 9, -106, 2, -30, -26, 52, -35, -26, -16, 63, -14, -63, 8, 50, 12, 43, 50, 9, 49, -52, -9, 63, -2, 127, -16, -21, 62, 47, -41, 51, 48, 58, -28, 19, -56, 13, -37, -57, 69, 32, 0, -20, 48, 50, 36, -79, -51, -67, -86, 22, -8, 24, 81, -26, -34, -2, 82, 29, 5, -16, -31, 23, 3, 33, 56, -27, -31, -21, 74, -9, 82, -47, 36, 38, -32, -13, -43, 26, -67, 99, -27, 38, 117, 23, 33, 53, -2, 74, 9, 34, -1, 127, -30, 35, 29, 11, -26, 12, -10, -1, -13, -21, -61, 20, -46, 19, 25, 22, -78, -38, -22, 115, 18, -60, -30, -22, -22, 18, -42, -28, -1, -23, 25, 45, 9, -66, 45, 84, -5, 72, 63, -15, 26, 19, 27, -86, 70, -66, -25, -47, -28, -21, 25, -55, 21, -8, -24, -30, 29, -65, 42, -43, -80, -84, 40, -28, -52, 22, -93, 14, 27, 15, -2, 37, -33, 83, -35, 85, -14, 5, 18, 12, 18, 19, 11, 4, 44, -4, -36, 127, 34, -26, 44, 48, -29, -12, 56, -32, -15, -16, -1, 44, 31, -29, -40, -13, -10, -48, -71, 47, 18, -40, 63, -12, 2, -9, 87, 57, -6, 8, -107, -16, -39, 10, -10, 36, -6, 86, -33, 5, 19, 44, 9, 37, -9, 30, 36, -60, 28, -60, 39, 48, 18, 10, 0, -1, -3, 6, -5, -11, 53, 23, -3, -15, -11, -66, 37, -11, 25, -54, 27, 40, 35, -10, 46, -43, 28, 20, -52, 127, -2, 27, 34, 71, 0, -14, -65, 5, -35, -9, -5, -13, -53, -88, -71, -25, 30, -20, -65, -27, -43, -51, -40, 45, 0, -43, 7, -30, 47, -24, 0, 7, -69, 56, 49, -5, 36, 45, 0, -12, 73, 18, -13, -14, -32, 20, -62, 2, -45, -98, -25, -17, -127, 94, -89, 74, 24, 17, -26, 39, -73, -9, 75, 20, 91, -76, 76, 5, -103, 11, -8, -24, -33, 5, 0, 33, 7, -83, -4, -24, 64, 3, 6, -23, -12, -3, -63, -38, -42, -41, -13, 60, -93, -74, -53, 29, -47, 3, -57, -32, 41, -43, -38, 23, -2, 27, -35, 33, -18, 21, -14, -6, 62, -80, -10, 63, -42, 7, 18, 73, -4, -5, 55, 4, 46, 0, -8, -27, -11, -21, 67, -21, 101, 31, -25, -2, -16, 60, 31, 72, -16, 32, 55, -9, -11, 12, 43, 23, 40, -25, 20, 4, 44, -27, -39, -25, -86, -32, -3, 30, 0, 18, -14, 20, 29, -23, -18, -127, -19, 9, 23, -51, -126, 14, -19, -113, -55, 30, 29, 23, -14, 29, 17, -68, -72, -94, 33, 39, 10, -67, 14, -9, 61, -64, -33, 53, 76, 59, 61, 76, 49, -18, -5, -49, -14, 84, -41, -6, 117, -2, -46, -31, -41, 99, -70, 127, -42, -8, -21, -101, 17, -4, -85, 36, 18, 40, 16, -7, 126, -16, 64, 21, 34, -11, 4, -39, -46, -49, 13, 4, -47, -107, 25, 9, 17, -50, 3, -63, 27, 20, 8, 101, 62, 29, -68, -48, 48, -40, 11, -22, -79, 27, -14, -113, 8, -4, -72, 79, -19, 33, -54, 41, -57, -23, -88, 14, 31, 36, 9, 31, -13, -35, 5, 19, -74, -3, 45, 40, 0, -29, -64, -41, -35, 5, 75, 26, -22, -99, 18, 20, 72, 28, -107, 13, -61, 9, 71, -30, -21, 62, 23, -86, -22, -15, -7, 43, 66, -6, -38, 69, 6, -31, 41, 127, -9, 71, -2, 12, 48, 27, 34, -20, 27, -18, -24, -15, -54, -20, -83, -42, 4, 4, 28, -23, -14, 45, 41, 48, 39, -33, -15, -18, 18, 40, 21, -48, 26, -7, -34, -47, 41, 9, 65, 127, -43, -46, 15, 38, 43, -22, 41, 22, -17, 12, 11, 14, -24, -43, 1, -105, -62, 41, 13, -1, -2, -8, 25, -24, 2, -18, -70, -14, 1, 4, -11, -99, 26, 14, -9, -17, -30, -58, 18, 51, 17, 21, -49, 63, -60, 1, 17, 37, -2, -59, 37, 11, -22, -51, -73, -28, -50, -56, 48, 58, -16, 14, 25, 17, -18, -16, 90, -5, -75, 25, -71, -29, 14, -61, 28, 15, 80, 2, -62, -46, -56, -54, -59, 35, 61, -91, -64, -21, 22, 9, -7, 87, 23, 25, -37, 40, -18, 40, 45, -39, 32, -9, 111, 83, -69, 38, -74, -6, 1, 92, 75, 25, -12, -29, -26, -23, 127, 122, -30, -61, 56, 77, -82, -32, 21, -62, -13, 52, -41, -55, -42, 20, -18, -35, -11, 17, -27, 53, 7, -28, -44, 1, 17, -11, -32, 4, -20, 46, 0, 10, -56, -66, -24, 16, 4, 75, 8, 69, 57, 30, -10, 36, 111, -44, -22, 34, 28, 39, -104, -29, 8, -27, 38, 16, 28, 27, -6, -3, 37, 24, -26, 68, 6, 85, -32, -46, -28, -14, -40, 40, -7, 86, -35, 45, 26, 32, -23, -42, 18, -60, 127, -30, -3, -16, 46, 10, -7, -16, -10, 127, 32, -72, -15, -114, 32, -38, -50, -19, -20, 82, -17, 41, 20, 81, -18, -104, -52, 41, 38, -3, 0, 60, -70, 55, -8, 79, -40, 59, 10, 30, 26, -48, -24, 15, -24, 110, 19, -34, 12, 86, 45, -21, 3, -51, -12, 14, 16, -82, -111, -21, -13, -31, 44, 41, -9, -73, -28, 58, 18, -5, -29, 13, 56, 20, 49, 22, 81, 79, 79, 37, 33, -17, -29, 22, -22, 93, -50, -23, 38, 33, -12, -21, 2, 10, -29, -18, 2, 11, -67, 16, 2, -33, 35, -11, -15, -25, -21, 42, -37, -42, 10, -42, 24, 10, 25, 24, -35, -6, 107, -23, -1, -59, 12, -55, -32, -26, -36, 1, 29, 29, 5, 21, 13, 43, 12, 25, 66, 52, 36, 127, -44, -60, 62, -60, 12, -32, -23, 24, 62, 28, -90, 100, 24, 64, 11, 52, 36, 45, -75, 4, -25, -102, 9, -16, -66, -44, 25, 16, -62, -69, -58, -17, 48, 18, -35, 25, -35, -29, -26, -53, 6, 74, 26, 105, -20, 50, 23, 2, -72, 19, 62, -64, -116, -51, 66, 70, -6, -19, 28, -42, -77, 18, 92, -29, 27, 6, -113, 22, 16, -66, -30, -19, 26, -108, 90, -72, -2, 9, -14, 5, -47, 78, 46, -68, -29, -37, 13, -38, 28, 1, -30, -5, -67, -23, -66, -44, -16, 55, 127, 20, 43, -3, -46, -88, 51, 44, -22, -53, -42, -99, -73, 113, 17, 28, -28, 6, 88, -49, -53, -99, 59, 11, -26, 53, -26, -27, 6, 16, -87, 3, 7, 52, 77, 64, 30, 31, 127, -4, 5, -27, 75, -24, 120, -19, 10, -22, 89, 13, 81, 8, -50, -49, 7, -44, 22, 3, -7, 6, 47, -53, -121, 33, 58, 106, 27, 2, -5, 44, 11, 73, 30, -71, 19, -7, -61, -23, -46, 26, 62, -76, 45, -39, -58, -17, 104, 55, -30, 5, 65, 50, -68, -67, -27, 60, -37, -6, -20, -19, 1, -26, 87, -21, 49, -8, -33, 15, -80, -46, 43, 56, 39, 10, -6, 2, 47, 83, 21, -37, 38, 16, -70, 33, -8, 62, 31, -82, 12, -63, -8, -7, -7, -32, 127, -18, -16, 17, 37, 18, -94, -3, 55, 118, -63, 6, -7, -37, 9, 4, -24, -5, -11, 8, 6, -75, 24, 22, 2, 67, -5, -59, -14, -115, -38, 1, -27, 53, -67, -30, -3, -23, -5, -17, -47, -11, -7, -10, 14, -38, -21, 31, 17, 44, -33, 28, 25, 35, -11, 2, -17, -18, -30, 35, -46, -5, 25, 30, 15, 2, -31, 43, -50, -30, 11, 23, 9, 25, -85, 14, -34, -48, -43, -15, 1, -23, 43, -66, 6, -28, -127, 33, 40, 28, -3, -48, -20, -7, 53, -88, 29, 41, -55, -25, -18, -19, 1, -16, 18, 16, -8, 52, -2, 38, 42, -30, 24, -42, -23, -56, 5, -11, -36, -2, -34, 87, 32, 43, -37, -58, 14, 23, -67, 6, -29, 8, -63, 59, 6, -13, -35, 0, 29, -29, -36, -68, -63, -26, 9, 1, 2, -20, 3, -12, 3, 23, 24, -51, 20, -8, 13, -45, 9, 24, -36, 18, -5, -15, 35, -10, 12, 36, -12, -12, 34, 40, -45, -68, -7, 44, -34, -25, 8, -9, 24, -31, -17, 21, -127, -26, 3, 42, 19, -19, 25, -18, -2, 44, 40, -20, -75, 20, 19, -44, 9, -36, -55, 78, 57, 20, -41, 38, -24, 3, 1, -22, -10, -127, -17, 21, -26, -11, 1, -44, 8, -42, -8, -21, -29, 8, -51, -18, -26, -26, -72, 2, -27, -35, 27, 0, -17, -34, 20, -13, -2, 49, -9, -4, 9, -47, 79, 7, 36, 81, 34, 13, -36, -17, -8, -61, 35, 23, 17, 12, -56, -50, -104, 10, 10, -88, 34, 54, 59, -77, 28, -6, -2, -30, -13, 42, 33, -28, 28, 8, 7, -4, 27, 15, -20, -20, 9, 28, -27, 52, -19, -3, 23, -4, 22, -35, 13, 9, 3, 4, 44, -14, 21, 38, 38, -38, -29, 6, -22, -68, -15, -18, -24, -60, -15, 7, 62, -40, -5, -44, -35, 35, -11, 23, 14, -3, 40, -10, -1, 44, -13, -3, -6, -12, -11, 9, 2, -44, -2, -6, -20, -47, 8, 13, 18, -4, -38, -6, -127, -10, 22, 29, 18, 22, 25, -68, 73, -94, -30, 23, 122, -27, 24, 41, 20, -109, -51, -28, 57, 51, -47, -12, 106, -98, 31, -8, -6, 43, 67, -89, 56, -33, 22, 23, 1, -17, 0, -28, -46, 38, -83, 49, -20, -45, -11, 51, 34, 10, -53, -43, -9, 50, -10, 81, 41, 47, 127, 21, 50, 3, 67, -6, -120, 16, 32, -25, 18, -15, 14, -28, -85, -71, 11, -23, -11, -2, 22, 1, -22, 44, 61, 62, -27, -27, -58, 32, 15, -46, -105, 47, 45, -75, -67, -16, 15, -57, 6, -68, 13, 74, 47, 39, -80, -37, -71, -22, -43, -106, 19, 47, 7, 17, -3, 127, 5, -47, -38, 20, -16, -18, 41, 27, -16, 112, 4, -22, 9, 73, -11, -23, -26, -70, 44, 52, 21, -68, 113, -15, 18, 4, 27, -11, -25, -24, 17, 97, 28, 9, 44, -51, 9, -50, 41, -17, -1, -23, 22, 29, 18, 60, -21, -95, -34, 81, 15, 69, 127, 29, 4, 51, -35, 9, 48, -38, -17, -7, -2, -58, 117, -22, -22, -24, -8, -44, -14, -10, 54, 17, 72, 60, -31, 38, -64, 22, -26, -16, 16, 37, -31, -10, -32, -8, -51, -41, -19, 19, 46, 48, 5, 30, 55, 9, 48, 33, 7, -47, 77, 23, -8, 24, -35, 10, -62, 1, 6, 45, -22, -54, -64, 6, -27, 22, -1, 18, -29, 63, 50, 52, -31, 7, -33, 15, 69, 13, -14, 12, 11, 61, -114, -2, 23, -36, 41, 26, 94, -20, 48, -78, -17, 13, 68, 22, 54, -50, -32, 12, -81, 16, -15, -3, 41, 2, 26, -11, 75, -34, 45, 13, 18, 8, 5, -30, -57, -32, -99, 52, 89, 15, -32, -21, 38, 71, 9, 29, -46, 31, -84, -7, -51, 5, 36, 82, 10, 33, 21, -30, 22, 1, 22, -10, 101, -20, 28, 127, -34, 4, -106, 85, 36, 35, 38, -57, 23, -41, -6, -99, 4, 39, -18, -58, -2, 16, 32, 2, -44, -56, 3, 29, 27, -32, -25, 44, -8, 41, 7, 74, 24, 7, 25, 50, -85, -34, -49, 17, 13, 6, 14, 12, 26, -49, -16, 9, -36, -65, 42, -23, 18, -19, 51, -18, 19, -15, 12, -6, -18, -62, -65, 7, 39, -91, -5, -17, 56, -23, -22, -8, -1, -29, 9, 10, 27, 74, 10, 26, -127, -3, 34, 58, -23, -74, -8, 24, 13, 79, -3, -32, -38, 59, -1, -127, -38, 36, 19, -65, -17, 13, 25, 95, 26, -80, 2, 43, 18, 122, -31, -8, -10, 5, 42, -73, -59, -20, -12, 89, -6, 22, -74, -33, 2, 24, -31, 17, -6, -68, -25, 8, 58, -31, -5, 16, 19, -15, 18, -44, 55, 58, 5, 4, -36, 23, 39, -7, -56, -36, -13, 37, -28, -17, 8, -35, -3, -31, -16, 54, -55, 59, -4, 26, 55, 28, 67, 59, -89, 83, -91, 5, 92, 47, 3, -50, -21, -40, 29, -109, -13, -19, 68, 24, -38, -9, 13, 94, 100, 21, 59, 63, -13, 35, -10, 38, -127, 6, 15, 60, -44, 53, 11, 25, 21, -33, -29, -26, 38, 37, 28, -45, 4, 15, 24, 70, -63, -14, 22, 76, 13, -26, -93, -5, -1, -52, 2, -15, 93, -50, -26, 109, -16, -23, 8, 22, 5, 76, 16, 93, 0, 26, 54, 42, -15, 11, 2, -10, 73, 96, -25, 20, 112, -50, -3, 127, 30, 13, 44, -73, -48, -54, 17, -2, -3, 18, 32, 20, 38, 93, 40, 12, -23, -1, -20, -30, -5, 1, -9, 37, 3, -1, -4, 1, -6, -12, 31, 0, -2, 93, 6, -19, 44, -11, 8, -9, 67, 26, -20, 45, -49, 23, 30, -5, 25, -17, 15, 33, -52, -3, -16, 55, -21, -8, -30, -3, 22, 17, -3, 25, 56, -26, -16, 36, 10, -25, -14, -11, -19, 2, 13, 14, 14, -66, -29, 25, 1, 27, 26, -40, -36, -32, -68, 0, 32, 17, 14, 2, -57, -35, 34, -53, 28, -22, -43, -61, 80, -15, -14, 44, 4, 83, 1, -65, 35, 7, -40, 39, -74, -127, -52, 13, -36, 44, -13, 26, 20, 22, -14, -76, 11, 6, 3, -13, 40, 71, 78, 63, -26, -19, 8, 19, -29, 61, 19, -22, 20, -51, 2, 36, 21, -58, 38, -9, 0, -22, -14, -68, -24, -1, -21, 37, -59, 2, 36, -46, 97, 29, 8, 8, 49, 2, 72, -31, -127, 28, -78, -7, 60, 77, 20, -8, 1, -37, 38, -60, -15, -30, 3, 22, 4, 66, -24, -36, -6, 49, 11, 106, -3, -14, -17, 101, 11, 14, -44, -29, -55, -16, -57, 33, -3, 23, -2, 101, -13, -42, -17, -17, 70, 5, -3, -28, -17, 62, 18, -22, 7, -16, -56, 16, -41, 9, -32, 20, -48, 27, -20, -46, -14, 29, -20, 17, 84, -66, -95, 9, -12, -94, 20, -2, 31, 9, -54, 25, 127, 16, -19, -30, 67, -54, 16, -37, -20, 35, -9, 24, 84, -13, -59, -7, -13, 6, -2, 44, -48, -8, -66, -79, -77, -20, 7, -39, -59, -39, 9, -19, 44, 37, 17, 65, -43, -13, 35, -89, -119, 23, -26, 7, 58, -24, 24, -36, 34, -6, 22, -12, -62, 57, 18, 31, 45, 2, 54, -10, -75, -17, 46, 57, 3, 11, 13, 26, -66, 21, -82, -46, 62, -23, 24, -20, 26, -81, 20, -82, 25, 58, 83, -13, -79, 82, -15, 76, 54, 73, 9, 5, -88, -24, 7, 127, -25, 15, 30, 19, 37, -41, 47, -39, 58, -11, -36, -86, 75, 22, 6, 5, -79, -52, 34, 39, -71, 33, -5, 31, -14, 78, -10, 122, -46, 34, 6, -36, 51, 40, 7, -25, -113, -55, 19, -87, -12, -15, -60, -6, -18, 5, 54, -52, -21, -26, -17, 82, -34, -21, 54, 43, 99, 26, -54, 74, -64, 5, 2, -14, 14, 34, 24, 59, 40, 11, -29, -50, -26, 5, -45, -13, -5, 73, -3, -23, -1, -37, 32, 2, 37, 93, -3, 5, 28, -75, -28, 2, 4, -13, 114, 2, -24, 4, -6, 24, 69, -15, 83, -52, -26, -49, 14, -28, 92, 37, -1, 127, -23, -55, -26, 76, -36, -5, -28, -57, 68, 37, -18, 87, 20, -100, -32, 26, -73, 55, 21, -19, -72, 73, 23, 6, 23, -2, -15, -33, -96, 25, 32, 2, 24, -53, 29, 38, -28, -22, 21, 36, 43, -89, 33, 91, -19, 27, -46, -16, 58, -19, 14, -4, 14, -8, 64, -27, 3, -77, -12, -80, -45, 65, -11, 62, 19, -10, -48, -53, -39, -20, -127, -51, 41, -67, 30, 2, 11, -35, 97, -5, -52, 27, -108, -35, 63, 5, -27, -28, -2, 27, -41, -13, -55, 5, -89, -45, -12, -75, 0, 20, 4, -97, -16, -1, 20, 15, 4, -23, 55, 127, 38, -5, 28, -58, -3, 5, 69, 37, 15, -19, 21, 36, -43, 0, -33, 2, 64, 9, 10, 50, -32, 4, -33, 0, -26, -24, 50, -71, -55, 44, -36, -28, -17, -17, -54, -8, 17, 52, -13, -11, -10, 15, 6, 17, -35, -25, 16, 42, -36, -14, 33, -2, 6, 32, -83, 47, -8, 52, -3, -105, -75, -23, -20, -45, -65, 0, 41, -38, -31, 11, 44, -3, -27, -24, -20, 7, -17, -45, 77, -29, 36, -11, 9, 1, 54, 24, -23, -10, 23, 11, -115, -57, -3, 44, 37, -18, -127, 48, 39, 59, 12, -22, -73, 28, 57, -36, 58, -3, 26, 14, 41, 2, -65, -30, -21, -124, 30, 9, 60, 5, -49, 6, -31, -1, 72, -1, 18, 43, -23, -16, 73, 15, 12, 43, -25, 60, 16, -5, -14, -18, 27, -37, 13, -44, 71, -66, -107, -38, 2, 31, 20, 5, -17, 18, 17, -8, 24, 11, 24, -40, 22, 9, -18, -50, -3, 7, -9, -30, -5, -13, 2, 24, 27, 12, 37, 37, -3, -33, 50, -30, -12, 8, 30, -29, -11, 5, -11, -28, 59, -13, 3, 40, -46, -28, 12, 9, -21, 66, 3, 2, 14, -42, -4, -17, 7, 127, 37, -8, -45, 103, 6, 25, 44, -10, 60, 22, 41, 40, -12, -34, -49, -3, -50, -43, -9, 54, -46, -27, -7, 95, -32, -54, -55, 27, -19, 72, 11, -32, 25, 71, -9, 32, -127, 2, 56, -19, 17, -37, 5, -10, -34, -7, -42, -14, 3, 83, 11, 9, 33, 8, -15, -12, 7, -20, 13, 0, 59, 48, -13, -14, -31, 33, -5, -50, -31, 14, -13, 20, 29, 12, -51, 51, 8, -9, 43, 13, -30, 6, 4, 44, -11, -36, 18, -13, 9, -117, 30, -34, 13, -6, 1, 1, 2, 42, -2, 9, -8, 39, -29, 6, 89, -63, -69, 127, 21, 16, -30, -101, 19, 46, -45, 28, 40, 45, -56, -28, -4, 27, 65, 77, -16, -39, 63, -3, 21, 46, 5, 45, 40, 42, 72, -34, 16, -22, -19, 32, -3, 62, -18, -31, 39, -33, -26, 59, 46, 64, -45, -69, -20, -8, -75, -36, 15, -52, 68, 48, 32, 80, -11, 44, -10, -87, 15, 27, 44, -54, -12, 38, 1, -9, 52, 2, -17, 35, -55, -15, -28, -21, 29, 48, 14, -70, 27, -13, 17, -64, 17, -24, -30, 60, 48, -64, 16, -61, -48, -14, -92, 17, 21, 22, -78, 1, -8, 72, 51, -4, 51, 31, -10, 20, -18, -127, 27, 21, -33, 7, -43, 17, -5, -40, -46, -1, -9, -17, 6, 79, -14, 93, 100, -39, 16, 5, 27, 92, -35, -4, -103, 2, 81, -71, 0, 25, 62, 3, 33, -3, 32, 91, 2, 0, 34, 35, -22, 55, 17, -26, 36, 26, 2, -29, 88, -34, -5, 27, 34, 27, -22, -29, -33, -2, 16, 68, 1, -77, -2, 47, -40, -48, 11, 46, 48, 46, -11, -52, 127, -3, -23, -81, -105, -66, 0, -26, -35, 20, -73, -40, 8, -19, 2, 20, -49, 18, 15, -11, -52, -22, 40, 1, 20, -23, 22, 32, -46, 9, 36, 30, -58, 28, 17, 5, 90, 36, -34, -24, 27, -17, 9, 28, 15, 14, -19, -42, -58, -33, -7, 2, 21, -26, -27, 56, 32, -76, -78, 21, -69, -67, 13, -2, -5, 49, 20, -42, 55, 35, 44, 13, -14, -18, -8, 57, -50, -51, -19, 11, 42, 54, -85, 20, 127, 34, 8, -27, -3, 39, 52, 50, -17, -8, 75, -28, 97, -87, 25, -7, -60, 10, 48, 26, -55, -29, 50, 82, 10, 71, -38, -5, -44, 23, 28, -114, 13, 54, 18, -46, 39, -41, 58, 42, 5, -47, 63, -37, 33, 59, -17, 8, -23, 46, 79, -24, 29, 18, 8, 10, 30, -6, -10, 46, -2, 35, -1, -12, 127, -35, -13, -40, 11, -52, -39, 10, 42, 8, 12, 29, 38, 18, -48, 4, 9, 18, 30, -14, -13, -3, -8, -18, 19, 18, -5, -12, 1, 52, 38, 14, 27, -25, 55, -27, 7, -25, 45, -3, 18, 18, 1, 11, -39, -9, -16, -23, -48, -22, -53, 5, -20, -2, 9, -13, -69, -6, 17, 11, -49, -9, -19, -62, 3, -17, -6, -11, 73, -58, -45, -66, -18, -31, 11, 12, 37, -102, -56, -10, 25, 20, -114, 4, 12, 24, -6, 43, 47, 54, 18, 43, -3, -6, -44, 61, -48, -15, 5, -26, 30, -78, 34, 66, -11, -17, 4, -127, -8, -76, 8, -1, -20, 43, 15, -20, 88, -66, -119, 43, -79, 49, 11, 0, -52, -55, -85, -122, 91, 4, -67, -78, -42, 29, -65, -20, 46, 58, -85, 28, -28, 115, -34, -72, -9, 31, 55, -16, 0, -34, -33, -31, 71, 27, 81, 70, 0, -42, -64, -90, 25, -8, 18, -1, -22, -66, -7, -31, 67, -27, -59, -38, 14, -53, 26, 79, -14, 37, -8, -28, -11, 74, -51, -21, -1, 17, 8, 18, 20, 19, 36, 10, 34, 60, 12, -127, 6, 33, 52, 32, 73, 9, 54, 22, -87, -74, 58, -54, -18, 47, 31, 11, 14, 25, 47, 14, -22, -101, 46, 4, -12, -86, -7, 49, -6, 33, -39, 32, 7, 19, -25, 23, 16, -33, -3, -47, 13, -27, -12, 15, -70, 3, 21, -2, -32, 39, 66, 44, 6, 14, 67, 26, 35, 16, 28, -51, -77, -97, -36, 49, -32, 29, 23, 46, -13, -8, 48, 32, 25, -65, -8, 127, -19, 2, -35, 41, 43, 11, -11, -17, -14, 41, -45, -62, 85, 5, -34, 15, 31, -14, 28, 1, -33, 68, -32, 43, 7, 15, -39, 1, 59, 27, 30, -9, 32, -16, -3, -16, -55, -74, 5, 59, -7, -26, -22, -74, -21, 23, -2, -29, 65, -5, -30, 55, -119, -4, -6, -7, -50, -29, 42, 35, -18, -14, -9, -1, -30, 22, 27, -41, -7, 22, 23, -8, 31, 25, 0, 4, -10, 8, 13, -4, -9, -29, -45, 10, 43, 43, 44, -27, -3, 30, -8, -3, 3, 12, 3, 69, -16, 7, -6, -69, -77, 24, -35, -55, -26, 1, -10, -49, 11, -41, 5, 30, -5, 37, -18, 127, -84, -10, 2, -127, -15, 14, 26, 35, -16, -2, -18, -61, -13, 49, 13, 15, -21, -34, 15, 18, 29, 5, -17, 5, -64, -9, 17, 16, -19, -2, 73, -25, -37, 31, 67, 18, 9, 4, -25, -14, 8, -8, -34, 14, -44, 53, 4, -57, -11, -4, 4, 24, 19, 46, -11, -7, 67, 2, 12, 29, 0, 25, 7, -4, -29, -1, -13, -9, 24, 6, -41, 3, -29, -9, -29, -13, 67, -44, 58, 17, 25, -23, -10, 7, 27, -30, -18, 116, -7, -24, 14, -24, -27, -25, 66, 70, 10, 4, -58, 7, -19, -19, -2, -15, 9, 29, -13, -5, -38, -16, 54, -43, -24, 28, -12, 4, -11, -37, -31, 25, 13, 37, 48, -1, 30, -34, 21, 8, 41, 28, 9, -53, -35, -60, 54, 1, 42, 17, 5, 20, 9, -59, 2, 27, 4, -12, -6, 127, 14, -22, 6, 63, 10, 39, -44, 0, 17, 9, 6, -26, -47, 4, -12, -79, -61, -57, 14, -44, -12, 26, -4, -15, -11, -17, 12, 14, 11, 57, 28, 34, 21, 9, 6, -18, -67, -22, -38, -36, 10, 43, -15, -13, -20, 3, -70, 11, -26, -68, 10, -31, -10, -86, 18, 15, -9, 29, -47, 0, -50, -16, -88, 37, 3, -9, 25, -35, -16, -11, -44, -127, 20, -16, 25, 38, 4, 56, -8, 37, 29, 31, 10, 16, -30, 23, -10, -23, 24, 40, 39, 4, -66, 45, 1, 33, 5, -26, 51, 33, 67, -70, -53, 47, 22, 38, -28, 29, 34, 38, 24, -10, -30, 35, -32, 75, -113, 50, 39, -11, -51, 19, -36, -14, 38, 20, -60, 46, 8, 8, -46, -21, -42, -3, -25, 27, 60, 20, 23, -44, 13, -58, -127, 19, 6, -34, -58, -23, 20, -93, -9, -9, -2, -28, -24, 13, 22, 28, -64, -110, 24, -3, -13, 34, -31, -20, 30, 18, 48, 8, -52, 54, 33, 28, -11, -38, 71, 3, -16, 38, -31, -14, 4, 62, 54, -35, -24, 127, 8, -26, -71, 32, -23, -21, 12, 71, 55, 4, 51, 21, 55, -29, 7, -11, 59, 48, 26, 17, -34, 52, -12, 2, 35, 39, -2, 41, 53, -9, 61, 5, -51, 31, 2, 26, 62, -39, -52, -22, 0, -46, 0, 18, -23, 5, 23, -61, -24, 24, 70, -35, -80, -108, -31, -29, -11, -49, 38, 46, 26, 0, 41, 10, 35, -127, -30, 71, 10, -1, 91, -17, 1, -42, -39, -83, 71, 36, 16, 13, 5, -34, -9, -58, 32, -7, 35, -22, -28, 11, 20, 44, -91, 65, 7, -22, -4, 38, -61, -23, 59, -52, 52, -50, 53, -34, 37, 77, 13, -2, -20, 5, 97, 91, -86, 31, 22, 53, -63, 16, 44, -5, 2, -32, -60, 17, -21, -33, -39, -37, -6, 15, -20, -4, -63, -23, 27, 14, 29, -44, -51, -53, 15, -52, -7, -19, -7, 14, -11, 5, 19, 3, 19, 26, -3, -2, 42, 26, -7, -8, 8, -32, 9, -23, 11, 18, -25, -20, 127, 34, -20, -10, 3, 10, -31, 1, 40, 1, -40, -15, -37, 11, -2, -13, -33, 24, 1, -40, 3, 14, -5, -8, 13, -8, 32, 13, 7, 33, 24, -8, -19, 13, -8, -11, -7, 14, -20, 14, 10, -33, -46, 34, -9, 4, -7, 11, 3, 0, -14, -37, -13, 3, 4, 27, 68, -41, -43, 73, -1, 5, -53, -27, 11, -15, -44, -31, 49, 41, -9, 13, -43, 48, 47, 20, -5, 5, -18, 29, -4, -83, -16, 35, 4, 36, 56, 28, 6, -27, -27, -30, 6, 75, -22, -22, -42, 69, -32, 19, -57, 47, -48, -79, 15, 0, -99, -14, 41, -55, -73, 42, -5, -23, 52, 127, 54, 13, -6, 103, -18, -21, 5, 53, 34, 48, 13, 30, 28, 29, -26, 21, 23, -47, 110, -10, 73, 55, -68, -100, -82, -77, 22, -4, -34, 81, 53, -47, -18, 42, 65, -10, -63, 78, 24, 31, 60, -112, 8, 43, -58, -56, -27, 84, -58, 74, 7, 7, -44, 54, -62, -30, -30, -23, -11, -30, -7, -20, 31, 91, -44, 19, 11, -6, -90, -22, 21, 89, 42, 41, -5, -127, -20, 30, 46, -55, -25, -17, 31, 39, 1, -19, -18, 32, 5, -3, 70, 24, 43, 40, -9, -108, -81, 81, 7, 17, -40, -35, -47, -4, -100, 32, -34, -4, 8, -35, 14, -91, -121, -25, 31, 54, 33, 108, 25, -73, -48, -2, 9, -117, -20, -7, 31, 30, -2, -88, -48, -23, -1, 62, -57, -8, 24, 98, -43, -9, -11, -8, -64, 86, -39, 37, -21, 2, -7, -22, 21, 37, 23, 0, 36, -35, 25, -16, 83, -38, 9, -7, 36, -55, -79, 8, -28, -18, 87, -113, 7, 15, -127, 14, 98, 59, -18, -16, 76, 37, 4, -70, -30, 26, -31, 127, 52, 23, -40, -76, 16, -5, 34, -42, -29, -21, -82, 34, -15, 23, -40, 17, 22, 3, 4, -29, -74, -2, 37, -9, 71, -6, -16, -30, -44, -100, 3, -6, -38, -60, -2, -73, 44, 22, 53, -10, 19, -29, -49, 21, 10, 9, -6, 14, -13, 35, 25, -53, -31, -30, -73, -27, 78, 0, -21, 4, -51, 5, 26, 1, 28, 22, 37, -14, 84, -34, -41, -1, 77, -6, 15, -41, -21, -33, -47, -62, -47, -16, 26, 39, 25, -9, -19, -31, 17, 0, -15, -16, 18, -7, 5, 66, 27, -33, -22, 37, -127, 46, 12, -23, -30, 34, 24, -33, -18, -106, -50, 73, -46, -30, -19, -23, -9, -17, 10, 3, -19, -15, -20, -59, -44, -40, -13, 50, 32, 24, 32, 34, 111, 36, -69, -74, -81, 50, 3, -43, -35, 33, 0, 33, -24, 63, 17, -35, -24, -10, -26, -16, 12, 71, -118, -40, 120, 50, -2, 127, 67, -54, 33, 61, 30, -115, -1, -9, 38, 14, 99, 101, 32, -62, 25, -63, -61, -127, -25, 24, 26, -4, -74, -2, -8, 16, -2, -17, 32, -15, -52, -51, 22, -62, -50, -1, 36, -126, 111, -50, 1, 77, -33, 44, -39, 60, 92, -93, 5, 48, 24, -33, 122, -100, 61, 81, 104, 6, 14, -34, 8, -4, -1, 20, 5, -9, 24, -31, -73, 47, -83, -65, 5, 77, -80, -100, -69, -16, 62, -2, -23, -72, -3, -101, 39, 26, 38, 17, 61, 38, -34, 29, -45, 91, 60, 8, -13, -77, -49, -20, -96, 38, -82, 33, -8, 39, -42, 6, 111, -30, -9, 38, -127, -31, 24, 69, -11, 87, -43, -31, 31, -52, 105, -7, -34, -23, -34, -43, -11, 46, 8, 71, 18, 20, 47, 27, 6, -56, 9, 26, 7, 11, 19, -51, -40, 19, 63, -7, -15, -37, 77, 100, -5, 106, 78, 40, 60, -12, -31, 48, -20, 95, -15, -88, 58, -84, 127, -16, -121, 90, 22, 34, -84, -44, 36, 23, 76, 107, 70, 8, 28, 52, 37, -55, 2, -50, 16, -54, -76, -39, 28, 33, -56, -60, 87, -5, -5, 68, 26, -33, 84, -14, -48, -103, 63, 41, 43, -6, -127, -14, 87, 28, 12, -43, -35, -15, -48, -40, -55, -4, -44, 10, -29, -87, 9, 1, -50, -120, -43, -12, 31, -75, 82, 27, 2, -47, -47, 7, -29, 49, 31, -3, -14, -29, 37, -38, 69, -40, -18, -8, 10, 87, 25, -14, -8, 38, 37, -9, -8, -63, 19, 4, 25, 5, 2, 6, -26, 5, -1, -63, -27, -127, -8, 1, -29, -87, -1, 58, -6, 37, -2, 27, -8, -3, 1, -41, 12, -19, -13, 3, 44, -29, 33, -48, -2, -21, -34, 36, -69, 113, 13, 36, -45, -92, -21, 16, 43, -67, -2, 44, 50, -34, 25, 14, -35, -55, 57, 8, 10, -22, -14, -60, -38, 32, -30, -53, 13, 46, -33, 66, 27, -23, 26, -24, -95, -6, 52, -14, 66, -58, -38, -2, 53, 46, 43, -24, -50, -14, 83, 14, -20, 39, -4, -18, -25, 13, 50, 11, -3, -93, -23, -7, 75, 15, -42, -34, -36, 42, 38, -89, -13, -6, -2, -26, -41, -65, 2, -18, -11, 27, -61, 23, -14, -36, 91, -19, 39, 4, -72, 43, 13, 127, -34, -24, -87, 83, 24, -45, 27, 38, 78, -73, 13, -4, 61, -22, 11, 60, 36, -18, 24, 63, 56, -25, 8, -60, -20, -8, -76, -42, 16, 48, -21, 44, -16, 17, 19, -24, -24, 65, 23, -127, -21, 59, -22, -13, 7, -43, 0, 5, -65, 12, -4, 14, -18, -43, -30, 0, 17, 23, 106, -60, 26, -68, -13, 41, -7, 5, -16, 5, -31, 76, 11, 57, -21, 3, 10, -26, -7, 56, 7, -3, -113, -39, 32, -24, -16, -127, 35, -49, -46, 33, 16, -22, 13, -22, 14, -49, -21, -30, -41, -60, -67, 4, 1, -11, 5, -1, 18, -4, 14, 4, 90, 44, 53, 12, -9, 21, -66, -29, 40, 62, 14, 7, 49, -11, 32, 43, -50, 21, 52, -33, 19, -14, 54, 8, -53, 52, 12, 21, -71, 23, 36, 69, 14, -47, -16, 14, 52, -4, -29, -16, -14, -44, -2, -13, 73, -45, -29, -73, 82, 13, -5, 1, 75, -26, 4, 26, 0, 7, 42, 43, 8, 39, 20, 17, -8, 4, -51, 127, 8, 15, 37, 11, -67, 15, -39, 42, -32, 45, 27, 38, -21, -8, 101, 21, -2, 57, -90, -16, 2, -19, 40, 51, 65, 15, -33, 5, -50, -23, -21, -7, 30, -2, -80, 4, 2, 59, 50, -15, -31, -64, -8, -67, 49, 4, -35, 62, 27, 52, 0, -122, -12, 71, -74, 53, 4, -30, 38, 23, 87, 2, -100, 44, -49, 36, 16, -12, 52, -24, 16, -49, -68, -8, -3, 43, -66, 25, -10, 81, 18, 57, 18, 28, 11, -9, 15, -55, 33, -120, 22, 24, 46, -40, 2, -19, 9, -53, 48, -8, -45, -100, 2, 38, 19, -76, -23, 82, -51, 9, -42, -39, -14, 23, -55, -57, 2, 9, -4, -20, 42, -31, 78, -37, -6, 8, 125, -44, -40, 71, -21, 26, 110, -6, -54, 3, -127, -3, 39, -48, 20, -33, -42, 3, -71, 29, -8, -24, -14, -5, -7, -127, 5, -11, 8, -9, 37, 17, -46, -16, 11, -17, 90, 3, 15, 1, -25, -3, -4, -35, -10, 1, 10, 22, -17, 13, 13, 50, -4, -20, 20, 19, -10, -12, 3, 16, 17, 11, -13, -4, -33, 9, 22, 3, 3, 32, 5, 21, -48, -13, -5, 13, 3, 44, -17, -21, 13, -10, -13, 19, 7, -127, -4, 8, -6, 4, 8, -50, 10, 25, -29, 15, -2, -9, -95, -101, 10, 115, 0, -17, -37, -15, 20, 5, -24, 11, 113, -69, -90, 75, -44, -6, 42, -24, 7, 24, -16, 31, 42, -51, 12, 40, -20, -69, 57, -64, -54, -27, 13, 8, -60, 58, 62, -36, 12, 17, 84, -53, -87, -4, -83, 84, 108, 90, 105, 55, -44, 68, -4, 69, -44, -20, 22, 96, -60, -23, 5, -11, -30, 20, -90, -127, -24, -58, 9, -7, 0, -25, -83, -11, 45, 3, -116, 5, 4, -8, 55, -24, 75, -21, -47, 78, -13, -38, -6, -17, 78, -72, -60, -89, -22, -9, -84, 3, -27, 2, 6, 1, -47, -21, -69, 0, 44, 42, 78, 7, 2, 18, 22, -53, -23, 73, 21, -16, 70, 47, 55, -63, 96, -4, 66, -52, -73, -3, -11, 24, 34, -45, -56, 4, -52, 41, 2, 25, -38, -60, 13, -10, 127, 2, 14, -51, -87, -9, 27, 8, 32, -51, -5, -99, -14, 29, 121, 26, -29, -52, -9, 25, 9, 15, 32, 37, -13, 43, 6, -33, 27, -55, 26, -10, -25, -33, -8, -47, 16, -33, -7, -20, 127, -11, -26, -2, 43, -10, 15, -31, -8, 0, -27, 10, -8, -22, 49, 5, 30, 9, 17, -70, -10, 26, -27, -24, 36, 2, 42, 11, -7, 45, 7, 2, -27, 21, 0, -21, -23, 10, 16, -34, 1, 3, -6, 28, -10, 17, -31, -52, 0, -2, -18, 4, -28, 5, 26, -7, -86, -85, 13, 9, -47, -18, -18, 3, 44, -35, -15, -79, -127, -20, -11, 13, 46, 76, 5, -83, -68, -3, 23, -50, -2, 48, 8, 35, 37, -49, -57, 32, 11, 31, -74, -9, -7, 94, -27, -25, 32, -57, -74, 19, -35, 29, -17, -4, -19, -1, -16, 3, -31, -47, 29, 8, 66, 8, 6, -28, 49, 5, 51, -51, -61, 29, -25, -13, 79, -57, 17, 19, -117, -36, 77, 79, -17, 54, 9, -55, -54, 13, 21, 93, -1, -19, -8, -8, 27, -21, -48, -15, -12, -4, -22, 22, 0, -15, -10, -4, -26, 3, 26, 25, 7, 32, 27, 18, -5, -5, -20, -1, 29, -15, -12, 3, 10, 96, 11, -12, -4, 38, -33, 6, 45, -48, 1, 4, 1, 42, -50, -56, -33, -7, -25, 42, 51, 9, -17, 127, 29, 13, 22, -4, -29, 32, -19, 25, 26, 19, -3, 29, 10, -33, -4, -17, -15, 50, -20, -11, 38, 49, -62, -84, 40, 8, 27, -57, 8, -87, 40, -57, -67, -11, 20, 74, 29, -33, 41, 26, 12, -2, 0, 45, -7, 13, -32, 32, -47, 50, -18, 49, 4, -35, -47, -19, 19, 13, -6, -17, -28, 42, -120, -14, 71, 63, 1, 6, 18, 67, -27, -127, -43, -32, -12, 54, 13, -11, -39, 55, -3, -74, 23, 22, 19, 18, 15, -9, 11, 10, -97, 70, -6, -95, -61, -46, -5, -30, -21, -54, 61, 61, 24, -10, -14, 70, 21, 8, -122, 34, 38, -29, 127, 11, -17, 5, -105, -120, -38, -1, 77, -28, 63, 85, -70, 24, -21, 26, 9, 88, 33, -21, -6, -65, 25, -49, -52, -30, -52, 45, 48, 64, 72, -25, 81, -46, 106, 8, -5, -6, 17, 16, 93, -15, -6, 87, -106, -12, 4, 29, -85, -8, -93, 1, -45, -30, 29, -21, -40, 35, 22, 22, -7, 8, -79, 31, 1, -50, 6, -78, 10, 0, 0, -14, 33, 32, 17, -19, -33, -4, 9, 4, 43, 8, -6, -11, 41, 31, 71, 3, 12, 11, 12, -31, -2, -59, -32, -21, -4, 69, 0, -19, -8, 24, 10, 51, 1, -127, 3, 8, 15, -59, 28, -40, -24, 36, -52, -5, 44, 66, 35, 25, -9, -40, 22, 2, -18, 14, -35, -8, 33, -10, 10, 11, -16, 37, -26, 25, -53, 41, -49, 42, 8, 48, 26, -25, 35, 8, -34, 25, 1, 8, -84, 14, 58, -79, -18, 6, 50, 26, -17, 66, -1, -28, 4, -81, -20, -36, -14, -16, 37, 8, 32, 32, 127, 5, -51, -37, 37, -37, -11, -8, -53, 43, -69, 63, -43, -11, -9, 101, 0, 67, -47, 66, 2, -4, -5, -5, 63, -23, 86, -13, -23, 48, -1, -25, -45, 12, -37, 5, -3, 13, -48, 8, -50, -17, 16, -15, 33, 43, 8, 9, 0, 15, -45, -23, 7, 42, 4, 26, -80, 6, -103, 7, 101, -4, -29, -62, 5, -29, -22, 26, -55, -10, 79, -37, 3, 2, 79, 21, 42, 17, 68, 84, 124, -49, -3, -15, -53, -11, -37, 5, -30, 23, -20, 107, -37, -127, 53, 41, 13, 10, 35, -51, -8, -22, -67, 2, 29, 66, 20, -28, 88, -9, 43, 16, -79, 0, -28, 10, 77, 16, -12, 24, 70, 86, 22, 26, 35, 102, 69, 11, -87, 63, -10, 9, 57, 51, 2, 26, -56, -42, -12, -94, -68, -16, 26, 127, 31, -31, -52, -5, 9, 12, -5, -66, -29, -74, -33, -61, -48, -13, 19, -29, 42, -38, 41, -24, 8, 11, 27, 0, -24, 42, -11, 37, 4, -37, 1, 42, 21, 4, -39, 12, -103, 48, -52, 17, 80, 29, 121, 64, -102, 11, 0, 11, -7, -32, -68, -101, 19, -3, 6, 18, 8, -34, 45, -2, 10, 23, -1, 13, -13, -6, 1, -58, -5, 15, -32, -13, 15, 29, 22, -116, 3, -16, -17, -97, -27, -16, -54, 9, -41, 63, -13, 8, 85, -10, 14, 43, -31, 6, -31, 10, -106, -6, -48, -6, -3, 3, 24, -24, -17, 21, -11, 64, -26, 16, -72, -7, -34, -21, 2, 38, 0, 2, 34, -50, -15, -39, -108, 24, 12, 7, -41, -9, 57, -37, -24, -127, 61, -32, -25, 23, -22, 5, 88, -12, 17, -29, -19, 37, 3, 27, 4, 22, -68, -6, 55, -28, -5, -5, -35, -27, -54, -18, -1, -127, 30, -25, -23, 34, -4, -27, -42, 16, -16, -42, 31, 11, 47, -42, 19, -30, 2, 15, 37, -26, 2, 80, 16, 98, -16, -26, 22, -1, 91, 12, -3, -13, 29, -24, -75, -3, -19, -4, -16, -17, -24, -32, 16, 23, 48, 41, -4, -57, 1, 29, 7, -62, -51, 69, 5, -22, 12, 66, 41, -59, -39, 48, -3, 52, 13, -46, 27, 21, -53, 21, 35, 35, -89, -35, -19, 18, -21, -90, 42, 65, 44, 15, 17, 40, -13, -85, 8, 21, -59, 9, -12, -60, 46, 76, -117, -72, -68, -47, 38, 39, 7, 19, -83, -1, -24, -5, -36, -52, -127, 57, -28, 0, 31, -74, 15, 10, 65, -13, -36, -74, 19, 26, -11, -99, -1, 21, 13, -35, -73, 9, -93, -34, 46, 7, -22, 17, -30, 32, -18, 1, -30, 4, -54, 9, 7, -34, 26, 98, -125, 87, 60, -35, -40, 10, 37, 21, -34, -46, 21, 79, -20, 33, 105, 48, 33, -16, 63, 12, 57, 25, -16, 23, -39, 44, 31, 38, -46, -24, 31, 21, -66, 49, -2, -53, 8, -22, -53, -25, 5, 0, 0, -25, 23, -6, 57, 15, -12, -27, -93, 42, -29, -115, -6, 109, -2, 21, 44, -39, 55, -55, 24, 127, 1, -57, 6, 12, 12, 63, 20, 6, 7, -22, -5, 54, 34, 12, 54, 0, 19, 30, -116, 37, -24, -8, 59, 18, -12, 30, -12, -18, 22, -55, -46, -60, 43, -17, -1, -26, -48, 48, -24, -58, 13, -55, -9, -90, 6, -59, -21, 13, -17, 11, 20, -25, 64, -13, -35, 35, 24, -46, -3, 5, 22, 34, -7, 67, -24, -28, -11, -62, -2, -4, -8, -33, 32, 6, 61, 56, -96, -21, 60, -6, 3, 9, -35, -13, 127, 23, 7, 13, 41, -12, 41, 16, -60, -8, -33, -38, -38, -5, -2, -27, 10, -64, -115, 22, -3, 33, -87, -13, -59, 26, 3, -49, -32, 17, -96, 35, -32, 48, 64, -28, 127, -3, -7, -54, 22, -16, -5, -7, -82, -74, 22, 35, -50, -23, 41, -30, 0, -14, 55, 11, -18, 48, 16, -49, -39, 2, 92, -24, -98, -53, 47, 9, 34, 44, -21, 16, -100, 46, -19, -54, 59, 30, -35, -35, -36, -119, 73, 62, 31, -63, 13, 32, 17, 84, -21, -64, 72, 0, -77, 41, -83, -63, 58, 77, -81, -56, -36, 23, -44, -44, 81, -9, -127, -18, 26, 28, -17, 93, 45, -17, 1, -57, -20, -42, -44, -23, -26, 43, 20, 53, -41, 15, 43, -7, -33, 13, -85, -26, -47, 37, -6, -9, -37, -105, -20, 35, -5, -81, 87, -9, 61, 20, -117, 73, 77, 103, 57, 102, 0, -77, -22, 12, -73, 14, 66, 37, -6, 9, 39, 21, 40, -11, -91, 11, -12, -27, -20, -15, -4, 111, -26, -117, 57, -15, 0, 19, -76, -4, 68, 9, -35, -4, -12, -23, 1, -56, -33, 61, -6, -97, 21, -83, -113, -117, 73, -31, -25, -15, 38, 96, 37, -15, 64, -87, -117, 0, -28, -25, -92, 8, -55, -16, -10, 78, -60, -43, -66, -39, -16, -26, 4, -54, 20, 73, 59, 114, -11, -9, -27, 3, -12, -51, -31, -18, 120, -21, -29, 46, 64, -25, 34, 40, -127, -53, -29, -93, -56, 12, -44, 16, 61, -1, -21, -70, 30, 35, 15, -4, -48, -3, -36, 6, 33, -22, -7, 12, 4, 12, 7, 16, 77, -9, 0, 21, -21, -20, 20, 37, 2, 30, 68, 3, 22, -42, -67, 1, -11, -24, 9, 20, -22, 16, 1, 1, 63, -26, 37, 70, -16, 7, -85, 11, 39, 80, -92, 21, 71, -5, 18, 83, 38, -51, -30, -34, 18, 21, -4, 82, 40, -57, 45, 17, 13, -127, -20, 29, -37, -5, 50, -2, 15, -8, 27, 7, 41, -22, 126, 25, 2, 2, -33, -1, -43, -4, 12, -4, -22, -65, 127, -10, 75, 36, -43, 33, 14, -21, 0, 15, -27, -13, 50, -47, -38, 23, -51, -8, 47, 16, 14, 58, 30, 64, -11, -26, 24, 26, -29, -15, -23, 6, 13, -16, 25, 48, 58, -18, 14, -26, -4, 30, 12, 0, -10, -12, -34, 50, -7, 30, 3, -58, 14, 62, -14, -47, -5, 12, 15, 5, 59, -13, -32, -56, 23, -39, -78, 127, 50, 25, -25, -106, 20, -65, -33, -39, 37, -27, -35, -1, -29, -21, -26, -18, -29, -34, -28, -2, -18, -7, 32, -37, 26, 12, -33, -29, 16, -43, -4, 14, 42, -35, -65, -6, 5, 68, 14, -25, 17, 6, -43, -29, -41, -20, 1, -11, 34, 58, -76, -55, 98, 47, -44, -61, -12, 14, 62, 16, 12, -71, 51, 27, -6, 49, -25, 7, 24, -9, -32, 43, 78, -18, 6, 64, -30, -127, 16, 21, 60, 19, 49, -74, 23, 20, 45, -16, -40, -30, 26, 21, -34, 25, -17, -9, -38, 1, -27, -14, -19, 112, 35, -25, 8, 59, -73, -5, 19, 8, 8, 59, 69, -15, -37, 40, 27, 13, 44, 5, 65, 40, 90, -62, -60, -37, -3, -101, 37, -50, 34, -51, -8, 1, 37, 1, 49, -28, -32, 56, 84, -42, 22, -2, 29, 51, 19, -71, -66, 16, -37, 80, -36, 13, -23, -17, -66, 57, -115, 12, 34, -45, 29, 24, -39, -40, -31, -10, -18, 37, -84, -33, -43, -14, 48, 3, -2, 50, 46, 17, -11, 16, 9, 25, -9, -62, -48, 35, 78, -24, 6, -7, -7, 26, 5, 21, 22, 9, 127, -16, 0, -17, -8, 10, -34, 18, -30, -104, -36, 13, 32, -7, 20, -50, 21, 58, 34, -7, -28, 18, 8, -33, -8, -4, -40, 29, 3, 53, -51, -76, -61, 74, 39, 1, 74, -63, -32, -14, -2, 11, -13, -37, 0, 22, -25, 32, -18, -40, -42, 1, -52, -9, 92, -23, 8, -18, 25, -75, 97, -39, 2, -20, -68, 11, -9, -41, -62, -27, 34, -21, -36, 46, 71, -17, 4, 8, 2, -24, -22, -6, 45, -20, -7, -41, 73, 47, 0, 96, -41, -14, -127, 27, 11, -126, -10, 42, -29, 44, 0, -8, 33, 9, -17, -2, 64, 10, -32, 8, 3, -94, 24, -18, 41, -48, 88, -10, -11, -26, -21, -25, 2, 47, -24, -39, -33, 19, 34, -6, -55, 74, -35, -18, -71, -5, -24, 68, 1, -39, -14, -13, 31, 70, 34, -38, 67, -22, 65, 48, -27, -80, 12, 76, -30, -21, -12, 23, -65, 57, -29, 26, 74, -35, -8, -32, 31, 7, 17, 36, -24, -51, -6, 57, 6, 53, -57, -17, -27, -28, -11, -1, 5, 7, -53, -127, -12, -33, -82, -48, 46, -9, -12, -10, 18, -56, -3, -4, 29, 11, 33, -41, -16, 25, 1, 13, -23, 42, -51, 58, -48, 22, -25, 46, -5, -12, -9, -6, 22, 3, 12, 2, -127, 48, -57, -48, -11, 12, -28, 9, 5, 18, 47, -42, -6, -68, -8, 40, -32, -6, 35, 33, -3, -11, -45, -23, 18, 72, -53, -26, -28, 31, -2, -43, -5, 7, -68, 13, 28, -24, 4, -8, -16, 14, -40, 51, 8, -34, 31, -27, 38, 23, 9, -16, 38, -59, -40, 12, -14, 0, -15, -9, -29, -47, -37, 18, -9, 79, -127, 2, 44, 55, -22, 80, 77, 53, -13, -2, 13, -26, -80, -9, 6, 4, -54, 6, -21, -6, 7, -44, -37, 4, -4, 30, -64, 64, -65, 19, -27, 50, -32, 13, -80, 1, 18, -12, -95, -11, -15, 44, -14, 25, 118, -52, 36, 3, -9, 1, -18, 23, -58, -30, 5, 35, 74, -44, 15, 82, -17, -40, 44, 42, -36, -35, -23, 15, 4, -31, -9, 12, 0, -16, -28, -13, 5, 0, -7, 12, -25, 41, -34, 7, 10, 6, 8, -40, 4, 24, -12, 18, 105, -22, 41, 9, 0, 4, -32, -17, 1, -4, -127, 69, 72, -34, -46, 0, -3, 13, -10, 8, 3, -29, 9, 28, 10, -13, 22, 28, -21, 7, 7, 20, 3, 8, -40, 1, 33, 78, 33, 4, -31, -8, -32, 37, 46, 18, 7, -50, -25, 0, -41, -7, -18, -36, -12, -9, 51, 13, 2, 5, 56, 9, -42, -4, -2, -5, -33, -5, -8, -12, -22, 38, 34, -12, -51, -10, -28, -7, -18, 8, -77, 99, 25, -39, -15, -32, 80, 26, 36, 2, -4, -1, 44, -40, -1, 20, -19, -51, 9, 14, -30, -19, -13, -21, 30, -18, 15, -35, 17, -49, 86, 41, 114, -1, -40, 37, -17, -4, -6, -12, -25, 0, -36, -62, 51, 59, -33, 56, 17, -127, 3, 41, -42, -6, 87, 22, -40, 71, 14, -15, 7, -112, -44, -10, -5, -36, 2, -11, 64, 0, -5, 16, 13, 85, -51, -7, 13, 16, 23, -26, 13, -78, 1, 23, 32, -5, 16, -9, 27, 43, -38, 22, -9, -79, 22, 25, 1, -41, -24, 17, 16, 7, -15, 5, -27, -16, -18, -40, 0, 0, -2, -2, -75, 59, 10, 5, 23, 10, -47, 27, 21, 127, 14, 28, -19, 42, 14, -13, 23, -47, -61, -8, 55, -2, 37, 34, -98, -81, -31, 64, 20, 1, 35, 46, 9, -36, -9, 18, 55, -51, -16, 103, -45, -13, 14, -30, -18, 13, 1, -38, 27, -8, 83, -23, -55, -1, -19, 1, -16, -93, 3, -19, -15, 18, 9, 20, 5, 42, -44, -34, 58, 28, -3, 9, 20, 33, 13, -1, -12, -17, -51, 45, -29, -7, 32, 78, -28, 16, -23, 21, -9, 8, -62, -28, -33, 22, 13, -28, 14, -8, -8, -64, 127, 9, -66, -15, -97, -109, 52, 23, -56, 52, -12, -32, 17, -52, -46, -11, -87, 65, 37, 16, 30, 86, 41, 37, -28, -59, -17, -119, 7, -60, 14, 27, -92, 44, 97, -42, 59, -31, -32, 98, -18, -11, 56, -37, -73, -30, -30, -121, -18, 33, -86, 16, 14, 27, -13, 21, 36, 2, 20, 95, 66, 127, -33, -38, 54, 19, 71, 12, 61, 80, -50, 57, 125, -5, 88, 23, 28, 30, 51, -61, -43, 18, 15, 28, -44, 19, 10, -79, -58, 75, 25, -54, -32, 24, -9, 78, 37, -48, 25, 8, -25, 116, -2, 6, 27, 12, -35, 3, -67, 20, 19, 48, 43, -52, -16, -15, -27, 11, -31, 16, 8, 40, -8, -7, 48, 31, 25, 41, -10, -9, -46, -81, 18, 43, 13, -40, 31, -45, -81, 5, -113, -29, -15, 52, -36, -11, -21, 43, 10, 17, -14, 127, 62, 24, -58, 47, -11, -5, 43, 32, -59, 54, 58, 31, -20, -70, -22, 71, -21, -28, -3, 8, 37, -68, -74, 10, -67, -51, 8, 68, 35, 80, 18, -11, 34, 115, -7, -58, -41, 40, 65, 59, -69, -61, 19, -39, 13, 65, -31, 50, -15, 110, -79, -19, -49, -13, -75, -31, 5, 11, 4, 42, 5, -45, -32, 49, -17, 79, -59, 7, 44, -1, -87, 15, 44, 36, 19, -15, -103, 59, -41, 57, 48, -120, 25, -2, 9, -44, 127, 30, -59, 18, 95, 9, -61, 29, -2, 26, 26, 22, -11, -3, -14, 40, 24, -2, 15, -39, 50, -41, -14, -4, 34, 6, 50, -8, -29, 42, -17, -4, -21, -54, 2, 64, -1, -20, -43, -4, 7, 43, 5, -25, 28, -14, 0, 28, 70, -127, 76, -18, -5, 11, -21, 46, -18, 10, 36, -32, 40, 27, -13, 3, -6, -32, 38, 4, -3, 31, 33, 20, 13, -26, -13, 89, 11, -3, 83, 31, -44, -21, -8, 40, 33, 37, -20, 3, -22, 10, -23, 15, 20, 28, 14, 15, 33, 36, -55, -26, -46, 27, -3, -8, -26, -27, -85, 26, 24, -41, -34, 9, 12, -3, -28, 28, -44, 14, 2, 13, -10, -39, -50, -55, -1, -21, 39, 127, 29, 22, -67, -5, 78, -5, 35, 36, -1, 73, -6, 81, -17, -22, 100, 24, 9, 13, 42, -37, -11, 4, -17, 90, 25, -44, 8, 0, 34, -2, 2, 31, 23, -17, 28, -34, -4, 29, -76, 14, -12, -53, -93, 25, 16, -27, 17, 45, 38, 4, 67, -11, 39, -9, -15, 104, -30, 43, 59, -21, -24, 11, -35, 56, -23, 56, -41, 34, 12, -21, 54, 34, -8, 46, -19, -3, -53, -40, -30, -2, 42, -19, 34, -30, 36, -63, 52, -84, -54, 89, -2, -83, -14, -16, -51, -54, -28, -127, -24, 10, -24, -72, -63, -4, 16, -65, 37, 30, -32, -20, 11, 30, 25, -15, 37, 34, 3, -6, 14, 35, 9, -5, 18, -35, -11, -14, 42, 34, 30, -69, 17, 46, -31, 42, 63, -43, 40, -43, 5, -12, 17, -38, 93, 26, 10, 57, -44, 13, -14, 24, 31, 15, 6, 25, 51, -15, 3, 27, 0, 33, -3, -53, -80, 26, -40, 0, 100, 24, 12, 28, -38, 18, -36, -30, 95, -32, 18, -75, -1, 91, 6, 1, -1, -78, -36, 80, -25, 25, 5, -26, -6, 63, -1, -38, 17, -88, -127, 54, -38, 0, -16, 7, -10, 17, 10, -30, 10, -2, -2, -11, -127, 53, 6, 24, -4, 58, 60, -6, 14, -51, 34, -42, 24, -28, 6, 21, -41, -20, 6, 18, 5, -19, 20, 51, -28, -32, 3, 69, 14, -49, -30, 44, -85, 18, -69, 3, 53, 5, 14, -15, -41, 64, -9, 9, 51, -26, 46, 9, 18, 0, 13, -7, -21, 19, 4, 43, 97, -15, 6, 26, -87, 20, 32, 32, 50, -14, -26, -6, -31, -48, -22, 13, -9, 13, 15, -2, 28, 14, -9, -2, 2, -34, 30, 38, 45, 76, 40, 13, -7, -14, -15, 8, 43, 49, -17, 18, -22, 15, -25, 2, 32, 3, 30, 4, -22, 114, 22, -25, -23, 17, -22, 28, 1, 20, -36, 12, 0, 31, -72, -1, 32, -14, -31, -27, 127, 48, -65, -31, 37, -22, 4, -45, -25, 6, -3, -11, 20, -71, 16, 31, -27, -17, 58, -8, -22, 50, 36, 9, -16, 5, 15, -8, -55, 2, -13, 6, -21, -3, 35, 43, -127, 36, 2, 6, -45, 18, 22, 3, -15, -26, -27, 23, 41, -8, 37, 21, 36, -14, 19, 1, -44, -19, -25, 11, 27, 7, -38, 27, -14, -21, -2, 41, -23, 10, -10, 4, 4, -28, 18, -7, -63, 72, 26, 39, -3, -5, -2, 52, -17, 15, 13, 11, -33, 22, 2, 3, 65, 13, -22, -17, -39, 16, 20, 8, 33, 3, 23, -28, -31, 3, -5, -16, -22, -31, 38, 38, 8, 1, 17, -10, 41, 17, 65, 7, -29, -30, 8, 4, -11, 17, 11, -18, -19, 10, 1, 7, -19, 14, -16, -1, 23, -26, 10, 22, -24, -7, 28, 58, -17, -22, -33, 18, 7, 0, -1, -22, -44, 18, -22, 29, 12, -87, -17, -16, 70, -29, -7, 127, 9, -31, 21, 7, -14, 25, -33, -18, 11, -6, 26, -33, -16, -27, -21, -11, -23, 29, -44, -14, -87, 47, 7, 2, 77, -8, -24, 127, -23, 18, -27, 35, 32, -14, -1, -10, -66, 1, 33, -33, 14, 5, -86, -1, -59, 8, 19, -94, -8, 37, -36, 6, 36, 49, 27, 67, -16, 24, 16, 10, -19, -47, -62, 26, 122, 19, 25, -3, 38, -12, 33, 0, 33, -83, -87, 36, 96, -42, -15, 121, -18, -92, -20, 2, 35, -6, -89, -89, 6, 16, 7, 7, -33, 61, -15, 47, 24, -83, 25, 7, -48, -14, -3, 38, -79, 3, -42, -50, -8, 8, -30, 45, 67, 20, -12, 37, 54, -57, 33, -37, -23, -18, -36, 12, -41, -15, -3, -13, -19, -64, 28, -6, -52, -56, -15, 5, -52, 43, 24, 76, 25, -41, 12, -6, -43, -48, -77, -32, -38, 84, 0, 127, -12, -38, 47, 0, 17, -7, 20, 57, -54, -29, -45, -3, -36, 36, -50, -19, -2, -35, 38, -58, 20, -59, -35, -48, 14, 27, -23, -18, 63, -21, 30, 9, -28, 16, 1, 114, 32, 9, -18, -10, -30, 5, 51, 44, -5, 28, -65, 40, 3, 7, 2, -13, 24, 21, 0, -2, -21, -5, 18, 13, -58, 4, -3, -28, -21, -24, -15, 34, -7, -5, -22, 6, 37, 16, 66, -7, -26, 22, -25, -45, 5, -19, 51, -18, 9, 25, 23, -36, 16, 39, -17, -15, 36, -35, 20, 127, -5, -6, 10, 26, -13, 69, 14, -43, 5, -50, 29, -25, -10, 62, 54, 15, 44, 23, 63, -53, -46, 27, 36, 65, -41, 57, -8, 73, -15, 79, 37, -78, 42, -14, -66, -78, -25, -127, 6, 3, 4, 88, 6, -6, 56, -98, 12, 28, -65, -99, -40, 112, -5, -60, 10, -8, -120, 7, -59, 7, 25, 16, -23, -40, -78, 59, 17, -44, 20, 15, 35, -8, 21, 33, 91, -39, 37, 9, -55, 66, 113, 19, -56, 29, -52, -18, 4, -12, 0, -22, -14, 11, -64, -49, -98, 31, 21, -1, -45, -53, 35, -6, -12, -9, -71, -6, 48, -4, 55, 29, 34, 6, 5, 8, 67, 49, 127, 39, -13, -2, 1, -41, -52, 29, 0, 26, -82, 37, -47, -25, -43, 23, 2, -32, -27, 34, 24, -15, -75, 53, 6, 36, 18, 3, 70, 21, 8, 14, 7, -63, -28, 5, 11, -8, -60, 18, -7, -16, 30, 40, 31, 14, 61, 14, -108, 3, 46, 43, 29, 49, 5, 20, -45, 48, 25, 20, 13, -16, -2, -52, 29, -34, -7, -42, 49, 55, -38, -10, -122, -9, -3, -35, 0, 36, -27, 123, -83, -25, -68, 73, 4, -86, -38, -71, 74, 52, 40, -25, -72, 11, 78, -34, -25, -6, 90, 56, -51, -78, -92, 94, 2, 113, -64, 73, -92, -84, 33, 48, 25, 17, -12, 113, 6, -51, 21, 94, -45, -12, -51, -17, 17, -102, 54, -111, -73, -25, -2, -31, 3, 20, -81, 127, 127, 23, 16, 35, 55, -45, 30, 18, 0, -10, 20, 2, -21, -6, -55, 18, 26, -116, 63, 9, -18, 24, 15, 1, -45, -12, 76, -2, -27, -17, -13, 2, -35, -11, -4, -49, 40, -55, 23, 4, 24, 41, -19, -16, -40, 19, -81, 13, -27, -1, -112, -14, -29, 5, -15, -8, 77, -4, -10, 70, 3, -22, -54, 19, 30, -9, -48, 56, -22, 32, 20, -39, 6, -10, -10, 7, -106, -14, 76, -14, 63, 32, -50, -117, -22, -52, 88, 4, 6, 7, 23, -23, -23, 9, -20, -53, -127, -2, 20, 42, 83, 20, -6, 16, -40, -7, -37, 18, -33, 12, -12, -10, 62, -53, -6, -7, 37, -22, 73, -38, -18, 52, -56, 34, -89, -18, -9, 79, -95, 46, -84, -14, 58, 6, 5, 61, 60, 16, -18, 27, -17, 99, -23, 12, -21, 5, 9, -57, 4, 13, -42, -46, -88, -1, 18, 2, -52, -23, 74, 117, 33, 2, -32, -10, -36, -52, -5, 16, -1, -38, 4, 15, 13, -18, -34, -36, -21, -7, -98, 44, 13, -17, -73, 48, 14, 66, 32, 16, -19, -30, -16, -18, -26, 15, 20, -22, 30, -10, -33, 8, 14, -11, -55, -6, -9, -94, -25, 43, 21, 62, -47, 25, -8, -28, 88, 29, 25, 41, 34, -21, -12, 29, 29, 7, 42, 23, -13, 127, -32, -2, 23, 84, 8, 33, 28, 18, 62, -29, 43, 11, 32, 14, -91, -79, -36, -89, 8, -78, -88, 30, 48, -127, 26, -2, -8, 52, -32, 22, -56, 29, -13, -20, -122, 68, 7, 24, -35, 86, 0, -55, -9, 56, -65, -12, -18, 5, -38, -28, 14, 55, 19, 27, 61, 8, -74, -19, -37, 26, -25, 82, -66, 62, -23, -21, 54, -8, -29, 41, 51, -3, -14, -47, 11, 19, 87, -15, -28, 102, -19, -94, 7, 64, 9, 95, 0, -57, -24, -12, 0, -17, -23, -1, 35, -27, -4, 1, -33, 33, 22, 1, 38, -17, 21, 10, -36, 10, 19, 52, -65, -59, 2, -12, -25, -19, 19, -35, 29, 59, 7, 3, 7, -4, -9, 26, -39, 14, -2, -13, -17, 4, -33, 19, -29, 36, 43, -10, 50, 14, -66, -29, -36, -4, -22, -4, -5, 41, -127, 15, 66, 53, -17, 17, -33, -2, 23, 70, 5, -26, 39, 1, -6, -31, -24, -54, -50, 35, -7, -25, 102, 13, -40, 18, 69, 70, -47, 82, -64, -21, -12, 37, 23, -1, 19, 45, -11, -13, 89, 26, 27, 44, 2, -95, 31, 43, 99, 96, -13, -20, -97, 48, 0, -60, 47, -82, 49, 47, 33, -6, -7, -122, -118, 86, 31, 30, 77, -13, 49, 49, -26, -18, -51, 66, 53, -47, 92, 97, 68, -14, 16, -56, -62, 9, -127, 19, 24, 10, -8, -26, -24, -16, 48, 35, -17, -5, -48, -56, -68, -121, -16, 19, 25, 11, 57, 1, 24, 14, -8, 9, 36, 16, 16, -27, 113, -21, -20, -31, 5, 36, -33, -37, 25, -71, -31, -17, 45, 47, -4, -49, -8, 65, -12, 30, 14, 12, -15, 21, -16, 72, 53, -37, -34, 19, 54, -62, 56, 8, 11, 25, 20, 11, -26, 34, -8, -67, -38, 44, 60, -24, -37, -73, 52, 0, -2, 6, 68, 23, -7, -9, -84, -29, 20, 15, 127, -36, -32, -59, -13, 32, -7, 44, -76, 21, -40, 11, 3, -58, 10, -87, 60, -6, -44, -30, 62, 34, -19, 23, -42, -15, 11, -29, -40, 34, 6, 39, -81, 35, 46, -4, 83, 35, 14, 42, 57, -20, 67, 26, 58, 3, -6, -22, -45, -30, 12, 47, -5, -27, -25, -18, 36, 20, 51, 71, 15, -45, -9, -41, 79, -25, -16, 127, -51, 34, -9, -9, 13, 63, -55, -83, -5, 58, 12, 46, -25, -98, 27, 52, -42, 8, 11, 64, -50, -10, 35, -42, 9, 0, 17, -15, 22, -3, -48, -50, -35, 56, -40, -11, 5, -64, 55, -3, -10, 2, 3, 9, -42, 29, 64, 57, 39, 3, -16, -39, 21, -58, 20, -64, 10, 6, 7, 8, 17, 14, -11, 8, 60, 25, 5, 16, -41, 74, -70, -69, 11, 27, 11, 59, 80, 29, -32, -48, -21, 36, -42, -9, -107, -33, -31, -51, -30, 44, -4, -21, 4, -16, 9, -44, 31, 26, 127, -76, 0, -15, 17, -1, 67, 36, 19, -22, 46, -25, 16, 43, 127, -51, -81, -3, -24, 41, -35, 44, 1, 17, 18, 107, 6, -56, 9, 6, 15, 23, -23, 14, 11, -21, -18, 28, 43, -61, 19, 8, 99, -6, 33, 25, -5, -64, -12, -25, -72, -48, -16, -22, 13, -58, -48, -28, 97, 26, -95, -82, 14, 1, 26, -5, 83, 38, -50, 73, 83, -25, 17, 18, -46, -60, -51, -13, -50, 28, -46, -54, -63, 24, -13, -127, 0, -37, 6, -16, -13, 16, 4, 34, 31, -43, 24, -3, 33, 3, 20, 27, 13, 19, 33, -14, -63, 30, 21, 17, 27, 18, 1, -16, 7, -29, -50, 6, -27, -27, -11, -28, 37, 13, -15, 8, -1, -31, -25, -4, 13, -1, -2, -51, -56, -54, -18, -2, -67, -16, 27, 25, 38, 20, -37, -9, 9, 1, -43, 53, -19, -32, 61, 52, 40, -23, 31, 5, -110, 61, -69, -1, -14, -17, -4, 81, 54, -30, -21, 17, -9, -11, -16, 2, 29, -32, 126, 36, -20, 37, 44, -13, -18, -5, 75, 21, -3, -49, 7, 63, 8, 28, 2, 3, -56, -21, 0, -35, -31, 48, 52, -78, 7, -41, 42, -27, -127, 16, 56, 39, 9, -1, -17, 62, 3, -20, 8, 11, -45, 17, -22, -44, -74, 19, -27, -63, -23, -33, 3, 14, 41, -13, -22, 74, 6, -36, -13, -40, 70, -4, -36, 20, -13, 38, 30, -15, -38, -39, -12, -10, 10, 2, 5, -7, -2, 29, 6, 19, 2, -18, -25, -12, 9, -15, 5, 1, -6, 12, 32, 19, 7, -6, -6, 9, -1, 17, -11, 9, 10, 75, -17, 10, -5, 26, -7, 15, 1, -33, 8, 5, -14, -9, -4, -30, -14, 16, -1, 5, -15, -28, 26, -7, 2, 51, 3, 4, -10, -8, -1, 1, 127, 26, 17, -22, 8, 17, -15, 31, -7, -5, -2, 11, 51, -8, -21, -9, 19, -16, 5, 29, -2, -1, 2, -29, 127, -23, -26, -3, 33, -66, -70, -27, 21, 15, -17, 35, -32, 18, -35, -20, 31, 13, -8, -25, -15, -8, -12, -22, -14, 14, -19, -24, -16, 56, -38, -4, 3, -15, 47, 17, 0, -32, 28, -3, 50, -20, 26, -31, -54, -11, -61, 3, -26, -30, -38, -14, -23, -78, 24, -21, -101, 8, -9, 6, -21, -28, -22, 4, -16, 39, -3, 0, -10, 51, -64, 20, -53, -67, 72, 79, 5, -30, -9, -48, 40, -37, -3, -10, 10, 22, -127, -38, -45, 27, 19, 64, -4, 1, -20, 6, -31, 4, 32, 90, -86, -127, 14, 37, -17, 29, -6, 40, -7, 32, -45, 3, -50, -23, -70, 0, 19, 122, -78, 43, 46, -25, 123, 53, 39, 32, -16, 43, -77, 25, 23, -58, 3, 47, -47, 96, -12, -89, 11, -81, 11, 56, -6, -11, 0, 19, -25, 39, -6, 15, -35, -4, -95, -20, -2, 0, 17, -33, 24, 4, 70, -39, 43, -1, 3, -54, 39, -27, 38, 27, -14, 30, -26, 38, 89, 14, 21, 7, -39, -3, 13, 5, -11, 22, -110, 63, 52, -33, 53, 2, -4, 73, -34, 7, 19, -57, 121, -28, -52, -57, 12, 34, 60, -51, 123, 127, -17, -39, 88, 14, -56, -20, 13, -7, 14, -4, 1, 21, -35, 8, -34, 18, -45, 57, -10, 62, -39, -8, 43, -37, -2, 10, 8, -15, -15, -32, 41, 90, 51, -19, -17, 67, -50, 60, 13, 43, -15, -17, -8, -27, 25, -31, -28, -13, 38, 127, -77, 11, -19, 3, -81, 49, -51, -6, 91, -17, -71, 34, -43, 0, -71, 56, 5, 9, -7, 58, -61, 20, 27, 47, -72, -5, -60, 56, 17, -66, -36, -20, -59, 79, 20, 25, -78, 22, -11, 39, 102, -16, -7, -32, 32, 14, -42, 61, 22, -47, -20, 2, -61, 1, 76, -91, -18, -26, 15, -24, -14, -32, 1, -35, -61, -9, -36, 30, 24, 11, 10, 49, 20, -52, 0, 29, -64, 1, -41, -60, 32, 127, -34, 43, 3, 70, -28, 23, -19, 26, -7, -30, -65, -54, -27, -34, -8, -12, -14, -26, -32, 39, -107, 40, -76, -80, 17, 33, 42, 27, -35, -9, 55, 33, -27, -7, -27, 25, -15, -46, 11, 23, -14, 26, -35, 79, 65, 20, 57, 30, -85, -20, 12, 36, 14, -48, 38, -22, 40, 21, -16, -41, -37, -2, 77, 41, 18, 24, -78, -46, -7, -40, 29, -35, -18, -24, -8, -62, -50, 2, -14, -13, -28, -37, 50, 19, -6, 36, 5, -91, -19, 57, 28, 39, -29, -101, -65, -26, 11, -21, 15, 35, 42, -43, 29, 26, 45, -8, -127, -30, -42, 36, -33, 17, -49, -47, 47, 2, 10, 7, -14, 22, 14, 11, -48, 31, 19, 17, -33, 42, -38, -50, 20, 2, -79, 50, -44, -47, -20, -8, 11, 73, 24, 100, -4, -70, 32, 53, -61, 27, 55, 13, -17, 80, 23, 21, 21, 4, -15, -6, -7, 14, -11, -23, -49, 22, -11, 19, -17, 35, 25, 16, 38, -7, 38, -55, 2, 37, 20, 35, 1, 5, -9, 28, -94, 13, 13, -57, 25, 5, -19, -14, 29, 30, 66, -2, -62, -25, 8, 15, -37, -36, -62, 48, 127, -25, 20, -21, 57, 61, -7, 49, -36, 37, 13, 28, -13, -10, -1, 83, 36, -32, -13, 8, 18, 11, -8, -22, 10, 33, -40, 7, -31, 36, -40, 43, -20, 3, -13, -13, -57, -41, 19, -44, -37, -48, 5, 10, -59, 27, -13, 29, -23, 14, -45, -16, 9, -62, -43, -8, 21, 127, -15, 0, -8, -27, 69, 57, 28, -1, 3, 34, -35, -53, 6, -29, -54, -16, -56, 28, 14, -86, -3, -70, 1, 36, -34, 14, 58, -42, 5, -26, -51, -2, 34, 102, 17, 7, -40, -71, 5, -7, -54, -41, 1, 60, -60, -39, -7, -55, 46, -44, -33, -1, 24, 19, -30, -20, 20, 29, 72, 20, 3, 41, 93, 36, 99, -39, 38, -13, 17, -3, 24, -27, 22, 30, 34, -13, -4, 15, 3, 17, -8, -20, -20, -19, 1, -39, 54, -12, -19, 127, 1, 32, 21, 19, -59, 9, -54, -75, -3, 60, 47, -27, -10, -95, -24, -11, -8, 82, -38, 5, -20, -84, -1, 46, 27, 25, -43, -58, 4, 7, 11, 68, -16, -23, -20, 37, -10, -55, 72, -34, 38, -17, 30, -14, 67, -17, -3, -34, -9, -38, 9, -23, 46, 86, 6, -32, -1, -28, 25, -50, -13, 46, 43, -9, -10, -46, -9, 35, 73, -80, 127, -44, -57, 20, -19, -15, -41, -15, -24, 51, -1, -13, -3, 29, 15, 29, 15, -39, -6, -8, -13, 35, -7, -45, -6, 21, -5, -7, -20, 8, 38, -3, 27, 12, -70, 48, 19, 64, 20, -31, 42, -79, 8, -27, -33, 98, 67, 48, -28, -14, 19, 53, -2, -46, -12, 59, 96, 64, 48, -48, 25, -85, 48, 38, 25, -68, 53, 106, -35, -13, -67, 20, -127, 24, 9, 12, 9, 7, -27, -31, -93, 64, 19, -113, 7, 5, -65, -51, 34, -49, -30, 58, -35, 6, -55, -82, -41, 5, 13, -115, 10, 12, -36, 25, 41, 43, -73, 31, -71, 87, -44, -7, 37, -31, -37, 48, 28, -49, -10, 75, -25, 16, -45, -78, 74, 65, -10, -5, -45, 16, 4, 15, 57, 48, -30, -56, 113, 41, -63, -24, 80, 82, 12, 2, -34, -23, -6, -25, 16, 37, 48, 7, 12, 9, -42, 82, 104, -19, 37, 31, -33, 125, -69, -62, -39, -4, -8, 16, 18, -3, 2, -102, -32, 9, -1, 43, 39, -5, 6, -7, 102, 24, 51, 29, 75, 30, -47, -127, -115, 37, -50, 33, 75, -51, -9, -50, 53, -66, -31, 2, -18, -37, 11, -25, -22, 36, 36, 18, -59, -26, 37, -46, -15, -34, -76, 20, -37, -72, 8, 127, -1, 22, 11, 28, 32, -5, 11, -87, 12, -68, -20, -18, 8, -2, -9, -25, -35, -31, 3, 35, -123, 11, 24, -97, 35, 14, -39, -27, -58, 12, 94, 18, 38, 43, 38, -9, -4, -30, 30, 11, 7, 2, -54, -14, -28, -39, 26, 27, 10, -54, -8, 52, 73, -93, -27, 7, -49, -127, -5, 43, 8, 73, 63, -10, -57, 10, -57, -27, 61, 7, -24, 5, -1, -14, -69, -2, -2, 31, 4, 33, 3, 33, 8, 33, -34, 23, 57, -8, 45, 14, 11, -26, 66, 69, -39, -11, 1, 3, -20, -39, 76, 18, 12, 9, 28, -76, -1, -34, 37, 17, -75, -10, -32, 44, -25, -4, -5, -86, -51, -15, 73, 1, -14, -20, -29, 27, 13, 32, -87, 106, -89, 24, 29, 36, -18, -39, 17, -51, 27, -22, -52, -4, -56, -4, 23, 0, 20, 62, -16, 29, 12, -36, 15, -39, -59, 55, -60, -79, 63, 58, -31, -32, 2, 15, -23, 69, 16, -73, 20, 42, -2, -65, -11, -29, 4, -2, -95, -36, 19, 92, -47, -9, -52, -19, 22, 50, 65, -31, -71, 62, 35, 25, 30, 43, 25, -34, -30, -14, 53, 127, 2, 1, 27, -48, 25, -2, 52, 81, -122, -6, -80, -18, 10, 52, -2, 60, -23, -115, -1, 10, 16, 29, 61, 21, -10, 47, 22, -72, -59, -27, 4, 47, 23, 6, -24, 0, 41, 77, -20, 14, -80, 47, 24, 28, -17, 39, -6, 19, 37, 23, -5, -28, 38, 14, 2, 51, -4, -30, 34, -20, 41, 14, 71, -107, -35, 50, -48, -11, 15, 28, -2, -89, 64, 49, 53, 5, 57, 127, 10, -38, -49, 82, 45, 83, 47, 29, 30, 23, 87, 67, 68, 36, -11, 103, -41, -79, 4, -70, -32, 20, 56, -9, 7, -77, 0, 38, 39, -36, -36, 34, -52, 69, 127, 10, -16, 21, -6, 92, 18, 3, 14, 77, 63, 54, -79, 26, 31, -37, 38, -6, 29, 21, 27, 57, -30, -20, -67, -37, 27, -33, 9, -14, -43, 61, 97, -48, -32, -35, -19, -23, -50, 28, -2, 10, 59, 30, 12, 35, -26, -20, 71, 46, 13, -22, 19, -42, 63, 28, -92, -3, -23, 61, 27, -53, -11, -127, -8, -8, 22, 33, 34, 22, 84, 6, 7, 79, 93, -6, -35, 18, 23, 23, 25, 33, -37, -3, 51, 54, -31, 38, -16, -7, -16, 12, -45, 3, -15, 25, -2, -9, -13, 29, 1, 48, -26, -17, -4, 58, -65, -21, -65, -6, -36, -38, -12, -4, -19, -45, -26, -18, -8, 38, -32, 32, -16, 101, 34, 40, 81, 36, 25, 2, 28, -47, -37, 35, 31, 25, 15, 35, -36, -37, 1, -30, 98, 18, 6, -11, 38, -10, -68, -3, 72, 5, 13, -42, -48, -29, 16, -84, 65, -20, -1, -42, 103, -21, -38, -35, -50, 73, -5, -10, 78, 0, -105, 41, -24, -66, -37, 52, -49, 55, 16, 7, -64, -50, -37, -1, -8, 38, 0, -33, 70, -31, 58, 12, -127, -53, 29, -5, 26, 36, -52, -28, 104, 0, -23, 4, 18, 0, 9, 38, -8, 10, -41, -74, -76, -2, -57, 17, -15, -101, -35, 6, 11, 16, 19, -23, 30, -46, -32, 13, -40, 48, -10, 42, 114, 34, -26, -16, -70, -12, -14, -127, 90, -34, -7, 76, -32, -26, 62, -33, 113, -20, -64, -20, -82, 85, 7, -2, -79, -23, -69, -48, -40, 31, -49, 67, -12, -3, -35, -1, 40, 3, 17, -33, 22, 72, -30, 0, 30, -1, 79, -50, -4, 12, -43, 22, 55, -71, 56, 32, -85, -14, 89, 13, -46, 21, 11, 43, -27, 11, 6, -80, -6, 2, -9, -3, -2, -31, 4, -17, -2, 11, -30, 31, -25, 42, 22, 33, 19, -37, -31, 27, -42, 17, 4, -3, -49, -14, -14, -19, 5, -14, -20, -5, 14, 24, 1, 17, -69, -10, 27, 16, -9, 37, -12, -11, -68, -3, -127, -4, -15, 2, -12, -21, 46, -14, -37, -13, -8, 6, -12, -23, 10, 9, 26, -19, 5, 7, -8, 12, -10, 24, 14, 45, -25, 29, -23, -16, -17, -20, 17, -56, 23, -5, 40, 32, 12, -28, 75, -22, -32, 63, -52, 21, -17, 52, 7, -23, -6, -21, -5, 1, 19, -38, -20, 16, -4, -5, -32, 2, 16, -69, 3, -53, -26, 91, -47, -9, -10, -16, 13, 10, -108, 39, -37, -6, -19, -36, 52, -42, 3, -127, 93, -46, -20, 5, 1, -34, 35, 37, 41, 27, 11, 68, -28, -74, 2, -1, -61, 30, 18, 47, -49, -37, 24, 13, 18, 26, -11, -7, 15, -9, -22, -87, -33, 56, -13, 42, -63, 18, 42, -56, 55, -76, -15, -27, -50, -14, -6, 7, -63, -26, -18, 34, 10, -4, 75, -44, 12, 29, -13, 37, 5, -68, -6, 66, -5, -6, 19, 6, 16, -10, 41, 22, 64, -7, -27, -31, -10, -31, 19, -5, -6, 9, -121, 67, -27, 32, 15, -61, -32, 3, 57, 47, 47, -54, -127, -12, -24, -64, 18, -22, -72, -5, 5, 45, 62, 2, -29, -55, -92, 53, 32, -62, 7, 107, -13, 11, 39, -97, 28, -48, 91, 111, -82, 40, -73, 49, -127, -38, 41, -32, 10, 31, 23, -31, -72, 75, 47, -67, -59, -43, 4, -12, 13, -12, -63, 58, 7, 44, -38, -30, 52, 25, 5, 1, 37, 49, 52, -105, -5, -17, 21, 74, 76, 10, -20, 73, 3, -16, 22, -122, -40, -14, -3, 60, -21, 11, -41, 19, 53, -9, 1, -12, 27, 2, 17, 15, 26, -20, 14, -28, -41, 52, -32, 87, 10, 2, -8, 5, 97, -47, -40, -2, 54, -38, -44, -1, -8, -26, -36, -23, -20, 19, 47, 64, 12, 5, 37, -16, 31, -4, -7, -28, 5, 127, 29, -64, -8, 77, 3, -38, 24, 0, 93, -12, -29, -58, -3, 15, 4, -57, 14, -9, -36, 20, 10, -4, 29, -26, 53, -24, -14, 20, -9, -53, -55, -105, -10, 28, -97, -37, 0, 8, -44, 17, 56, -15, -78, 2, 23, 49, -17, 15, 126, -98, 53, 16, -6, 103, 127, 25, 63, 64, 30, 9, -5, 43, -71, -32, 30, -19, -90, 31, 9, 61, 42, -46, -21, 5, 7, 43, -16, -41, -37, -80, -3, 73, 15, -20, -24, 49, -118, 34, 32, -71, 34, 24, -40, 37, 1, -93, -12, -26, -32, 6, -61, -13, -76, 17, 60, -4, -13, -87, 68, -19, -25, 57, -38, 8, 97, 95, -17, 121, 54, 24, -12, 27, -90, -28, -22, 66, 37, -85, 96, 62, -45, 7, -47, -87, -1, -68, -94, -15, -18, 58, -45, -4, -79, 10, 62, 52, 27, -33, 87, -5, -31, 40, -14, 15, 66, -60, 32, 42, 28, -8, -17, -74, -66, 41, 34, 16, 53, 92, -16, 33, 25, 12, -6, -80, -27, 64, -50, 6, 81, -19, 18, 127, -79, -35, 45, -37, -14, -8, -82, -85, 11, 43, -21, 61, 1, 71, -114, 58, 20, 122, -57, -14, -9, 7, -3, 10, 44, 0, -3, -26, -4, -34, 26, -56, 46, 2, -41, 20, 51, 93, 64, 4, 14, -12, 38, -4, 26, -47, -55, 15, -49, -19, -2, 6, 21, 6, 17, 6, -30, -101, -6, -4, -15, -51, -33, 13, -9, 37, -26, -8, 10, 18, -8, 14, 21, -33, -53, -53, 127, -19, -9, -78, 15, 23, 36, -17, -35, 63, -31, 82, -73, -23, 4, 14, 10, -40, 48, 1, 23, -26, -25, 39, 80, -68, -12, 82, 1, 15, 1, -16, 47, 22, 59, -24, 3, -20, 22, -13, -85, 17, -68, -23, 57, 61, 33, 15, 97, -5, -32, 38, -35, 40, 22, -17, 64, -30, 9, -13, 34, 11, 51, -34, 8, -20, -6, 10, -46, -13, -10, -7, 59, 20, 127, -21, 7, 31, 8, 93, -98, 29, 9, -77, -15, 29, 22, -76, -21, -21, 56, 43, -14, 9, -30, -13, -7, 14, 13, -56, 26, -17, 74, 61, -105, 48, -16, 25, -22, -1, 41, -45, 64, -11, -65, -18, -104, 94, 30, -22, 23, 93, 36, 2, 14, -64, 6, 44, -101, -23, 42, 55, -9, 6, -25, 26, 18, -45, -9, 103, -2, -21, 26, 38, -39, -1, -9, 2, 41, -9, -50, 8, 41, -6, -66, -98, 37, -23, 19, -32, 127, -38, 11, 41, -53, -15, 41, 5, -2, 75, -67, -31, 97, 59, -4, 22, -12, 19, -1, 3, -33, 19, -5, -20, -13, 4, -33, 55, -54, -25, -116, -24, -20, 25, 52, 86, -56, -121, 29, 83, 26, -21, 126, 44, -78, -50, 9, 33, -18, 116, 75, 77, 99, 81, 6, -22, 3, -45, -5, 1, -121, 26, -44, -75, -117, 94, -62, 118, 28, 55, -56, -15, -55, -45, -33, 25, 25, -47, 80, 39, 117, 116, 2, -7, 21, -36, -60, 13, -39, -100, -29, 12, -6, -62, 37, 23, -3, -18, -38, -47, -75, 16, 12, 127, 52, -29, -8, -111, 27, 26, -28, 3, 23, -63, 70, 21, 39, 37, 6, 84, -54, -35, -60, 3, 5, 1, -30, 46, 31, -16, -12, 66, -10, 51, 3, 38, -72, 43, -34, -26, 67, 15, -39, -41, -14, 41, 37, 71, 7, -22, -35, -6, -120, 48, 72, 22, -64, 36, -67, 50, 8, -2, 93, 86, -11, 47, -21, 49, 38, -44, -25, -25, 127, 45, -14, -15, 62, 45, 43, -78, 39, 61, -41, 13, 26, -34, -34, -45, 0, 46, -9, 27, 3, -65, 76, 2, -89, -20, -5, 25, 43, -71, -36, 13, -45, -26, 16, 40, -14, 8, 100, -19, 19, 67, 18, -32, -20, 3, 0, 19, -93, 102, 46, 78, 37, 22, -2, 86, -46, -25, 19, -11, -9, 2, -9, -7, 20, 69, 41, -18, -120, 31, 23, 127, -7, -33, -15, -14, -6, -83, 2, -79, 56, -7, -15, 48, -90, 43, -5, 3, 5, 32, 57, 67, -26, 24, -63, -47, -56, 4, 13, -4, -53, 29, -28, -32, 8, 28, -38, -45, -2, -16, 36, 27, 8, -31, 0, -6, 6, -42, 20, 44, 66, -45, -38, -20, 80, 63, 24, -21, -67, 61, 39, 51, 11, -35, -43, 25, 7, -57, -34, 76, -103, 5, -41, 37, -87, 21, 24, 20, 21, 22, -43, -8, -6, 42, 53, 105, 21, -23, 33, 39, -88, 2, 127, 24, -48, 53, -14, -76, -10, -27, -46, -74, 19, -13, -90, -104, 70, -9, 87, -59, 11, 29, -70, -74, 14, -19, -101, 127, 9, -41, 12, -20, -51, -84, -63, 24, -31, 24, 2, 7, 2, -71, 60, 21, 45, -2, 39, 25, -16, -93, -2, -25, 20, -17, 16, 41, 23, -55, 50, 62, 42, -92, -46, 32, -12, -56, 116, 25, 23, 22, -5, 39, 15, 27, -70, 117, -14, 27, 2, 51, 60, 94, -85, 17, 19, -76, 73, -57, -75, 25, 51, 49, -12, -9, -51, -17, 20, 13, 79, -34, -37, -26, 62, -36, -3, 16, 16, 3, -34, -40, -6, -66, -41, 69, 29, -27, 11, 8, -72, 60, -3, 33, -72, -7, -22, -54, 24, -20, -38, 38, 51, -34, -53, -4, -52, 2, -22, 52, -13, -33, -25, 26, -85, 51, 43, -43, -74, -5, 6, -8, 9, -12, 32, -18, 7, 36, 3, -4, -3, 48, 28, 20, -12, -44, -18, 21, -127, -56, -29, 13, -23, 23, -34, 64, -21, -3, 15, 15, 68, 62, 69, -23, 54, -80, -63, 38, 125, 28, -54, -27, 18, 28, 24, -3, 43, 6, 3, 0, -32, 32, -22, 58, 9, 79, 99, -22, 1, -33, 23, -65, 42, -32, 19, 35, -24, 41, 27, 73, 43, 20, -127, -37, -5, -44, -15, -41, -31, 31, 43, 32, -39, 85, 35, -30, -2, 13, -59, -21, 44, 36, 25, 14, -95, -45, -24, 15, 17, -31, -64, 29, -59, 32, -56, 13, 47, 29, -78, 18, -4, -66, -3, 63, 37, 45, -7, -36, 3, -37, 18, -58, 7, -63, -87, 41, 11, 21, 18, -14, 27, -20, 61, 23, 70, 33, 7, 69, 2, 9, -38, 32, 2, 32, 71, 60, 15, 2, 49, -1, -30, -35, 85, -57, -59, -9, 6, -94, -68, 65, -67, 43, 20, -16, -53, 3, -16, -2, -30, 56, -1, 127, -1, -41, 11, 82, 42, 28, 69, 11, -14, 10, -29, 12, -126, -51, -46, -77, -51, 5, -31, 20, 10, -21, -37, -33, -127, -29, 44, 58, -9, 74, -16, 8, -31, 1, 7, -85, -39, -24, 44, 9, -31, -13, 31, -25, -13, 2, -36, 39, -14, -7, -12, -48, -30, -16, -42, 32, -51, 6, -77, -8, 16, 33, -73, -1, 26, 23, -47, 39, 55, 1, 36, 35, 34, 7, 60, 11, -35, 58, 21, 19, 43, -49, -43, -24, -37, -46, 26, -17, -42, -3, 86, -68, -126, -64, 5, -127, -7, -2, -14, -28, -22, -19, -30, -6, -28, 13, 9, 40, -39, 55, 49, -8, -7, -2, 43, -45, -79, -17, -14, 2, -53, -7, -8, -44, -36, -27, -14, 28, 2, 52, -29, -59, -59, 17, -19, 19, -34, -17, -20, 6, 27, 11, -33, 11, 54, -9, -40, 9, 83, -17, -22, -39, -9, 49, -23, -25, -89, 25, 13, -117, 32, -20, -13, -28, -43, -70, -1, 12, -59, -23, 80, -18, 53, -68, 10, -76, -11, -56, 88, -31, -15, -14, 16, -8, -6, 6, 1, 21, 23, -38, -40, -13, 8, -43, 22, 61, 79, -30, -11, -37, 14, -39, 4, 23, 52, -43, -40, 58, -38, -34, 62, 6, -46, 56, 12, -8, -28, 24, -43, 20, 15, -19, 32, -33, 34, -24, 32, -9, 127, -22, 6, 99, -54, -9, -17, -35, 38, 57, 1, 54, 27, 18, -18, -40, -46, -58, -51, -41, -40, 35, 78, -33, 17, 28, -124, -115, 34, -101, 6, -25, -96, 0, 127, -126, 9, 3, 9, 73, -16, 31, -63, 66, 60, -13, -101, 65, -38, -26, -27, 23, -26, -19, -11, 50, -55, 38, -69, 10, -46, -33, -20, 4, -60, 70, 43, 7, 26, 82, -109, 42, -1, -19, -56, 29, 1, -96, 35, 58, 43, 5, -1, 87, 47, -113, -4, -68, 75, -36, 26, 7, 52, -75, -68, 101, -8, 42, 54, -25, -36, -87, -3, -73, 91, 28, -18, 9, -6, 21, -11, 51, -26, 38, 24, -9, 99, -10, -66, 30, -65, -55, -32, -24, 9, -24, 39, 88, 40, 31, 16, 5, 41, 54, -25, -28, -75, -10, -5, -44, 29, 12, -62, -28, 23, 56, -6, 74, -10, 28, 61, 10, -43, -45, -8, 23, -27, -34, -6, 53, 6, -98, 2, 9, -78, -26, -127, 13, -30, -84, 10, -9, -45, -75, 9, 28, 1, -59, -64, -17, -17, -12, 27, 22, -19, -75, 33, 22, 2, -22, 5, 18, 50, -71, 32, -21, 63, 35, 91, 44, -44, 69, -69, 22, -19, -8, -12, 80, -28, 66, -41, 97, -32, 123, -58, -77, 20, -2, -22, 1, 28, 4, -34, -12, 63, 5, -10, 39, -98, 127, -30, 45, 70, 29, -37, -42, 78, 107, -48, -7, 15, -1, 123, 24, -25, -1, 57, 16, -105, 34, 4, -30, -3, 2, 50, 5, 39, 4, -21, -91, -45, 6, -16, -48, -66, 21, 8, 2, 61, 51, 3, -33, 18, -52, -69, -23, 19, -16, 30, 13, 27, -29, 3, 24, -1, -30, 25, 27, 3, -17, 3, -8, 11, -18, 34, 9, -11, 3, 12, -16, 1, 25, -26, -13, -26, -5, -29, -17, -34, -12, 11, -7, 23, 10, -42, -110, -3, 2, 49, 55, 79, -22, -33, -46, -48, 86, -8, -68, -32, -16, -61, -32, -12, 33, -14, -62, -41, -57, -62, 20, 20, 11, 127, 19, -127, 20, 36, 8, -69, 26, 37, -22, 20, 38, 50, 43, 74, -1, 19, -3, 1, 53, -15, -42, -47, 26, 23, -42, 2, 39, -24, 45, 9, -9, -49, -2, 46, 2, -4, 5, -32, -47, -33, -5, 56, 2, 18, 3, 30, -48, 9, -14, 38, 27, 8, 0, 14, -15, 10, -12, -22, -43, -39, -39, -35, 59, -9, 0, 8, -54, 17, -10, -11, -7, -47, 59, -1, 5, -32, -15, -21, -14, 41, -7, -69, 127, -27, -105, 21, -24, -45, 18, 11, 15, -35, -25, -4, -18, 26, -87, 4, -43, 19, 4, -10, -1, -10, 6, -71, -25, 22, 30, 24, 33, -73, 27, 62, 29, -17, 38, -29, 15, -4, -13, -34, -26, -37, 29, 15, -12, 5, -75, -21, -23, 6, -37, -30, 3, 115, -76, 58, -19, 39, 1, -32, 23, 17, 18, 5, -12, -91, 24, 20, 23, 8, 52, 15, -51, 16, -6, 8, 9, -93, 11, -30, 5, -41, 9, 9, 18, 79, -5, -31, 31, 37, 25, 25, -22, -30, 32, 28, 5, 23, -39, 55, 4, 18, 49, -49, -51, 20, 58, 20, -55, -64, 27, 31, 43, -29, 15, -28, 62, 46, -16, 16, -36, -7, 15, 3, -20, -17, 23, -20, -45, -99, -45, 4, 29, 36, 39, -10, 12, -3, -15, 1, 5, -4, 39, 12, -15, 28, -18, -29, 15, 91, -14, 3, 44, 16, -127, 47, -64, -49, -15, -13, -19, 47, -31, 23, 20, 3, 20, 8, -43, -46, -75, 31, 18, 7, -20, -9, 12, -21, -55, 34, -79, -30, -122, -18, -60, 0, 41, -2, 33, 35, -22, 21, -9, -25, 34, 9, -28, 6, 16, -3, 17, 1, 12, -4, -22, -24, -36, 5, 20, -19, -20, 19, 10, 21, 85, -73, -56, 84, 5, -19, 32, -13, -19, 71, 6, 25, 19, 25, -21, 31, 9, -127, -26, -16, -3, -47, 16, -4, -41, 87, -14, -29, -6, 15, -4, 39, 19, -29, -1, -6, 44, 41, 61, -48, -64, -37, -95, -26, -80, 70, 27, -69, 55, 105, -2, -45, -69, -11, 74, 8, 29, 7, -121, -81, -47, -127, 7, -70, 11, -14, 15, 36, 17, -11, -29, 89, 58, 46, -84, 3, -31, -62, 14, 18, -18, -36, -71, -112, 53, 2, -38, 32, -37, -7, 11, -27, 15, -70, 31, 35, 39, -13, -34, -14, -46, -21, 22, 5, 18, -5, 3, -76, -85, 21, 117, 61, 31, -60, -127, 48, 35, -5, 19, 13, 12, -71, 75, -13, 69, -23, -7, -19, -36, 27, -67, -58, 53, 106, -28, 58, 23, -15, -24, 15, -85, -21, 21, -49, 42, -38, -46, 32, 29, -17, 49, -52, -2, -24, 16, 31, -25, -16, 16, -45, 12, 34, -59, 13, 10, -55, -40, -7, -8, -50, 59, 4, 25, -10, -58, 24, 82, 49, -30, 103, -59, 33, 106, 13, 33, -97, -58, 26, 99, 20, -7, 24, 57, -23, -11, -13, -13, 42, -4, -31, 33, -42, 0, 22, 17, 0, 72, 8, -27, 32, -60, -9, 19, -56, -32, 23, -61, 39, -51, 14, -22, -53, 9, 63, -21, 37, 72, 69, 7, -23, 15, -25, 82, 18, 75, 23, 15, -54, 6, -74, 127, -44, -1, -15, 78, -10, -13, 8, 56, -47, -14, -46, -36, -20, -64, -36, -52, -30, -4, -57, -15, 40, 102, -112, 67, -67, 10, -10, 101, -50, 15, 58, 58, 113, -53, -21, 42, 28, -8, 106, 27, 4, -46, 54, -34, -34, 0, 81, 17, -9, -31, 27, 17, -38, -3, 23, -19, 34, -52, 17, 0, -52, 22, -19, -5, 16, -16, -32, -25, 35, -58, -8, 34, -29, 18, 21, 28, -47, -79, 0, 6, 12, -41, -12, 112, -37, -15, -34, 53, 19, 24, -67, 3, 15, -24, -65, -100, -7, -112, -2, -43, 80, 30, -127, 27, -19, -55, -82, -42, -23, 0, -21, 33, 40, -88, -44, -78, -20, -104, -16, 104, 15, -30, 16, 29, 4, 57, 124, 79, 91, 86, 8, 22, 30, -33, -11, -24, 2, 115, -85, 36, -6, 127, -11, -8, 41, 28, -38, 115, -5, -13, -47, 36, -31, 27, -23, 43, 112, 4, -21, 11, 55, -21, -7, 44, 53, 71, -107, 34, -65, -14, 34, 36, 39, -108, 45, 30, -41, -54, 66, 32, 27, 55, 76, -14, -7, -9, 1, 127, -22, 26, 3, 34, 34, 3, -32, 22, 26, 18, 26, -16, -15, -38, 13, 13, -23, 29, 21, 2, 3, -4, 13, 16, -9, 5, 20, 28, -1, 22, -28, 30, -8, 4, -5, 21, -20, -15, -2, 14, -5, -3, 0, 1, 8, 16, 19, 1, -8, -26, -1, 9, 21, 12, -15, 64, -12, -7, -9, -26, 11, 24, 3, -31, -11, -6, 7, 21, 8, 30, 11, -21, 5, -16, -58, 3, 17, -108, 23, -94, 13, -42, -5, -14, -127, 50, 37, -6, 15, 28, -14, 33, -81, 22, 8, -28, 75, -68, 39, 8, -45, -25, 2, 41, 26, 32, -43, 52, 1, 17, -5, 18, 68, 8, 43, 1, -44, 16, 49, 39, 43, 14, -48, 26, -5, -60, -29, 11, 40, -41, -16, -122, 31, -14, 26, 68, 52, 22, -56, 11, -17, 14, 36, -9, 8, 38, 44, 28, -38, 18, 65, -1, -31, 25, 10, 67, 53, 8, -2, 57, 16, 44, -37, -3, 22, 2, -32, 41, 2, 30, 20, 24, -35, 50, 34, -3, -17, -35, -36, -66, -30, -51, 66, -29, -33, -80, 50, 12, 36, 4, 16, 54, -33, -68, 2, 44, -15, 48, 10, -23, 58, -33, -68, 18, -10, 60, -55, -65, 55, 127, -68, -6, 77, 15, 27, 84, -30, 27, 60, -33, 66, 3, -31, 75, 34, 0, 3, -43, -6, -104, 29, 37, -64, -38, -34, 27, 11, 34, 7, -22, -24, 8, -5, 6, -6, -41, -13, 2, -64, 18, 44, -13, -28, -52, -28, -4, -12, -3, -9, -8, 13, 61, 9, 18, 14, -69, 14, -2, -12, 3, 13, 2, -6, 127, 15, -3, -4, 49, -7, 31, 27, -5, 12, 11, 35, -20, 2, 4, 2, 25, 17, 22, 0, -27, -1, 68, -30, 7, 22, -1, 33, -52, 34, -41, -7, 36, 24, 10, 43, 5, 6, -17, -37, 35, -2, 16, 9, -33, -42, 12, 28, -18, 89, 98, 40, -30, 28, 20, 58, -20, 123, 81, -37, -29, 14, 24, -56, -34, 71, -54, -19, 24, 68, -1, 0, 86, -83, -41, -8, -53, -10, -12, 38, 47, -71, 6, -21, -65, -79, -2, 87, 11, 10, 7, 16, -94, -31, 8, -16, -34, -36, -68, 42, -15, 26, 66, 29, 23, 1, 22, 75, 64, 10, 19, -22, 127, 54, 19, -17, -33, 29, -49, 66, -42, -4, -32, 35, 0, 29, 127, -29, 22, 15, -9, 12, -19, -35, 7, -11, -10, 14, 0, 17, 39, 31, 26, 13, 8, -17, 9, 15, 36, -5, -27, -23, -20, 3, -5, -24, 31, 44, 9, -26, 55, -4, 21, -28, 26, 7, -9, 17, 4, 30, 20, -34, -28, -70, 7, 68, -25, -6, 17, -27, 31, -23, 4, -19, 4, 20, 29, -9, 42, 17, -10, -11, 4, -18, 10, -14, -4, -14, 38, 35, -34, 90, -17, -39, -31, -59, 28, 40, -11, 18, -13, -28, -2, -43, 122, -35, -30, 32, -11, -33, -55, 62, 57, 30, 126, -54, 28, 87, -18, -24, -35, -12, 77, 36, -21, 39, 56, -20, 104, 39, -90, -10, -2, -81, 2, 25, 18, -2, -5, -17, 11, 25, 59, 34, 45, 9, 27, 71, -36, -28, 63, -107, -30, 28, 60, 75, 30, -23, 37, -25, 31, 28, 73, -38, -65, 127, 53, 9, -104, 39, 4, -36, -35, 107, -75, 29, 127, -28, -27, 54, -89, -19, -28, 15, 33, -24, 7, 17, 63, 30, 68, -11, -11, 4, 23, -43, 4, 24, -33, -1, 7, -43, 14, 40, 23, -39, 24, 50, -4, -37, 48, -1, -65, 22, 25, 18, -9, -17, 16, 37, 69, -7, 7, 38, -2, 61, 24, -68, 61, -79, -14, 19, -19, 8, -2, -26, 21, 13, 13, 20, 52, -14, -10, 4, 31, -21, 41, 9, -44, 13, 24, 7, -19, 2, 122, 18, 1, 10, -1, 99, 108, 97, -17, -19, 25, -44, -31, -23, -35, 75, 75, -11, 19, 5, 19, -11, 22, -73, -13, 29, -1, -52, -7, 37, -30, 15, -31, -65, 40, -9, 29, -69, -13, -21, -23, 16, 20, 94, 63, 34, 7, -18, -10, -72, -36, 24, 23, 3, 31, 19, -16, -69, -52, -14, -39, -12, 5, 31, -52, -17, 19, 14, -36, -32, 7, -23, 127, 10, -17, 73, -30, -15, -12, -50, 82, -22, -14, 28, -35, 3, -21, -65, -63, -29, 78, 57, 5, 22, 38, -33, 22, 10, 3, 7, 22, -2, -3, 71, -67, -26, 57, 29, 44, 43, -74, 87, 5, 32, 22, -30, -127, -7, 24, -51, 11, -25, 54, -8, -1, -39, -34, -30, 40, 27, -34, 74, -18, 48, 5, -60, 37, -36, -50, -29, 6, -58, -22, 39, 57, 3, 13, 57, 50, 57, 8, 26, 31, -7, -30, -17, 3, -65, 5, -86, 21, -37, -12, 18, 0, -33, -37, -18, -21, -95, 57, -44, -8, 34, -13, -62, 63, 14, 44, -13, 27, 5, -9, 28, -62, -72, -5, -21, 5, 31, -26, 122, -20, -18, 46, 67, -127, -41, 4, -33, -3, -6, 28, -40, -41, -52, -57, 13, 4, -18, -38, 71, 4, 55, 9, -90, 64, -11, 10, 12, -39, -46, -10, 70, 75, -31, 43, 43, 27, 68, 10, -3, 13, -1, -101, -21, -14, 0, -21, -127, -9, 9, 9, 36, 11, 4, 9, 35, -17, 10, 0, 23, -1, 13, 44, -36, -39, 12, 1, 51, -36, -16, 14, 7, 5, -6, 2, -4, -8, 23, -27, -31, -15, -8, -13, 49, 23, 24, -23, 3, -29, 41, 17, -44, -29, 33, -31, -7, -41, -72, -4, 31, -1, -46, 50, 63, 23, 60, 3, -20, -26, -4, 1, 10, -14, -8, 33, -18, -15, 16, 15, -10, 40, -10, -11, -4, 4, 74, 9, 26, 50, -40, -106, -12, -7, -27, 11, 1, -27, -7, 14, -16, -24, -18, -23, 2, -39, -78, 45, -5, 22, -26, 11, -18, 46, 34, 105, 26, -107, 64, 30, 4, 10, 15, -35, 8, 127, 24, -27, -33, 49, -14, 32, 57, -45, 69, 29, -8, -107, -14, 2, 28, -28, -53, -57, 10, -40, 15, 41, -35, -11, 31, -12, -26, 12, 70, -45, -14, -40, 87, -45, -24, -96, -68, 1, -43, 92, -62, 12, -33, -4, -80, 49, -46, -21, 3, 52, 64, -28, 80, -6, -68, 39, 97, 43, -17, -31, -32, -14, 42, 9, 9, 6, -35, 42, 27, -1, -87, 51, 11, -38, 62, 10, -22, -62, -43, -55, 85, 51, 3, 50, -54, 30, 19, 49, 14, 12, -44, 17, 56, -90, -9, -90, -11, 55, 48, -17, -44, 33, 5, -12, 14, -1, -49, -26, 45, 55, 17, -32, -20, -13, -20, -43, 10, -127, 17, -2, 23, 6, -4, -28, -25, -64, 0, -62, -15, 97, 20, 44, 4, -44, -109, -82, 6, 38, -5, 13, -28, -64, 34, 18, 58, -19, 1, -40, 9, 57, 75, -18, -1, 15, -45, 88, -3, -23, 100, -40, 19, 76, 38, -92, -30, 46, -93, 32, -89, -39, -20, -2, -1, 13, -104, 121, -62, 13, 3, -45, 127, 26, -38, 15, 18, 20, -17, -34, 12, 121, 91, -65, -53, -32, -76, -80, -16, 33, 81, 8, -42, 31, 127, -25, -33, 93, -11, 21, 19, 56, -60, 103, -2, -22, 31, -21, 24, 28, 47, 43, 15, -4, -75, -17, 11, 41, 26, 44, -10, 21, 12, -56, 57, -30, 3, 22, -107, 17, -23, 0, 82, -44, 56, -72, -42, -51, -111, -51, -4, -13, -31, -51, 102, 10, 0, 88, 80, 46, -11, -38, -31, -3, 47, 38, 10, -6, 10, -3, -29, -55, 15, 83, -13, 26, 20, -56, -24, -77, -3, 22, 5, 70, -28, -76, -36, 127, -35, 3, -16, 73, -19, 14, 40, 18, 21, 14, 38, 43, -24, -9, -19, -16, 65, -8, 27, -41, 77, -25, -32, 21, -20, -29, 11, -34, -32, -13, -28, -27, -25, 5, 22, 0, -9, -21, -11, -29, -36, -14, 1, 9, 23, 13, 63, 11, -14, 16, 1, 25, -97, 8, -2, -53, 37, 23, -3, 0, -14, -23, -5, -26, -9, -36, -17, -29, -16, -14, -11, -50, 33, -29, -47, 16, -16, -8, -30, 10, -3, 25, 12, -45, 5, -26, 28, -30, -76, 7, 30, 31, 27, 0, 63, 10, 15, 4, 14, -35, 10, 16, 46, -14, -27, 6, 0, -15, -10, -1, 36, 20, -53, 32, 30, 35, -52, -42, -20, 4, -47, 15, -78, -6, 72, 44, 24, -19, 3, 51, -1, -27, 127, -16, 33, -37, 25, 15, 8, 13, -64, -21, -8, 33, 90, -1, -32, 15, 8, 63, 78, 16, -2, -14, -60, 36, 27, 28, 31, -111, -13, -14, 45, 16, 13, -60, 19, 78, -77, -31, 5, 22, 42, 67, -11, 30, -12, -24, 9, -25, -52, 2, 88, 50, 45, -16, 9, -26, 19, 32, -77, 0, 90, 75, -10, 12, -14, -67, -18, 105, -127, -30, -71, 2, 5, -51, 34, 25, 10, -42, 33, 7, -32, -18, -29, 18, 7, -62, 40, 0, 69, -17, 11, 79, 13, -53, -8, -10, -19, -87, -23, 15, -52, 91, -62, -26, 33, -45, -24, 24, -12, 2, -2, -11, -6, -12, -29, -16, 0, 40, 3, 35, 45, -29, 19, -5, 24, 26, 12, 38, 127, 33, 37, -21, -70, -28, -24, 8, 25, -14, -15, 30, -22, 20, -8, -21, -33, -29, -11, 32, -22, 14, 27, 18, 35, -28, 20, -1, -9, 43, 3, 3, 18, -16, -36, 4, 13, -1, 12, -9, -42, 16, -34, 33, -23, -24, 0, -29, -65, 8, 37, -9, -1, -56, -19, 12, 28, 16, -14, -18, -8, -5, -15, 41, 57, -37, 58, -36, -36, 36, 127, 58, -18, -4, -52, -3, -20, 15, 0, 20, 5, 59, -42, 20, 19, 58, 35, 49, 37, 8, 13, -26, 29, -40, 57, 19, 12, 15, -5, 8, -10, 29, 13, -18, -42, 24, -13, -32, -5, -40, 15, 12, 27, -14, -16, 6, 30, -13, 5, -44, -46, 27, -13, 45, -4, -2, -11, 0, -3, 7, -26, 1, -65, -15, -3, 0, -20, 103, 53, -7, -6, -46, 5, 11, -17, -31, -15, -127, 61, 28, -3, -22, 26, -72, 23, -35, 79, -57, 39, 27, -63, 32, -32, -16, 7, 56, 22, 33, -42, 1, 6, -26, -40, 37, -8, 0, 28, 61, 61, -56, 45, -14, 40, 14, -52, 4, -47, -5, 17, -51, 30, 17, -24, -69, 118, 5, 23, 2, -16, 16, 44, 21, 25, -45, -16, 68, 50, 51, -24, -1, -41, -12, 4, -9, 49, 41, 48, -28, 40, -10, 38, 4, 6, 15, 15, 22, -2, 12, 127, -16, -35, -11, -36, 3, -49, -21, 28, 18, -17, 27, 5, -18, 2, 8, -16, 6, 13, 1, -15, -8, -31, -24, 75, -13, -36, -1, -20, 52, -16, 35, 8, -16, 62, 24, -40, -40, 35, 7, 1, -30, -39, 27, 11, 5, -60, -51, -31, -30, -19, -1, 26, 52, -18, 18, -3, -48, 11, -12, 17, -43, -54, -40, -26, -10, -31, -34, 9, -51, -10, 8, -10, -46, 30, 18, -24, -32, -54, -16, -62, -28, 7, 54, -19, -30, 20, -18, 23, 32, -4, -18, -9, -3, -8, 27, 38, -84, -2, -14, -67, 8, 19, -14, -38, 49, 15, 3, 46, 12, -59, 121, -43, 46, -7, -37, -7, -58, -43, -7, -35, 91, -2, -24, -2, -13, 12, 70, 15, 31, 57, -21, -86, 41, 1, 35, 9, -66, -57, 10, -127, -60, 40, 54, 47, -11, 48, -70, -81, -95, 0, -5, -9, -71, -78, -22, 17, 25, -70, 77, -57, -4, 26, 34, 29, 37, -34, 13, -16, 15, 7, -104, 127, 12, 39, -40, -52, -56, 70, -38, 57, 32, -33, 14, -3, 47, 83, -26, -56, -9, -56, -15, -56, -3, -63, -17, 31, 29, 30, -27, -37, 46, -40, 21, -20, 44, -9, 26, 55, -13, 69, 26, 70, 54, 5, 74, -2, -74, -23, -15, -49, -2, 109, -115, -7, 46, -8, -2, -114, -16, -22, 58, 21, 1, 40, 111, 24, 32, -59, -25, 35, -53, -127, 80, 13, 33, 39, 4, 37, 56, -8, -29, -33, -40, 82, 8, 7, -84, 48, 48, 35, -6, -7, 45, 0, -25, 0, -84, 10, 17, 29, 2, 55, 80, 35, 53, -25, 4, -28, -3, -25, 37, 26, 31, 3, -46, -4, 89, -28, 19, -23, 47, 14, -31, -32, -44, 29, 28, 9, 60, 20, 46, -15, -71, 60, 37, -102, 22, 3, 23, -13, 32, -6, 51, 23, 17, -44, -52, 19, -24, -17, -35, -12, -9, -2, 21, 27, 12, 0, 22, 19, -21, -18, -14, -29, -34, 40, -7, 51, -22, 8, -14, -1, -31, -43, -46, 5, -11, -22, -49, 2, -15, 3, 26, -9, -38, 36, 10, 22, 17, 16, 9, -3, -35, 19, -19, 28, 0, -14, -39, 14, 1, -37, 13, -3, 24, -127, -17, -2, 32, -18, -7, 75, -37, 11, 14, 10, 25, -50, 120, 50, -19, 24, -9, 16, -31, 18, -24, -6, 47, 16, -34, -46, 39, -4, -28, -6, 40, -57, 59, -14, -15, -126, 33, 35, 33, -6, 29, -49, 30, 27, 24, -101, -41, 47, -28, -7, 23, 14, 1, -14, 59, 19, -16, 16, -63, -4, 38, 23, -96, -62, -32, 26, -2, 13, -33, 23, 89, -59, 11, -1, 12, 0, -8, -28, -15, -43, 32, 10, 28, 19, -14, -40, -27, 81, 34, -127, 44, -61, -120, 10, -47, -43, -16, 10, 7, 45, 87, -25, -44, -63, -9, 94, -59, 5, 22, 11, -94, 24, -21, -93, -58, -20, -9, -5, 49, -18, -18, -31, 34, -26, -23, -67, 16, 82, -24, -61, 4, 7, -13, -8, 77, -44, -14, -26, 37, 71, -25, -12, -40, 4, 30, 66, 57, -106, 43, -34, 29, 34, -14, 8, -13, 30, 34, 44, 3, -62, 20, -11, -28, -90, -34, -127, 21, 33, 9, -52, -27, 85, 33, -51, 13, 64, 19, -32, 55, 53, 9, -87, -14, 17, -3, -9, 26, -22, 25, 23, 1, -57, -34, -93, -33, 11, 127, 4, -11, 3, -25, 108, -18, -10, 36, 28, 15, 14, -71, 7, 24, 74, -78, 32, -11, -28, 22, 75, -25, 47, -35, 74, 101, -6, -15, 56, -4, 0, -7, -16, -43, 11, 55, -42, 73, -13, -9, -47, -68, 67, 79, -54, 15, -20, -121, 20, -14, -22, 6, 54, 60, -60, -23, -101, 88, -50, -64, 5, 35, 39, -13, 51, -45, 11, 21, 39, 36, 30, -69, 17, 42, -11, 8, -13, 12, 58, -10, 20, -44, -37, -32, 42, -52, 12, -8, -51, 15, -25, -15, -7, 57, 76, 3, -33, -31, 40, 26, 4, 26, -33, -16, 28, -43, -44, 20, -4, 86, -20, 19, 10, -53, -56, -25, 27, -27, 88, 4, -1, 17, -54, -84, -70, 13, 39, 127, -9, -54, 13, -49, 45, -40, -7, 8, -23, -34, -47, 20, -1, 35, -28, -28, 4, 19, -6, -14, 34, -11, -3, -18, -21, -30, -3, 6, -15, 18, 26, -11, 59, 16, -4, -7, 22, -18, -24, -8, -22, -13, 11, 70, 23, -27, 7, 6, 9, 70, 22, -11, 39, 4, -28, 12, -23, -53, -39, 22, 10, 20, -66, -13, 50, 46, 10, -20, -25, -8, 25, 25, 22, -61, 127, 3, 17, -9, -11, 20, 12, 25, -41, 14, 77, -8, -24, -45, -15, 33, 56, -29, -14, 19, -28, 33, 16, 23, 28, -14, -59, 54, 19, -6, -37, 6, 5, 17, -18, -4, -8, 79, 66, -21, 18, -31, 68, 34, 91, 37, 24, -28, 22, -83, 30, -16, 38, -18, -7, -3, -7, -27, -14, -3, 34, -18, 20, -19, -25, -11, 44, 65, 52, -36, 28, 81, 0, -1, 16, -14, -23, 12, -44, -29, 9, 64, -19, 127, 27, -26, -35, 30, -9, 39, -6, 21, 37, 96, 24, -35, -14, -15, -4, -21, 22, -14, 64, 42, -41, 9, 42, 5, 59, 37, -28, 29, -45, 16, -3, 31, -127, 24, 9, 39, -34, 19, 47, 76, 34, 7, -79, -13, 11, -21, -35, -19, 37, 24, 3, 57, -18, 0, 16, 4, -61, -6, -54, -18, 28, -9, 1, 59, 67, 22, 42, 36, 15, -64, -23, -4, 26, -44, 42, 71, -4, -26, -93, 34, 53, 29, 32, 75, 14, -25, 17, -44, -68, -6, 49, -10, -20, 21, -12, -8, -59, 25, 7, 25, 13, 38, 19, 29, -1, -11, 36, 54, 34, -102, 33, -29, 11, -66, -22, 5, 32, 56, 51, -47, -4, -55, 14, 72, -7, -127, 42, 35, -5, 1, 45, -12, -5, 9, -19, -46, 32, 44, 33, -14, 2, -5, 42, 83, -52, 58, 60, -47, -10, 34, 110, -9, -16, 49, -9, -7, 93, 55, -3, 7, -105, 58, -36, -42, 55, -47, -45, -8, 61, -6, -32, -37, -1, -15, -71, 32, 2, -22, 60, 5, -4, 28, 93, 60, -62, -16, -92, 56, -66, 6, -96, -18, 49, 102, 21, 11, 26, 55, -38, -19, -62, 42, 47, -77, 17, -18, -12, 70, 10, -60, -64, -4, -1, -47, 27, 10, 18, 45, -41, -4, -9, -57, 23, -37, 35, -6, 58, -31, 67, 13, 26, -62, 57, 15, -52, 119, -33, 55, 125, 127, -19, -13, -32, -9, 57, -71, 39, -67, 20, -20, 12, -100, 26, 37, -50, -67, 8, -1, 17, -39, -16, 17, -23, 112, 20, -36, 46, 31, 59, 6, 36, 106, -27, 70, -58, 37, -19, 23, -52, 18, -45, -54, -10, -127, 10, -69, -32, 57, -48, -47, -32, 24, -38, -12, 45, -5, 58, -7, -82, -9, -2, 86, -35, 9, -8, 47, 31, -18, 44, 46, 13, -58, 43, 15, 47, 21, -15, -24, -37, -52, 22, 82, 41, -5, -87, 34, 95, 37, 67, 0, 2, 2, -30, 88, 10, -22, -47, -29, 86, -55, -29, 5, 17, -15, 127, -12, 51, 13, -7, -16, -33, -6, -8, 33, 91, 28, 31, 10, -14, -8, 3, -31, -6, 5, 76, 24, -48, 28, -110, -9, -14, 14, -6, -4, 8, 68, 35, -1, 72, 31, -3, -17, 12, 15, 111, -125, 25, 5, 34, 32, 40, 24, -53, -51, -6, -2, -55, -57, -16, 4, 30, 51, 29, -25, -11, -11, -79, 83, -16, 47, 23, -26, -7, -91, -35, -14, 30, 21, -11, 4, -47, 60, 44, 15, -28, -46, -42, -28, 30, -30, -3, -28, 27, 47, 35, 10, 1, 8, -23, 12, -17, -3, -12, 27, 3, 99, 4, -4, 36, 33, 3, 13, 13, -15, 12, 4, 25, 17, 2, -11, -56, 31, 10, 39, -101, -18, 9, 65, 22, 23, -3, 2, 15, -26, 16, -51, 127, 71, 13, -15, 62, 76, -8, -6, 8, 29, -9, 0, -127, 8, -14, -47, -19, 8, -33, 19, 23, 20, 55, -15, 72, 6, 34, 13, 48, -2, 45, 21, 32, 23, -36, 10, 16, 27, 24, 56, 67, -9, -52, -6, -30, -16, 59, 30, -5, 0, -8, -10, -52, 21, -23, 1, 29, 11, -44, -24, 20, 16, -8, -9, 43, -27, 28, 6, 59, -38, -35, -117, -11, 29, 33, 29, -69, -28, 13, 29, -36, 57, -25, -2, -44, 11, 4, 32, -34, 40, -58, -27, -69, -47, 9, 31, 21, 29, 54, -32, 75, -15, -14, -81, -33, 53, 44, -89, 31, 35, 18, -53, 25, -127, -50, -105, 50, -47, -31, 19, -51, 76, -33, 1, -39, 9, 10, 109, -44, -77, 51, 76, 46, -41, 11, 113, -42, 9, -96, -53, 117, 47, -5, -4, -45, 45, 49, 83, -44, -105, -8, -71, -24, 32, 39, -10, 61, -14, 52, 50, 80, 84, 51, 44, -32, 8, -33, -3, 26, 47, -83, 44, 29, -65, -8, -17, -64, 80, 26, 10, 19, -1, 13, -48, 94, -22, -45, 5, 27, 60, 35, 26, -40, 17, 5, 11, -74, -66, -20, -11, 24, -4, 29, 4, 14, 28, -14, -80, 62, -112, -28, -13, -95, -55, -18, 0, -22, 33, 19, -11, -72, -25, -28, -39, 15, -36, -19, -32, 86, -21, 49, -106, -15, 10, 8, 15, -44, 73, -35, 44, -25, -127, 24, 3, -69, -80, 17, 23, 38, 6, -22, -7, 10, -23, -2, -1, -13, 27, 53, 27, 6, -22, -1, -30, -25, -21, -37, 99, 69, 27, -22, -40, -21, 38, -49, -72, 15, 42, 58, 80, 17, -60, 22, -47, 49, 83, -34, -57, 52, 94, -54, -51, -60, 32, -114, 44, 25, 18, 18, -20, -22, -16, -48, 70, 13, -94, 6, -32, -19, -10, 2, 2, -24, 50, -1, -47, -51, -26, 5, -16, -91, -127, -8, -16, -32, -32, 47, 37, -84, 21, -25, -15, 4, 42, 23, -74, -51, 50, -27, -9, -20, -12, 19, -40, -24, -6, -25, 34, 20, -35, 10, 48, -28, 6, 13, -4, -46, 1, 16, -34, 25, -3, 27, -16, -30, 2, -28, 39, 17, 41, -31, -41, -3, -16, -18, -10, 2, -9, -18, -16, -32, -56, -82, 23, -29, 20, 1, -54, 27, -65, -17, -59, 40, -2, 12, 1, 41, -3, -17, -111, 71, -23, 23, 42, 11, -127, -27, 26, 14, -17, -84, 7, -51, 17, -26, -9, -33, -18, -50, 42, 19, -43, -13, 14, 25, -20, -35, -13, -15, 1, 9, 40, -7, -15, 45, -8, 4, -21, -47, -39, 30, 26, -46, -14, 22, -32, 25, 10, -40, -3, 85, -40, -23, 33, 0, 41, -13, -12, -18, -33, 14, -6, -127, 0, -6, -99, -4, 5, -25, 55, 31, -80, -1, 4, 16, 10, -89, -35, -15, -38, 3, 35, 48, 11, -1, 22, -10, 93, -22, -1, -44, -116, -1, 113, -76, 14, 27, -1, 12, -27, 2, -48, 24, -89, 19, -48, 32, -34, 69, 47, -27, 1, 10, 14, -74, 95, 44, -40, -12, -9, -18, -54, 15, 47, -14, -8, -55, -10, -44, 26, -42, 1, -31, 22, -54, -37, 53, 23, -34, -18, 30, 57, -19, -96, -28, -104, 25, 104, -22, 34, -1, 68, -10, -71, 77, -10, 64, -86, -58, 7, 7, -33, -97, 23, -2, 12, -65, -29, 10, -112, -44, -127, -23, -16, -7, 11, -47, 2, 6, -18, 24, 15, 1, 0, -48, 7, 40, 8, -37, -34, -11, 2, 3, -23, -18, 5, -3, 41, 54, -10, -4, -11, 0, 13, -23, -2, -60, 0, 27, 86, -13, -8, 14, 6, 10, 25, -11, -40, 0, 6, -4, 11, -8, -4, -35, 27, 22, 15, -28, -31, -31, 24, 13, 16, 35, 9, 1, -15, -6, -13, 127, 19, 13, 8, 11, 50, 3, -16, -29, 28, -2, 5, -61, -17, -12, -30, -40, 20, -31, 48, -15, -41, 21, 5, -125, -28, -26, 66, -9, 72, -17, 2, -22, 32, 13, -15, -22, -24, -29, 59, 39, -11, -9, -13, 24, 25, -9, 54, -6, -1, -8, 17, -35, 23, -53, -25, 33, -19, 13, 23, -40, -42, -45, 70, -21, 7, 30, 31, -127, 14, 21, 82, -32, 22, -4, -10, -11, -11, -12, -13, -7, 8, 7, 4, -9, -49, -12, 31, -28, 5, 88, 5, -64, 21, 1, -127, 17, -3, -10, 1, -24, -4, 4, 30, -9, -3, 14, 27, -3, 0, -4, 52, -15, -62, 5, 0, -40, 28, 12, 4, 3, 14, -5, -7, -20, -16, -8, -35, 21, -34, 19, 24, -74, 3, -8, 38, -24, -26, 18, 5, -17, -19, -41, 0, -14, -11, 23, 15, 7, 14, -21, 20, -19, -17, -2, 46, -14, 15, -23, 13, -26, 30, -5, -9, 22, -37, -14, 57, -44, 0, -28, 2, -4, 9, 22, 42, -25, -48, -3, 8, 14, 66, 11, -14, 36, 12, -2, 46, 38, -45, 22, -39, 18, -4, -1, 9, 37, 51, 57, 56, -98, 16, 3, -1, 26, 36, 28, 8, -19, 57, -6, 17, -22, 34, -17, -38, 0, -4, -4, 5, -10, 32, 84, -19, -47, 34, -36, 4, 125, 37, 21, -64, 1, 38, -5, 4, -15, 9, 0, 6, 127, -5, 34, -31, 31, 36, 22, 0, -3, -48, -47, 56, -71, -94, -66, -60, 5, 58, 35, 1, 58, -38, -56, -96, 25, 55, 64, 106, -38, -14, 6, 13, -14, 78, 43, 42, -15, -35, 9, 59, 4, 18, 63, -12, 43, -39, 108, -16, 5, 46, -56, -47, 33, 7, -33, 66, -31, -61, -8, 40, -9, 51, -40, 4, 7, 8, -34, 85, 43, -15, 2, 9, 24, 28, -14, -127, -65, 38, -35, 17, 6, 29, 30, -26, 18, 7, 4, -76, 46, 54, -7, -4, -94, 5, -59, 15, 14, -11, -8, -49, 37, 18, -17, 16, -127, -29, 39, 28, 28, 62, 35, 11, -1, 14, 10, -7, 17, -23, -13, 38, 9, 1, -6, 9, 10, 34, 16, 48, -3, -57, 41, -11, -32, -51, -10, -12, 2, 8, -109, -24, 16, 54, -11, -8, 17, 15, 20, -9, 4, -6, 50, -12, 52, 5, 59, 40, 24, 44, 24, 41, 81, 41, 34, -9, -33, 18, 38, 13, 28, 17, -10, 9, -45, 32, -3, 34, 28, -56, 127, 37, -69, 46, -12, -107, -31, -23, -22, 50, 38, 3, 71, 29, -77, 22, 87, -52, 61, -85, 40, 28, -38, 0, 76, 117, 15, -116, 2, 64, -4, 19, 37, -62, 35, 5, -20, -11, 56, -83, 24, -48, -8, -84, -11, -4, -7, 33, 6, 16, -64, 7, -34, -46, -88, -39, -54, 68, -10, -4, -62, -34, 0, -39, -53, -97, -21, 92, -24, -19, 57, 102, -36, 24, -60, 33, -16, -73, -21, 5, 17, -45, 31, 78, 1, 49, -15, 74, -6, 37, -49, -25, -3, -25, -15, -27, 14, 44, -50, 26, 6, 36, -45, 63, 2, 33, -26, 23, -49, -19, 18, 22, -15, 28, -30, 62, -22, 37, 20, -47, 32, 39, -56, -17, -100, 66, -69, -23, -20, 42, 72, -83, -1, -12, -31, 39, -30, -21, -18, 9, -24, 27, 127, 43, -6, 49, -12, 27, -19, 55, -56, 33, -10, -52, 93, 11, 21, 17, -41, 119, 31, -6, -44, 6, 32, -23, 92, 111, -17, -6, -66, -73, 0, -42, 3, -54, 1, -10, 8, -10, 66, -5, -6, 47, 1, -25, -58, -127, 18, -49, -66, -89, -13, -18, -21, 54, 4, 74, -4, 48, 32, 30, 25, 2, 12, -2, 37, -35, 11, 73, -1, -74, 23, -22, -37, -10, -44, 39, -22, -48, -23, -15, -79, 17, 18, 31, 51, 26, -94, -10, -48, -34, -67, 12, -24, -29, 55, -104, -12, 1, 122, -2, 6, -65, -45, -74, 15, 7, 13, 40, 24, 10, 54, -127, 25, -63, -15, -70, 14, 6, -45, 28, -98, 109, 34, 5, 44, 6, -7, 50, -102, -60, -26, 88, -45, 5, 6, 27, -7, -17, -95, 34, -18, 36, -10, -8, -59, -33, -17, 43, -97, -49, -5, -11, 61, 59, 82, -43, 24, 58, -38, 5, 31, -25, 70, 119, -27, -13, 64, -11, -48, 5, -63, 45, -29, 17, 1, -20, 59, 51, -11, 50, 58, -127, -45, -15, -32, -28, -9, 25, 29, 15, -4, -3, 116, 51, -13, 42, -70, -18, -11, 124, -21, 67, -44, -5, -21, -32, -38, 31, 50, -9, -56, -117, -43, -43, -78, 33, -82, 35, 121, -21, 120, 13, -116, 19, -20, -35, 35, -29, 17, 1, -67, 25, -22, -31, -40, -50, -54, 30, -36, -116, 103, 21, 9, -7, -15, -22, 14, 21, 44, 16, -46, -20, -102, -45, -50, -18, -37, 7, -3, 0, 55, 40, 24, 51, -21, -46, 2, 20, -46, 51, -113, 3, -39, 31, -43, -38, 20, 14, 44, 24, -3, 9, -14, -6, -82, -42, -15, -71, -25, -32, -1, 3, 40, -30, 94, -25, -8, -8, -96, -67, 63, -49, 75, -28, -41, -45, -127, 64, -93, -93, -22, -42, 5, 35, -43, 77, -16, -17, 44, 33, -75, -39, -3, -7, 48, 20, 14, -35, -40, 6, -79, 36, -70, -12, -19, -86, 95, -39, -19, 13, -9, -34, 19, -8, 126, 19, -82, -23, 97, -85, -50, 71, -17, -43, 28, -73, 22, 31, -81, 45, 82, 8, -29, -28, 36, -46, -81, -73, -83, 44, 48, 15, -14, 23, 24, 104, 32, -67, 101, 27, -64, 2, 11, -49, 104, -43, 0, -32, -127, -18, 61, 6, -45, -1, 46, -55, -18, -22, -21, -36, -26, 13, -42, 30, -83, 47, -39, -8, -48, 1, -9, 13, -6, 29, -9, 41, -10, -22, -6, -17, 9, -13, 2, 0, 19, 45, -1, 10, -16, 7, -2, 8, 6, -1, -23, 27, -21, 13, -9, -4, 4, 20, -7, 22, -16, 1, 8, -4, 14, 11, 6, 13, -36, 4, -12, -18, 2, 14, 21, 23, 1, -22, -127, 3, -16, -46, -4, -13, 24, -8, -45, -35, -2, -6, 20, 11, -8, -15, -5, -33, -2, 21, 6, 20, 2, -17, -3, 11, 5, 54, 6, -7, -60, -47, 16, -4, -45, -21, -32, -45, -84, -15, -25, -20, 74, 13, -70, 77, 30, -30, 44, -27, -70, -62, -54, 22, 14, -20, 5, 6, -54, -30, 2, 47, -92, -66, 42, 22, 4, 45, -33, 64, -26, -81, -11, -5, 38, -89, -51, -46, 29, 77, -11, 101, -9, -37, 54, -127, 25, 2, 71, 101, -63, -60, -58, -4, -33, 41, -99, 16, 25, -6, 98, -54, 2, -39, -65, -21, 45, 120, -35, -52, -19, 46, 0, -46, -79, 3, 12, -7, -4, -38, -1, -44, -127, 18, 34, 3, 14, 17, 6, -2, -2, -29, -14, -46, -37, 15, -7, -14, 12, -37, 13, -6, -9, 6, -9, 34, -15, 13, 7, -14, -31, 11, -34, 18, -43, 15, -28, 3, 43, -17, -41, 24, -1, 27, 59, 1, 0, -41, 73, 36, 10, 32, 41, -6, -16, -15, 6, -18, -43, 48, -5, -5, -17, -7, 18, 5, 27, 18, 0, 8, -92, -19, -16, -44, 16, 28, -16, 15, 37, -26, -26, -14, 53, 3, 5, 89, -64, -50, 22, 86, 39, -67, -21, 109, -4, -69, 8, 29, 18, -52, -29, 50, 14, -38, 48, -18, 15, -11, -40, -59, -85, 64, -18, 29, -52, 32, -6, -104, 55, -29, -127, -15, 40, -28, -57, 53, 27, 19, 27, 77, 33, 30, -57, 36, -30, -29, -8, 37, 19, 17, 27, -13, -32, 39, -31, 10, -61, -47, 106, 11, -44, 2, 104, 31, 1, -24, 48, -25, 16, 17, 2, 37, -62, 1, 33, 71, 27, 68, 31, 57, 48, -42, -69, 116, -91, -39, 24, -91, -77, -84, -37, -8, -8, -28, -20, 3, -48, 80, -63, -15, -38, -9, 43, -20, 109, -45, 26, -58, -76, 8, -2, -58, 105, -27, -33, -2, 78, -3, -36, 20, -11, 13, 11, -10, -40, 41, -27, -45, -40, 26, -47, 32, -31, 41, 12, 127, -81, -62, 106, 24, 31, 0, 9, 37, 11, 13, 6, -20, -36, 91, 7, -32, -27, -19, 9, -5, 17, -59, -9, 50, -88, 15, -15, 23, -3, 65, 20, 36, 5, 29, 50, -51, -2, 51, -34, 0, -29, -7, 127, -23, 38, -70, -56, -2, 4, -51, -11, -33, -56, -62, -48, 10, 4, 17, 87, 28, 7, -68, 3, -68, 10, 43, 12, -27, 20, 39, -7, -15, -9, 18, -5, 65, 27, -94, -23, -25, 33, -8, -81, 43, 23, 9, -23, -19, 59, -5, 12, 30, -4, 71, -11, -6, 21, 44, -19, 71, -7, 6, 10, -4, -15, -7, -62, 5, -10, 100, 8, -25, -1, -35, 49, 34, 24, 49, 8, 1, 0, -78, -7, 19, 23, -34, 6, 10, 9, -25, 75, -11, 49, -23, 48, 52, 31, -74, 46, 28, 68, 24, 32, 78, 36, 19, -18, 44, -16, 13, -38, 6, 61, 102, -38, 82, -24, -127, 43, -13, -85, 28, 61, 21, 16, -13, 93, 31, -20, 12, 5, -19, -32, 18, 31, 25, -27, -34, -20, -71, 47, -68, -37, 9, -49, -22, 32, -13, 75, -15, -23, -26, -49, 14, 40, 15, -13, 35, 10, -8, -38, -31, -34, -4, 69, 5, -46, -30, -32, 59, -28, -16, 21, -33, -18, -27, 59, -20, 37, 63, 26, 21, 30, 0, -28, 19, 20, -24, -58, 30, 27, 53, 6, -12, -50, -34, 39, -35, -24, 31, -39, 127, 8, -33, 70, 47, 0, -73, -19, -39, -58, -127, 25, -48, -5, 34, -13, 70, -11, 3, 30, 122, 23, 40, -24, 36, -2, -2, -101, -30, -18, 35, -18, 6, 24, -6, -2, -19, -1, -35, 20, 19, -3, 1, 6, -14, 65, 65, 19, 5, 38, 61, -48, -83, -51, -9, 63, -33, -29, -26, -3, -9, 12, 54, 29, -32, -35, -25, 16, -36, 43, -56, 74, -17, 10, 10, -31, 84, 4, -28, 27, 6, 9, -26, -22, 13, 11, -30, 47, 22, -9, -45, -28, 37, -37, -32, 37, 42, 2, 9, -2, -10, 22, 21, -4, -29, 56, -31, 19, 38, -2, 15, -61, 16, 10, 1, 41, 18, 8, 7, -62, 46, 35, -35, 24, 44, 26, -64, 47, -2, -32, -46, 22, 49, -46, 12, 108, -73, -18, 7, 127, 8, 30, -48, 12, 32, 17, -8, 15, -29, 22, 12, -35, -1, 27, 11, -6, 17, -15, -5, -26, -43, -64, 20, 26, -58, -28, -14, -7, 29, 6, 0, -3, -64, -13, -33, -1, -29, 29, -40, 34, -11, 43, 4, -15, 38, -45, -14, 127, -24, -38, -42, 32, -22, 19, 2, 43, 10, -48, 10, 3, -59, 34, -25, -72, -16, 2, -5, 6, 18, -13, -2, 35, 39, 31, -17, 37, 34, 30, -34, 14, -2, 8, 8, 12, -7, 42, 2, -6, -7, -22, 3, -96, 22, 8, -12, -21, 12, 70, -83, 21, 25, -7, 41, -20, 102, -39, 14, -32, -127, -20, 0, -46, -4, -76, -19, 48, 38, 21, 47, 2, 51, -15, -53, -13, -15, 52, -27, 20, -16, -33, 43, 31, -23, -12, -12, 9, 67, 44, -55, -61, -16, -23, -42, 27, -67, -57, 30, -20, 69, -15, -43, -39, 24, 28, -57, 1, 7, -11, 7, -32, -9, 41, 4, 39, -22, -87, 11, -42, 61, 43, -9, 21, -30, 36, -15, 22, -19, 8, 49, 94, -4, 94, 47, -40, -17, 32, -3, -55, -17, 6, -47, -40, -36, -12, -39, -61, 21, 3, 44, -69, -26, 31, 6, 3, -18, 24, 16, -8, 32, -8, -24, 4, -8, 18, 8, -35, -32, -40, -21, -7, 18, -1, -50, 14, -12, -1, -9, 25, -27, -16, 1, -21, 1, -6, 1, -1, 12, 21, 43, 89, -29, 9, 7, 17, 45, 35, 3, -13, -1, 16, 9, 127, 44, 14, -8, 39, 49, 10, 54, 21, -24, -11, -26, -11, 59, 69, -68, -30, 24, -8, -80, -23, 14, -32, 55, 3, 1, -37, -6, -44, 23, 36, -12, 24, -15, 35, 23, -127, -45, -12, 27, 10, 28, -14, 16, 13, 42, 22, 7, 11, 30, -26, -30, -11, -13, 30, 29, -20, -36, -22, -38, 6, -30, -43, 28, 30, -21, -18, -65, 9, -14, 27, -2, -1, 16, -36, 32, -63, 21, 8, -47, 22, 18, 18, 4, 4, -12, -2, 39, -3, 20, -38, 30, -6, 110, 6, -90, -27, 0, 68, 64, 66, 23, 26, -6, 13, 8, -61, -25, -9, -25, -26, 49, 26, 29, -21, 70, -25, 10, -65, 14, 63, -18, -30, -27, 10, 30, -15, -22, 57, 51, -96, -19, 5, 31, -39, 39, -34, 3, 83, -50, -28, -64, 15, -17, 11, -99, 102, -35, -32, -50, -28, -127, -83, 14, -31, -49, -1, 17, -42, -63, 1, -1, -29, 71, 9, 0, -45, 7, -8, 29, -112, 17, 7, -47, -3, 68, -9, -40, 9, -31, -13, -44, -40, -8, 44, 4, 8, -11, 36, -17, 9, -12, 9, -2, 66, -47, 22, -15, -4, 50, 4, 14, -6, -1, 3, 36, 16, -34, 23, -33, 12, 14, 14, 28, 15, 21, -11, -10, -42, 0, 19, -63, -127, 34, 41, -37, 23, 56, -16, -25, 22, 23, -22, -61, 22, 0, 8, 10, -5, 7, 28, 6, 8, 18, -20, 49, -17, -12, -34, -28, 72, 2, -15, 42, -21, -11, 17, 5, -8, -23, 58, 13, 9, -56, 10, -15, 14, -10, -60, 16, 9, -31, -72, -30, 18, 39, -6, 3, 9, 48, 40, 10, 3, 50, 51, -27, -1, -20, 16, -12, 30, 31, 37, -52, -44, -15, 17, 4, 44, -97, 28, 61, 56, -52, -74, -13, 37, 36, 23, 1, 18, 100, -20, -21, 49, -6, -22, -5, -46, 45, -35, 46, 34, -4, 49, -50, -16, -49, 25, 113, -127, 12, -80, 46, 20, -48, -33, -12, 8, -32, 39, -42, -38, 14, 1, -13, -29, -30, 15, 15, 18, 53, 3, 36, -33, -4, -27, -18, 30, 48, 25, 25, -17, -3, 1, -61, -25, 13, 15, 20, -8, -21, -37, 37, 26, 18, 50, 102, -9, 13, -15, -12, -127, 27, -2, -22, -72, -64, -36, -56, -27, -17, 25, -26, -17, 25, -5, -7, -3, -1, 5, -10, 11, 8, -20, 81, -32, -6, 68, 7, -50, 3, 0, 43, 63, -62, 0, -24, 67, 70, -1, -15, 28, 9, -37, 17, 32, -4, 15, -15, -87, 73, -63, 9, -14, 39, -71, 62, 34, 38, -5, 4, -12, -3, 31, -13, -68, 39, 17, -24, -23, -39, 5, 1, -41, 39, -33, 6, 24, 5, -21, -2, -127, 4, 21, -33, 30, -19, 87, -12, 21, -29, 40, -3, -39, -9, -8, 21, -4, 63, 47, 47, -27, 10, -20, -12, 49, 23, 33, 6, 10, 24, -67, 13, -51, 36, 18, -3, 9, -75, -33, 18, -9, 47, -66, -18, 60, -7, 24, -19, 77, 57, -22, 50, 34, 50, 12, 1, -18, 2, -4, 7, 12, -16, -21, 5, 49, 83, 38, -127, 33, -14, -27, 19, 18, 37, -4, -8, -52, 15, 21, 36, 8, 15, 48, -15, 71, -8, -10, 47, -43, 1, 19, 20, 41, 17, -24, 37, 11, 32, 67, 104, -1, -32, 27, 75, -20, -16, 56, -23, -31, -21, -5, -35, -92, 28, -44, 106, -11, -23, 35, -111, 33, 29, -66, -77, 13, -15, 60, 81, 70, 83, -51, 56, -2, -46, 86, -53, 2, -104, 52, -49, 42, -85, 4, -3, -94, 46, -23, -96, 35, 16, -74, -88, -18, 31, -54, 59, -47, 6, 79, 18, -5, 22, 26, 28, 31, -94, 56, 32, -40, -3, -6, -43, 80, 22, -90, -39, -46, 38, -95, 0, 12, 67, -57, 9, 127, -74, 23, 67, -16, 103, 61, 38, -3, 70, -14, 3, 8, -3, 127, -51, -88, -4, 10, 30, -23, 94, -50, -25, 32, -1, -33, 0, -87, -71, 3, 38, -27, 26, 74, 46, 60, 93, -29, 18, 22, 0, 10, -31, -55, -18, 81, -11, 71, 8, 48, -9, -1, 72, 59, -2, -13, 77, -10, -83, 84, -5, 31, 19, 7, -36, 29, 17, -47, 67, -19, 20, 44, 28, 35, 25, -22, 18, -55, -85, 14, -71, -33, 17, 34, 26, 19, 23, -25, -17, 3, -9, -8, 52, -36, -11, -41, -40, 87, -1, -15, 16, 9, -38, -19, -2, -11, -22, 44, 40, -2, -2, 3, 70, 6, -3, 8, -37, 7, 33, 4, -11, 21, -31, -6, -25, 41, 41, -21, 42, 3, 5, 41, -55, -41, 4, 46, -7, 35, -25, 13, 39, -62, -38, 25, 1, -35, -5, -72, -9, 40, 9, 41, -21, -45, -24, 43, -7, -127, -6, -21, 1, -7, 15, 24, -6, -20, -26, 55, -8, 62, 2, 4, -8, -18, 2, -15, -41, -25, 15, -64, 12, -1, -85, 49, -64, -49, 64, 59, 4, 13, 5, -31, 22, -13, -1, -37, -23, -27, -74, -29, -57, 31, -16, 20, 49, 20, -12, -38, 17, 20, 14, -25, -11, 15, 97, -127, -86, -14, 62, 30, 32, 23, 19, 69, 17, -24, 38, -12, 33, 49, 35, 103, 37, -24, -12, -19, 55, -21, -47, -21, -64, -104, -17, 42, 1, 0, -19, -13, 13, -72, 16, 34, -21, 26, 73, 58, 39, -52, 14, 1, 23, -49, 39, 22, -33, 21, -74, -9, -3, -8, -31, 1, 37, 33, 49, 27, -59, -63, -54, 18, -23, -90, -43, -96, 76, 50, 2, -30, 17, -34, 47, -36, -64, 25, -25, -8, 14, -127, 80, -22, 38, 76, -5, -21, 3, -53, 6, 11, -20, -69, -27, -13, 62, 16, -14, -28, 90, -64, -16, -43, -22, 7, 48, -33, 103, 35, 13, 51, -19, 63, 22, -16, 11, -3, -33, 47, 3, -117, 43, -56, 46, 39, 5, -28, -52, -31, 9, -14, 5, 79, -8, 39, 0, -38, 37, 0, -26, 5, -53, -43, 85, -12, 73, 8, 18, 110, 75, 13, 73, -22, -53, -32, 24, 31, -18, -15, 46, 14, -22, -2, -17, -4, -94, -45, 46, -27, 54, 78, -31, 2, -127, 14, 6, -54, 16, 18, 15, 7, -29, 6, -55, -26, -43, -25, 53, -79, -30, 23, 21, -12, -30, -34, 47, -4, -26, -22, -23, -32, -22, 5, 40, -9, 6, -21, 43, 49, 16, 10, 16, -46, 19, -17, 37, -31, -26, 28, 3, -23, -6, 17, 28, -37, 44, 20, -4, -2, -30, -18, 19, 40, -5, 22, -36, -5, -59, -2, 1, 28, 44, -23, 19, -127, 19, -32, 22, -7, -36, 28, -6, -33, 71, -8, 14, 31, 3, -4, 0, -41, -40, 43, 19, 3, -11, 84, -26, -66, 24, 44, -14, 39, 29, -12, -94, -59, -15, 29, 6, -16, 52, -8, 28, 78, -42, 58, -18, 14, -73, 42, -22, -69, 23, 26, -7, 63, 56, -42, 57, 51, 80, 14, -32, 90, -27, -52, -1, -18, -30, 14, 20, 46, 2, 0, -45, 13, -118, -22, -58, 18, -84, -38, -110, 90, -6, -2, 123, 1, -31, -3, -3, -18, 44, 16, -103, 26, 107, 50, 50, 17, -127, 4, 54, -69, 58, -6, -27, -44, -127, 86, -10, -30, 26, -19, -110, -13, 43, -46, 59, 46, 73, -68, -34, -48, -77, 73, -99, 5, -12, 78, 16, 11, -83, 6, 7, 91, -37, 22, 8, 50, 14, 59, 15, 26, 55, -17, -18, 80, -53, 33, 8, 1, -31, -37, 61, 9, 47, -19, 90, -7, 60, -26, -96, -21, -12, 48, 6, -2, 81, -53, 68, -43, 48, -19, -32, -41, 49, 20, -40, -28, -24, 38, -18, -27, 72, 4, 126, -40, 1, 17, -34, -22, 1, -3, -28, -35, -16, 16, -7, 19, 58, -47, -22, 19, -36, 9, 9, -28, -12, 7, -3, -28, 3, 10, 7, 11, -7, 7, -25, -15, 10, 22, -6, 4, -3, 20, -31, -14, -15, 2, 12, 3, -24, -29, -22, -26, -36, -65, 33, 36, 8, -19, -52, 102, -1, -18, 24, -9, 13, -6, 39, -8, -17, -10, 27, 12, 27, 26, -23, -16, 83, -10, -9, -46, -4, 127, -31, 20, -63, -19, -11, -32, -10, 19, -28, 16, -32, -16, -39, -63, 6, -30, 69, 24, 34, -1, 7, -44, 5, 43, -61, 38, 14, 32, 25, -36, -71, -8, 35, 43, 64, -23, -40, 18, 31, 20, 3, -25, -44, -92, 127, -69, 25, -31, 15, 10, -5, -30, 9, -30, 0, -27, -33, 38, -28, 48, 8, -36, -6, 19, -9, -17, -26, -13, 39, 24, -73, -10, -17, -48, -14, 44, 46, -7, -35, -76, -16, 26, -17, -27, 25, 58, 20, 5, -34, 63, 26, 5, 33, 3, 13, -24, -6, 10, 52, -44, -30, 34, 27, 20, -100, 16, -13, -59, 127, 65, 80, -11, 72, -45, -8, -43, -90, -21, 31, 59, -4, -29, -15, 8, 59, -42, 58, -18, 21, 118, 18, -71, 26, 45, -45, 6, 18, 76, -7, 42, -33, 32, -19, 40, 30, 35, -59, -52, -21, 26, 16, -13, 0, 41, -11, -30, -19, -6, 71, 14, -7, -38, -4, 80, 22, -13, -30, -7, -40, -49, 6, 16, -28, 8, 0, -34, -54, -37, -53, 29, -25, -33, 46, -10, 35, -2, -6, -48, 32, -20, -61, 37, -73, 54, 26, 10, -18, -10, -15, 91, -7, 47, 8, 39, 2, -25, -61, -63, 63, 23, 79, 25, 66, -15, -59, 21, 29, 22, -15, -23, 76, -41, -70, 15, 73, -17, 33, -39, 16, 19, -70, 0, -103, -32, -59, -39, 32, -15, 66, -8, 127, -60, -18, 55, -70, -39, -5, -71, 17, 24, 11, 58, -14, -16, -21, 13, -4, -9, 50, -40, -38, -22, -106, -44, -69, -15, -22, 17, -12, 110, -90, -40, 5, -77, -35, 40, 30, 3, -58, 1, 26, -13, 31, -93, 127, -42, 31, -26, 21, -1, -28, 21, -22, -91, -4, 22, 15, -40, 3, 30, -3, -27, -55, 90, -13, -13, 13, 0, -37, 29, 39, -81, 10, -67, -8, -17, -41, 22, 47, 29, 20, 63, 10, -4, 16, -11, 21, -51, -17, -45, -24, 14, 8, -34, -6, -5, 28, 30, 13, -127, 29, 25, -19, 49, -10, -24, -20, -1, 35, -17, 10, -95, -13, -14, -62, 0, 61, -1, 64, 0, -37, -14, -9, 36, 7, 3, -21, -98, 35, -59, -38, 119, -21, -5, 15, 68, 25, 5, -4, 3, -29, -3, -49, 20, 24, 11, 24, 34, 68, 12, -11, -17, -3, 21, -103, -6, 7, -2, 38, -50, -8, 9, 21, -74, 17, -55, -13, 17, 26, -2, -9, -70, -90, 9, 63, -6, -78, 37, 47, -36, -29, -22, 32, 14, -67, -22, -22, -3, -9, 9, -18, -24, -56, -13, 45, 127, 5, 16, 21, -46, -8, 31, -44, -87, -41, -30, 21, -4, -33, -11, 12, 76, -2, 5, 39, -7, 5, 2, 13, -52, -8, 2, 15, 68, 29, -76, -38, -7, -1, 3, 3, 41, -25, 22, -15, 10, -27, 7, -3, 34, -16, 9, -9, -83, 3, 71, 1, -63, 13, -24, 10, 3, -14, 8, -47, -45, 17, -76, 42, -80, -55, -19, -53, -18, 38, 45, 35, 31, -39, 49, -37, 39, 43, 32, 47, 81, -59, 21, -30, 89, 74, -9, -31, 22, -34, -38, 74, -7, 72, 55, 41, 54, -46, -50, -33, 127, 64, 36, 6, 6, 46, 14, 43, 21, -98, -10, -50, 5, 2, 39, 56, 78, 26, -13, -125, -16, -31, -56, -17, -3, 37, -40, 44, 44, 9, 1, -59, -2, -21, -78, -80, -63, 10, -24, -2, 28, 17, -54, 44, 68, 11, 2, 8, -15, -51, 16, -90, -10, 21, -4, 5, 34, -25, 67, 5, 52, 47, -37, -127, 31, 55, 6, -21, -23, 72, -15, 2, -47, -19, -2, 11, 17, -35, 54, 13, 31, 2, -12, 58, -8, -36, 8, 23, 44, -13, 23, 109, -22, 46, 48, 47, 15, -5, 77, 17, -10, -43, 11, -37, -41, -12, 6, -2, 0, -22, -4, -40, 13, -14, -29, -26, 5, 2, -19, 9, -5, 68, -5, 66, 27, -24, -18, 17, -17, -27, 33, -57, -39, 21, -25, -59, -9, 22, 2, 14, 12, -20, -31, -126, 2, -4, -38, -70, -41, 127, -23, 48, -37, -24, 10, -3, 43, -41, -33, 11, -8, -3, 41, -10, 57, -20, -5, 4, 18, 9, -46, 47, 13, 32, -70, 3, -32, -29, -27, -29, 35, 36, 70, -46, -33, 3, 21, -49, 25, -15, 18, 30, -29, 65, 4, -17, -7, -20, 84, 40, -33, 13, 51, -67, -85, -19, -16, -29, -7, 23, 33, 30, 29, 59, -61, 21, 39, -38, 17, -41, 17, -35, -69, 127, 28, -45, -2, 39, -22, -1, 6, 4, 79, 25, -60, -59, 32, 4, 59, -2, -30, 26, -27, 52, -55, 19, 1, -80, -5, -46, 22, -3, 16, -32, -67, -69, 56, 18, -31, -30, 8, -3, -27, 23, 64, 27, 35, -47, 48, 3, 3, 63, -39, 50, 2, -122, 31, -69, 55, -42, -93, -39, 8, 4, -59, 8, 5, -36, 39, -1, 42, 58, 66, 0, 47, -6, 33, -7, -7, -10, -65, -38, 38, 121, -21, 2, -2, 38, -31, 108, 38, -11, 47, 22, -8, -71, -23, 58, 16, -6, -34, 23, 127, 2, 10, -25, -35, -15, -82, 5, 19, -92, -38, -14, -8, -119, 16, 51, -7, -92, -69, -65, -93, -34, 44, 38, -41, -26, -37, -68, 29, -39, 46, -12, 39, -23, -53, -61, -3, -37, -127, 36, 0, 19, 72, -25, 0, -46, -72, 1, -6, -9, 10, 8, 16, -43, 0, -14, 11, -2, -10, 8, 22, -24, 14, -25, 9, 49, 49, -11, 67, 22, 55, 17, 5, -43, -107, 6, 21, 11, -8, -2, -25, -16, -10, -31, -5, 13, -20, 77, 13, -29, 8, 14, 31, 19, -38, -7, -1, 40, 21, -42, 57, 49, -38, 36, 85, 21, 23, -30, -5, -48, 23, 30, -79, 47, 17, 37, 52, -4, -49, 61, -3, -91, -36, -24, 8, -1, -30, 9, -8, 11, 33, 55, 81, 4, 42, -34, -10, -66, 26, -122, -44, 72, -35, -1, 17, 37, -4, 106, -20, 42, 77, -23, -34, -45, -17, -44, -48, 5, -14, -28, 14, -29, 46, 22, -54, -29, 12, -63, -40, 11, 4, -21, -52, -95, -68, 21, -127, -41, 10, -25, 5, -16, -30, -16, -82, -65, -36, 0, 67, 19, 22, -85, 34, -55, -2, 29, 68, -32, 7, -45, 4, 42, -18, 101, -96, 71, 61, -78, 74, 29, -47, 24, -16, -99, -24, 48, 79, 114, -62, -41, 33, -39, 73, 8, -84, 59, -63, 0, 47, -36, -14, 54, -43, 46, -65, 1, 107, -127, 46, -78, -71, 42, 36, -53, -40, 54, -61, 26, 98, -68, -18, -17, 53, 14, 2, -17, 34, 10, -50, -16, -99, 6, -76, -29, -40, 58, -1, -21, -41, 11, 23, 14, -15, 1, 14, -16, 25, 37, -7, 5, 28, -61, 6, 16, -5, -10, -45, 11, 8, 18, 14, -27, -23, -31, 37, 2, 8, 3, 29, 10, -18, -4, -7, -18, -32, 26, -17, -2, -18, -3, -26, -27, -6, -21, -22, 8, 40, -29, -18, -18, 127, 6, -28, 6, -39, 41, 7, 26, -1, -14, 23, 26, 18, 46, -24, -14, -53, 16, -23, 13, -13, -39, 92, -18, -35, 39, -81, -35, 61, 8, 61, 34, 73, -83, -12, -60, -25, -61, 127, 111, -14, -23, 32, 11, -50, -48, 56, -55, 23, 2, 59, 7, -22, 70, -19, 53, 105, -56, 12, -69, 50, -10, 24, 16, 19, 49, -79, 2, 100, 60, 40, 39, -67, -73, 2, -117, -76, -61, -34, 34, 13, -13, -27, 68, 4, -14, 18, 33, 13, 11, 9, 99, -21, 69, -9, 34, 10, 24, -33, -85, 78, -8, -20, -42, -6, 30, -32, -106, -17, -30, 42, -88, 14, -34, -20, -9, 28, -7, -33, -9, 17, -7, 13, 7, -46, -79, 4, -4, -40, 20, -25, -10, -2, 17, -2, 13, 21, -5, -21, 4, 42, -9, 27, 10, -64, 84, 17, 48, -6, -7, -2, 17, 40, -18, -127, -7, -46, -55, 39, -26, -26, -8, -58, -113, 68, 7, -11, -42, -6, 9, 23, 19, 6, 15, 6, -1, -21, -23, 10, -4, -2, 47, 41, -25, -24, -67, -67, -48, 43, -1, -41, -34, 19, 65, 33, -14, 33, -88, 9, 30, 18, 120, -43, 35, 12, -3, -23, -26, -22, -72, -15, 127, 16, 66, -80, -3, 17, 3, 67, 17, 30, -6, -65, 49, 14, 49, 8, 80, 34, -24, -80, 36, 8, -10, -20, -60, 74, -10, -22, -8, 34, 101, -18, -75, -36, -81, -59, -7, -69, 34, -17, 23, 50, -60, -42, 17, -24, -69, -40, -30, 25, 8, 66, 20, 2, 16, -59, 15, 30, 47, -8, -26, 20, -45, -122, -51, -24, 52, -20, -6, -97, 72, 25, -76, -25, -107, 42, -73, 76, -58, -5, 86, -73, 63, -39, -46, 98, 60, -22, 30, 32, -28, -35, 44, 28, -49, -3, 86, -101, -16, -19, -94, 12, 22, -18, -20, 116, -6, 17, 116, 56, -107, 36, -22, -25, -41, -121, -69, 114, 37, 40, 65, 13, -127, 97, 67, -3, -18, -25, -15, -9, 3, -53, 44, 38, -81, 8, -115, 36, -39, 32, 112, -1, -47, -17, -15, -54, 39, 69, 30, 21, 60, -66, 31, 47, -26, 29, -2, -64, 49, -62, 33, -80, 31, -23, -56, -72, -39, 37, -29, -14, 21, -40, -16, -32, 71, -26, 8, 29, 12, 100, 9, -21, 24, -115, -82, 38, -35, 48, 24, 123, 8, -63, -127, 18, 34, -75, -48, -64, -43, 4, -29, 35, 7, -44, -1, -16, 36, -5, -12, 3, -34, 104, -47, -63, 5, -24, -12, 72, 85, 61, -29, -34, 29, -24, 108, -26, 29, 45, 4, -77, -58, 3, 0, 15, 3, -46, -2, 52, 2, -36, 58, 18, 105, 2, -67, 77, -59, 71, 38, 3, -116, -68, 57, -18, 92, 17, 16, -17, -14, -26, -16, -11, 50, 0, 54, 121, 1, 85, 22, -127, -49, -88, -5, -74, 4, -23, -27, 78, -119, -8, -12, 46, 7, 24, 14, 19, 37, -58, -66, -54, 12, -98, -45, 74, -12, -24, -27, 20, -57, -53, 9, 11, -44, -5, 118, 17, 26, -41, 59, -8, -16, 39, 46, -36, 54, 80, 87, 40, -17, -54, -25, -79, -45, 34, -33, -29, -35, -49, 37, -70, 7, 4, -127, 55, 23, -25, 1, 19, -8, -51, -39, -62, 10, 67, -22, 12, -45, -20, -42, 107, -3, 30, -23, 9, 22, 97, 38, 3, -62, -12, 27, 21, 55, -9, 8, -15, -16, 35, -25, 7, 25, -19, 0, -13, 29, 32, 23, -60, -23, -24, 38, -79, -58, 4, 79, 64, -57, -42, 32, -32, 60, 3, -26, -24, 51, -22, -48, -2, -79, -8, 85, 100, 39, 87, -64, 76, -19, -14, -55, 12, -33, -43, 38, -63, -24, -12, 8, 8, 42, 8, -21, -59, -28, 65, -37, -2, 24, 26, 57, 47, 127, -6, -82, -17, -36, -80, 3, 66, 98, -37, 17, 38, -50, 17, -3, -33, -21, -19, -31, -8, -5, 23, 0, 13, -11, 53, 67, -35, -14, -16, -40, 4, -55, -16, -34, 19, 12, -4, -26, -57, 6, 34, -3, -7, 41, 8, -60, -2, 30, 15, -9, -30, -86, -17, 7, -24, 10, -25, 20, 34, 11, 19, -33, -26, 58, -34, 48, 28, -3, 29, 28, 29, -42, -14, -6, 27, -20, 41, -12, 88, 28, 38, -60, -12, 44, 4, -9, -3, -3, -17, -7, 28, 16, -42, -23, 127, 6, -48, -32, -50, -49, -34, -12, -14, -19, -30, 7, -34, -81, -30, -21, -14, -37, -88, 50, -38, 27, 75, -17, -2, -58, 16, -18, 21, 45, -37, -19, 127, 17, -62, -34, -23, -31, 0, -12, 30, 16, -75, 44, 41, 7, -1, -59, -47, 35, 18, -10, 6, -2, -18, 0, 69, 30, 6, -11, -2, 26, 68, 28, -39, 4, -44, 32, 29, 36, 27, -3, 24, -3, 7, -14, 36, 97, 23, -31, -12, 71, 48, -88, 11, 24, -13, -2, -39, -9, 22, 127, 1, -19, 34, 27, -15, 1, 51, 5, -26, 10, 0, 88, -10, 23, 34, -37, 20, 39, -20, -23, -2, -23, 1, 48, -55, -26, 5, -27, 8, -20, -3, -28, 37, 87, -23, 48, 4, -12, -46, 51, -25, 24, -11, 11, 4, 20, -70, -39, 13, 21, 4, -21, 11, -36, -52, -43, 1, -34, -6, -17, -55, -7, -33, -43, -15, -52, -9, 36, -46, -3, 47, 28, -44, -15, 105, -19, 101, -15, -34, 39, 16, 24, -24, -13, 16, 11, 1, -36, 21, 24, 103, 54, -29, -32, -52, 1, -73, -17, 11, 21, 14, 94, -16, 13, 8, -2, 25, 10, -20, 28, 33, -20, -16, -38, 27, 43, 25, -58, -4, -15, -121, -70, -2, -26, 20, -29, 50, 57, -31, -42, 61, 29, 30, 39, 5, -22, 15, 49, 3, -11, 7, 60, -1, 1, 11, 67, 4, -7, 1, -127, 31, -7, -65, 28, 56, 28, 3, -11, 32, -21, -11, 1, -73, -127, 8, -10, 53, -8, 5, 72, 45, -9, -105, -44, 3, 66, 7, 56, -30, 14, 10, 25, -34, 35, 22, 61, -21, -35, 37, 87, 46, -67, 19, -7, 65, -32, 12, -18, 10, 42, -83, -31, -16, 58, 17, 22, 15, 28, -35, -12, -50, 4, -8, -15, 12, 2, 55, 11, 37, -24, -7, 42, -13, -56, -23, 9, 79, 44, -51, -78, -20, 18, -45, -14, -8, 58, 9, -34, 4, 6, 4, 2, -28, -14, -15, -12, 38, -5, 77, -47, -72, 6, -39, 74, -29, 11, 20, 22, -9, 46, -23, -84, 65, -24, 61, 104, 38, -30, -21, 29, -39, 19, 85, -127, 10, 54, -41, -44, -21, 27, -51, 9, 2, 15, -73, -30, -50, -17, -58, 1, -42, -19, 0, 113, -94, -16, 20, 1, 13, 27, 10, 112, -54, 66, 74, -73, -20, -13, 7, -74, -79, -55, 35, -27, 35, -18, 109, -63, -30, 26, -36, 35, -25, 28, 32, 69, 23, 38, 47, -27, 6, -33, 26, -119, 8, 37, 40, -4, -5, 73, 58, 127, 30, 42, -13, -12, 5, -4, -41, 1, -48, -33, 16, 105, -44, -67, -17, 32, 15, 73, 72, 44, 94, -25, 27, -30, 43, 79, -32, 32, -17, 26, 50, 38, -93, -15, -51, 1, 1, 4, -68, -74, -47, -31, -82, -27, 11, -25, 8, 19, 2, -1, -6, 32, -67, 2, -94, -12, -7, -25, 37, -30, -23, -67, -7, -4, -13, -3, 2, -19, -26, -5, -23, 16, 1, -8, -31, 20, 35, 4, -44, 46, -30, 127, -13, 77, -43, 67, 64, -33, -44, -47, -53, -46, -79, -47, 4, 18, 15, 52, 29, -7, -37, -127, -47, -17, -68, -42, 82, -28, 64, 7, -4, -45, 44, 30, 4, -39, -26, 49, 82, -59, -19, 1, 21, -5, 51, 9, 10, -15, -41, -37, -62, -45, 27, 44, -75, 31, -92, 84, 78, 45, 22, -65, -16, 98, 23, -12, 10, 32, 69, -61, 60, -18, 115, 70, 11, -75, 46, 70, -4, -20, -13, 13, 0, 79, -57, 47, -60, -20, 127, 63, -49, -102, 45, 58, 34, 13, 121, -4, 79, 3, -54, 18, -9, 114, -21, -22, 8, -55, -8, 38, 93, -62, 101, -81, 47, 36, -2, 42, 46, 23, 55, -23, -43, 63, 8, 31, 25, 95, -68, -18, 42, 7, 16, 63, -120, 53, 73, 9, -7, 34, 76, -6, 9, 9, -12, 118, 24, -3, -28, -28, 94, 0, 25, 0, 22, 11, 12, -16, -127, -17, 38, -16, 29, 12, -27, 58, 3, 7, 3, 11, 16, 29, -67, -13, -13, -24, -13, 27, 48, 10, 11, -2, 59, -26, 21, 16, 68, -45, -46, -18, 45, -44, -6, 71, -31, 17, -24, -25, 32, 48, -5, -65, 14, 70, -50, -39, 17, -92, 13, 58, 21, -1, 15, 18, 107, 20, -26, -38, -38, 15, -69, 39, -10, 29, 49, 0, 109, -13, -5, -35, 63, -51, -7, 28, -32, -12, -8, 42, 21, 25, 10, -26, -10, 23, 59, -53, -2, -61, -43, -44, 21, -16, -15, 1, -18, 18, 51, 60, -1, -14, 41, 58, -37, -31, 99, -53, -2, 83, 2, 8, -61, -18, -48, 63, -87, -40, -49, 36, -24, 7, 1, 39, -127, 2, 61, -1, -62, -22, 24, 3, 39, -30, 13, 34, 17, -37, 14, 32, -24, -19, 0, 13, -16, 31, 12, 24, -22, -37, 10, 18, -12, -10, 4, -15, -1, -34, -6, -2, 104, 40, -5, 2, -4, 2, 15, 0, 19, -28, -62, 10, -7, -26, 127, -20, -2, -9, 10, -7, -39, -7, -32, 32, 13, -2, 61, 13, -22, 34, -10, -7, -45, 25, 34, -11, 7, -1, -7, 50, 6, -2, 17, 17, -27, -30, 4, 12, 12, 0, -4, -17, -14, -37, 2, -59, 25, 59, 1, -13, -24, -23, 46, 14, -9, -53, -21, 6, -20, 65, -38, -8, 25, -43, 74, -15, -38, -37, 74, 27, -45, 20, 8, 78, -14, 8, -28, -9, -44, -11, -9, -1, 19, -53, 3, 17, 39, 27, 39, -16, -77, 37, -19, 33, -18, -24, -127, -33, -6, 50, 22, -26, 122, 43, 48, 45, 8, -25, 32, -68, -40, 64, -66, -29, 6, 41, 9, 28, -28, 60, -43, -57, -75, -5, 84, 34, -43, -13, -20, -1, -21, -73, 32, -2, 16, -27, 59, 31, -12, -12, -16, 74, 25, -4, 41, 0, 10, 13, 65, 53, -48, 5, 18, 29, -50, 42, -7, 13, 3, -40, -55, -35, 16, 5, 50, -6, -3, 47, 35, 27, -24, 0, 6, 21, 39, 17, -127, -7, -14, -9, -26, -9, -62, -3, 16, -54, 3, -45, 4, 11, -11, 8, 34, -7, -21, -35, 11, 21, 36, -4, 9, 5, 48, 40, -101, 27, 44, -4, -54, -2, -53, 5, -2, -16, 26, 2, -48, 44, -23, -37, -93, -23, 16, -33, -23, -30, 12, -73, 51, 13, 22, -85, 6, 24, 42, -63, 26, -33, -34, 54, 15, 18, -65, -7, -96, -95, 15, -55, 79, -24, -46, 1, 51, 95, -43, -49, -79, 86, -46, 122, 4, -19, -53, 43, 23, -108, 30, 98, -29, 60, 60, -19, 114, 57, -26, -21, -46, 127, 35, 114, 23, -49, -21, 6, -49, 0, -21, -8, -1, -18, -9, -12, -8, 9, 5, 19, 15, 6, -4, 25, -28, 14, -22, -9, -24, -23, -1, 19, -1, 1, 7, -1, 25, 52, -1, 14, 6, -4, -32, 15, -16, 5, 66, 28, -30, 7, 3, 19, -11, 34, 22, -21, 4, 17, -48, -4, 14, 19, -43, 11, -2, 39, -21, -24, -10, -3, -10, 43, 9, 14, -3, -19, -6, -5, 127, 14, 7, -28, 52, 3, -35, -3, -5, -22, 14, -11, -39, -13, 32, -34, 6, -63, 53, 50, -11, -54, -26, -15, 6, 64, -6, 101, 9, -10, 89, -6, -23, -24, 9, 124, -37, 27, -19, 127, -18, 63, 42, 36, 71, -106, -49, 5, 34, -20, 64, -70, 31, -25, 9, 24, 33, -105, -32, -40, -62, 23, 6, -6, 37, 39, -18, -46, 63, 48, 42, 103, -43, -35, -48, 103, 4, 45, 94, 3, -69, -81, -45, 116, 31, -11, -28, -51, 57, -15, 13, -36, -23, -78, -32, -5, -12, -96, 25, -23, -57, 50, 37, -30, 20, 64, 16, -56, 6, -16, -25, -40, 9, 26, 68, -59, 29, -115, 13, 47, -4, 19, 33, 0, 82, 14, -2, 16, 13, -27, -47, 14, 127, 53, 49, 5, 34, -3, -62, 12, 11, -23, -73, 1, 80, -15, 60, -11, 111, -27, 87, 86, -4, -77, -35, 8, 34, -60, -110, 40, -6, 3, -29, 23, -14, -51, 24, -78, -16, -66, 66, -7, -113, 5, -84, 16, -4, -6, 100, 57, 20, -42, -96, -46, 7, -4, -71, 99, 69, -4, 0, -81, 21, -60, 95, 2, -73, -127, 48, 17, 22, -52, 50, 119, -8, -107, 6, 15, 1, -4, 30, 2, -48, 63, 64, -3, 86, -19, 5, -21, -41, -11, -86, -35, -21, -41, 50, 9, 57, 1, -115, 120, -52, 5, -79, 30, -2, 5, -1, -37, -5, -8, -78, -57, 41, 33, 30, -37, 22, -9, -90, 25, 92, -42, -17, 127, -17, -13, 2, 31, 1, 13, -14, -37, -3, -13, -12, -3, 14, 34, 18, -22, -9, -6, 4, -7, 52, -11, -16, -19, 29, 0, -17, -11, 4, -5, -7, -14, -14, 27, 41, -15, 36, 50, 30, -12, 11, -7, -48, 14, -6, 18, -26, 9, -17, -45, -29, 1, -53, 4, 20, -13, 10, 9, 16, -6, 14, 36, 13, 2, -17, 21, 19, 17, 3, 10, 2, -33, -14, 8, 25, 9, -2, -40, -68, -6, 4, 9, -34, 28, 50, 4, -25, -30, 28, -21, -25, -2, 36, -28, -26, -3, -11, 6, 51, 41, 127, 77, 7, -14, -22, -33, -34, 23, 17, 43, -80, -6, -20, 75, -3, -33, -3, 7, -6, 54, 35, -17, 27, 29, -2, -6, 15, 17, 33, -17, -37, 23, -28, -44, -29, 16, 12, -24, -83, 5, -24, -13, 18, 14, -48, -56, 59, 14, -42, -40, 18, 16, -14, 13, 32, 26, -92, -25, -53, -127, -32, -10, -13, -34, -7, -8, -6, -33, 45, -15, 15, 49, -42, -2, -17, -8, 5, -40, 21, -6, -13, -3, -68, -27, -5, 26, 18, 37, 17, 30, -12, -2, 18, 26, -8, -36, -27, 52, 60, 38, 50, -14, -76, 23, 7, -7, -10, -42, -11, 43, 36, -21, 26, 16, 44, -66, -9, 8, 2, -61, -34, -29, -8, 5, 36, -10, -37, 18, 2, -7, 48, 3, 92, -19, 91, 2, 5, -15, 0, -105, -31, -23, 15, 63, 24, -13, -45, 17, 35, 9, -1, 5, -1, -29, 47, -48, 2, 21, 32, -26, -15, -44, -45, 3, -65, -5, 65, 16, -38, -12, -87, 12, 20, 1, -6, -21, 76, -26, 32, 25, -70, 34, -26, -23, 41, 21, -10, -10, -73, -7, -22, -15, 127, 33, 56, 2, 40, 6, 18, -21, 13, -35, 13, -13, -17, 62, -37, 17, -32, -5, -24, -4, 43, -17, 39, 37, 70, 97, 7, -109, -16, 35, -1, -8, -17, 1, 33, -57, -49, -22, -6, -15, 31, 13, -72, 40, -20, -23, 11, -9, -59, 14, -17, -10, -11, 8, -4, 28, 15, -31, -57, 26, 56, 27, 22, -56, 35, -6, -6, 6, 33, 46, -53, -37, -49, -44, 13, 31, -15, 12, 116, 7, 88, -43, 15, 26, 31, -3, 16, 25, 28, 29, 26, -10, 64, -25, -6, 57, -17, -127, -36, -9, 61, -27, -59, 39, -69, 3, -24, -125, -31, 5, 30, 38, -4, -8, -18, -4, -29, -25, 7, 33, -12, -3, -3, -86, 24, 51, 33, -16, -5, 26, -26, 36, 6, 58, 89, -31, -21, 119, -28, 18, 10, 33, -41, 39, -83, -37, 12, -39, -44, -30, 40, 27, -11, 3, 9, 65, 87, 8, -42, 37, -7, -30, 53, 48, 21, 23, -16, -48, -15, 46, 51, 26, 19, -40, -82, 47, 6, -65, -47, -28, 127, 31, 27, 31, 6, 28, 40, 49, 17, 1, 0, 36, -47, -51, 48, 11, 127, -17, -25, -28, -54, -62, -33, 32, 21, 26, -30, 49, -36, -54, 17, 5, 113, 42, 36, -48, -37, -18, 20, -10, 65, -3, -11, -6, -2, 57, 76, -7, 67, -29, 79, -8, -44, -25, 19, 18, 32, -15, 16, 23, 41, 36, -38, -49, -50, 44, -5, 9, 8, 43, -2, -14, -48, -8, -13, -6, 78, 7, -72, -96, -2, 1, 40, -10, 80, -14, -92, -21, 36, -28, 30, 47, 39, -61, 11, 23, 63, 55, -54, -50, -40, -22, -18, -30, 32, 70, -23, 11, -61, -18, -41, 85, 61, 20, -40, 15, -69, -23, 9, 29, 60, -77, -52, -67, 56, -27, -6, 123, -81, -25, 29, -100, 112, -18, 127, -55, -6, -20, 16, 32, -96, -64, -28, -66, 0, 22, -92, 2, -18, -77, 43, -37, 2, 58, -31, -21, -23, 55, -40, -33, 21, 68, -102, -58, 21, 34, 13, 12, -14, -22, 23, 73, 27, -10, 34, 22, -3, -85, 49, 33, -30, -13, 38, 72, -5, -9, -15, -4, -15, 4, 44, -9, -88, -46, 40, -72, -56, 26, -117, -13, 19, -29, 96, 6, -20, -20, -9, -41, -105, 9, -14, 0, -4, -20, 119, 21, -52, 87, 18, -107, -83, 40, -127, 32, -28, 4, 0, 3, -22, 41, -30, 55, -25, -16, 29, 30, -21, -26, 18, 19, 36, 19, -118, 60, 21, 43, 16, -17, -5, 22, 20, -11, -18, -32, 11, -2, 64, 37, -18, -11, -3, -55, -9, -37, 28, 14, -18, 50, -15, -41, -39, 14, 32, 74, 4, -33, 27, -100, -49, -4, -62, -93, -63, 30, -2, 26, 35, -127, -14, -31, 50, 11, -13, -24, -28, -15, 56, -6, 66, -19, -100, -23, -76, 46, 23, 9, -2, -17, -24, 3, -6, -20, -15, 53, 46, 57, -84, -10, -16, -12, 6, 35, 35, -7, 11, -10, 52, -60, -22, -12, -31, 25, 17, -16, -50, -34, 16, -127, 29, 1, 33, 13, 111, -6, 67, -15, 33, 26, 11, 41, 9, 90, -11, 28, -66, 38, 38, 7, -29, 15, -60, -44, -58, 20, 4, 25, 23, -16, -5, -20, 47, -18, -2, -4, -9, 23, -9, -45, 2, 35, -24, -53, 33, 40, 16, 20, 20, -34, 35, -1, 2, 11, 17, -53, 57, 27, 31, -17, 68, 11, -53, 42, 17, 26, 60, 2, -21, -104, 22, 4, -26, -31, -39, -54, 3, 4, 2, 13, 48, 30, -15, 10, -99, -43, 64, 30, 55, 44, -7, 35, -10, 5, 24, -6, -13, 28, -54, -18, -33, 38, 21, -10, -21, -73, -77, 21, 22, 6, 81, -18, -127, 42, -47, -2, -62, 3, 18, 60, -49, 33, 15, 9, 30, 22, 16, -31, -2, 34, 33, -16, -36, 22, 27, 46, -13, -10, -24, -107, 16, -29, -15, 39, -74, -35, -62, 18, 57, -38, -57, -48, 42, -20, -20, 4, -8, -30, -59, -28, 4, 63, 21, 7, 8, -9, 27, -2, 17, -12, -60, 31, -5, -127, 44, 106, 13, -7, 29, 38, -30, -21, 16, -46, -49, -42, -59, -93, -29, -44, -41, 26, -41, -41, -75, 60, -109, 74, -59, -70, 74, 61, 17, 41, -79, -21, 71, 56, 20, 60, -20, 8, -60, 32, 21, 29, 11, -5, -40, 46, 32, -21, 51, 36, -12, -69, 26, 5, -39, 45, -72, -18, -26, -44, 43, -8, -31, 19, 42, 24, -8, -49, 72, -6, -13, -40, -58, -17, 15, -1, 127, 1, -47, 14, -39, 5, 84, 11, 54, -7, -126, -11, -3, 9, 2, -62, -62, -9, -28, 81, -23, 2, 54, 86, 2, -21, -11, 2, -32, 16, 45, 12, -15, -5, -62, 7, 54, 19, 89, 9, 68, -39, -69, -6, 54, 12, 125, 39, -14, -7, 28, -95, 23, 40, 31, 56, 127, 71, 37, 60, -65, 58, -110, -62, 46, 28, -91, 27, -17, -21, -1, -9, 58, 72, 19, 12, -38, 10, 13, -29, 40, -19, 56, 20, 16, 59, 72, -19, 31, 3, -18, -51, 27, 41, 22, 17, 54, 30, 76, 9, -96, -23, -49, 36, 13, -95, 94, 28, -1, 98, 9, 24, -85, 1, 5, -113, 4, -41, 27, -62, 6, -46, 33, 73, -24, -21, 17, 59, 48, 39, 24, 19, 119, 0, 60, -4, -98, 51, -15, -127, -12, -69, 11, 31, -16, -15, 47, 31, 33, 8, -23, 39, 40, -100, -11, 75, 6, -12, 31, 58, -96, 20, 18, 42, -30, 63, 28, 70, -8, -23, -83, 4, 10, -31, 29, -37, -50, 21, 37, 27, -111, -6, -47, 29, 54, -76, -83, 7, -86, -71, 13, -28, 41, -52, -24, -46, 32, -3, 54, 17, 2, 33, 13, 79, -20, 53, 33, 47, -7, -55, -7, -23, 13, 65, -100, 44, 66, -83, -51, -7, 8, -48, -23, 9, 35, -85, 12, -94, 67, -56, -18, -6, 23, -56, -15, -23, -11, 0, 91, 33, 34, 71, -33, 64, 48, -77, -6, 13, -56, 59, -74, -42, -18, 72, -67, 29, 39, 56, -78, 125, 26, 4, 17, 11, -17, -47, 109, 14, 2, 13, -3, 65, 11, -12, 20, 38, -58, -14, -127, 9, -7, -61, 23, -8, -22, -31, 104, 39, -103, -2, -11, 30, -13, 34, 19, 52, 6, -33, -34, 3, -13, -35, -40, 27, -16, 36, 10, 79, 3, -21, -13, 30, 70, -80, 12, 21, -71, 42, 13, 29, -42, 11, 0, 28, 57, 12, 33, -7, -8, 6, 7, -46, 38, 45, -13, -23, -65, 61, 0, -55, -14, 7, 54, 27, -64, -7, 42, 32, -24, -52, 48, 13, -17, 57, 14, 33, -8, 5, 40, 21, 17, -15, -8, -36, -18, -4, -24, 3, -127, 45, 1, -31, 2, 17, 16, 0, -10, 5, -80, 4, 41, -5, 14, -24, -6, 60, 17, 119, 58, -58, -28, 32, -5, 37, -41, 82, -40, 72, 1, 124, -26, -35, -36, 57, -4, 64, 0, 3, -31, 47, 66, -81, 61, -83, -1, -26, -51, -21, 12, -113, 54, -8, 8, -48, -127, 41, 15, -24, -28, -44, -51, -47, -23, 32, -50, -56, -26, -54, 16, 44, -28, 55, -4, -17, 117, -6, 1, -21, -23, 5, 54, -30, 10, 30, 26, -24, -7, 41, 20, -46, -30, 17, -28, -17, -7, 33, 41, 10, -16, -2, 22, 65, 18, -15, 9, 35, 72, -46, -32, 66, 51, -5, 41, -8, 81, 10, 12, -58, -29, 11, 33, 14, 20, -9, -20, -6, -72, 48, -31, 47, 15, -7, 9, -46, -20, -14, -19, 5, -14, -6, 8, 46, 127, -16, 79, -32, -32, 13, -6, 12, -20, 7, -17, -21, -31, -14, -22, 11, -27, 35, 11, -68, 9, 24, -54, 49, 123, -55, -33, 21, -89, -37, -52, -84, 67, -30, 7, -35, -20, 8, -74, 64, -4, 5, 23, 30, -17, 49, -38, 49, 2, 11, -2, 10, 11, 35, -29, 18, 71, -6, 58, 13, -56, -127, -59, 15, -67, 68, -30, -6, 5, -51, 65, -5, 10, -12, -115, -35, 20, -24, -30, -10, 88, -64, -34, 101, -33, 55, 41, 1, 24, 17, -3, -46, -7, 36, 11, -115, -8, 120, 10, -97, -14, 38, 21, -22, -17, -65, -21, 51, 40, 10, 21, 127, 45, -15, 10, 8, 9, -39, 40, 67, -37, 7, 2, -11, 32, 5, 40, -35, 33, -20, 20, 2, 6, 8, -5, -10, 10, -21, 6, -25, -3, 11, 30, -17, 19, 38, 11, -19, 32, 82, 35, 30, -9, -37, 28, -54, 1, 23, -47, 51, -31, -10, -23, 37, 24, 22, 4, -15, -7, -26, 11, 22, -14, 44, -28, 13, 6, 55, -4, -26, 30, -33, -61, 24};

float bias_raw[480]={0.0421675406396389, -2.2728660106658936, 0.34903281927108765, 0.00269220769405365, -0.7146023511886597, -0.8493106961250305, -0.3061252236366272, -0.8413827419281006, -0.38223153352737427, 0.33429837226867676, 0.9207348823547363, -2.0826354026794434, -2.8381175994873047, -0.5702238082885742, 0.9151138067245483, -0.16559302806854248, -1.6543443202972412, -1.11558198928833, 1.3501898050308228, -0.2350136935710907, 0.48846790194511414, 0.11765119433403015, -0.08831429481506348, 0.7530389428138733, -1.1427793502807617, 1.2743746042251587, -0.0052854642271995544, 0.2756062150001526, 1.2233262062072754, 0.480657696723938, -2.112468719482422, 0.2968401610851288, -0.80402010679245, -0.900253176689148, -1.348010778427124, 1.4971600770950317, -1.610764980316162, -1.6243784427642822, -3.3879101276397705, 0.20158705115318298, -1.4763360023498535, 0.29974591732025146, -1.3942368030548096, -0.8473291397094727, 0.8459430932998657, -0.9643961787223816, 0.27637213468551636, 1.9751039743423462, -1.5598312616348267, -2.1139256954193115, 0.3645429313182831, -0.4000646770000458, 1.4481862783432007, 0.5236014127731323, -1.7215455770492554, -2.0634090900421143, 1.9606198072433472, -0.0628749430179596, -0.11080929636955261, 1.0930408239364624, -0.03592003881931305, -0.5936337113380432, -0.2673370838165283, 1.6595103740692139, 0.8317064046859741, 0.0129276467487216, 1.1314678192138672, -0.019696291536092758, -0.0039193471893668175, 1.3547853231430054, -0.6713725328445435, -1.1524150371551514, 0.7630323171615601, 0.9507408738136292, 1.522204041481018, -2.1477670669555664, -0.46482107043266296, 1.8606067895889282, 1.5339865684509277, 1.496645450592041, -2.40362286567688, 2.4077353477478027, 0.2570646405220032, 0.8392090201377869, 0.844316840171814, 0.10553821176290512, 1.1478421688079834, -1.1349974870681763, -1.5770800113677979, -1.2118347883224487, 0.9422760009765625, -0.39653533697128296, 1.0495110750198364, -0.26679810881614685, -0.0167866051197052, 0.7883684635162354, -0.8750230669975281, 1.1627076864242554, -0.30955082178115845, 0.6366448998451233, 0.9390590786933899, -0.7581483125686646, 1.1972057819366455, -0.31367364525794983, 1.6215976476669312, 1.0478683710098267, 0.9941123127937317, -0.2128397822380066, -0.014280669391155243, 0.0603843592107296, -0.009089894592761993, -1.6954270601272583, 0.2820490896701813, 0.9014405012130737, -0.2609091103076935, -1.4632283449172974, 0.8585442304611206, 0.018279924988746643, 1.0370317697525024, 1.5486167669296265, 0.0891389399766922, -0.061977386474609375, -1.1150386333465576, -0.2440870851278305, 1.1209906339645386, 0.13656483590602875, -0.03218133747577667, 1.0307234525680542, -0.1572057008743286, -1.8992747068405151, -0.558156430721283, 0.8284818530082703, 0.2262314260005951, 0.07484091073274612, -0.1481548696756363, 0.4466535747051239, 1.429906964302063, 0.31521400809288025, -0.18792715668678284, -0.6292973756790161, 0.46962711215019226, -1.4647873640060425, -0.1394890546798706, -0.807929277420044, 0.2940523326396942, 1.1122815608978271, -1.1111767292022705, -0.9182090759277344, 0.6406090259552002, -0.39177778363227844, -0.013661570847034454, -1.1279354095458984, 0.37651991844177246, -0.5875316858291626, 0.6184449791908264, -0.5361612439155579, -0.4420922100543976, 0.7706703543663025, 1.1894294023513794, -0.5357993245124817, 1.449580192565918, -0.05830865725874901, 0.12590092420578003, 0.03813116252422333, 0.3468095362186432, -1.8245954513549805, -0.9650629758834839, 0.11375172436237335, -0.5131840705871582, 0.02050720900297165, -1.9919737577438354, 0.44293680787086487, -2.1616814136505127, -0.9040646553039551, 0.12941594421863556, -1.5226359367370605, 0.5114165544509888, 0.7387391924858093, 0.42712000012397766, 0.7161986827850342, -0.7574230432510376, 0.8569926619529724, 0.9489516615867615, -1.9959713220596313, 0.7036254405975342, 0.9416229128837585, -0.8770211935043335, -0.06568631529808044, 0.9071242809295654, 0.15635932981967926, 0.23460018634796143, -0.5725294947624207, 1.4173380136489868, -0.15329374372959137, -0.5119534730911255, -1.5015389919281006, 0.23079587519168854, -0.140385240316391, 1.128904104232788, 0.24616611003875732, -0.3621606230735779, 0.04370809718966484, -0.6232389807701111, 0.03463947772979736, 0.19848036766052246, -0.7870683670043945, -0.007524129003286362, 0.003839859738945961, 1.1731222867965698, -0.3312126696109772, 0.12971171736717224, 1.4598534107208252, 0.0664745569229126, -0.005544506013393402, 0.10944458842277527, -0.7068815231323242, 1.0898616313934326, 0.4079647660255432, 0.03636953607201576, -1.7691676616668701, -1.8322484493255615, -1.0657055377960205, 0.7290397882461548, 0.1544097363948822, -0.0067101456224918365, -1.5277166366577148, 1.3469568490982056, 0.8409361243247986, 0.3274303376674652, -2.849045991897583, -1.814464807510376, 0.5966569185256958, -2.3332273960113525, -1.7533835172653198, -1.63028085231781, 1.5680397748947144, 0.9661281108856201, 0.8973059058189392, -0.6095842719078064, -1.2428747415542603, 1.0061739683151245, 0.21792685985565186, 0.3716650605201721, -2.0661847591400146, 1.217693567276001, 0.4912964105606079, 0.03633775934576988, 0.36248770356178284, 0.7871964573860168, 0.11969810724258423, 0.1508501023054123, -0.20039857923984528, -0.21028360724449158, 1.3096187114715576, 0.030289024114608765, 1.463985800743103, 1.5218102931976318, 0.056876424700021744, -1.4506984949111938, 0.04874970018863678, 0.044516421854496, -0.9104485511779785, 1.0201970338821411, 1.5301837921142578, -0.49855175614356995, 0.7545605897903442, 1.0183351039886475, -0.35466617345809937, 0.8643109798431396, -0.15642499923706055, -0.40159064531326294, 0.42939263582229614, 0.08590635657310486, 0.9301936030387878, -0.737387478351593, 1.044705867767334, 1.5834898948669434, 0.33186495304107666, 0.05597836151719093, 0.026268456131219864, 1.6416893005371094, -0.34500932693481445, 1.7035020589828491, 0.4411749243736267, -0.1202116310596466, -1.6434448957443237, -0.9049773216247559, -0.25499507784843445, -0.7395586967468262, 1.1088128089904785, -1.0611681938171387, -1.8303990364074707, -1.4706435203552246, 1.4356293678283691, 0.44274696707725525, 0.10155656933784485, 1.280574083328247, -0.449360728263855, -0.23584279417991638, -0.20681031048297882, 1.45078706741333, 0.3173193335533142, 0.5964739322662354, 0.01406298577785492, 0.23947998881340027, -0.3960627317428589, 0.4308743476867676, 0.7465065717697144, -1.6855378150939941, 0.03207332640886307, -0.43093162775039673, 0.18339134752750397, 0.7367221713066101, -0.5835980176925659, 0.9004681706428528, 0.8135830760002136, 0.11536341905593872, 0.9345909357070923, 1.4024945497512817, -0.1170031726360321, 0.30299219489097595, -1.4531946182250977, -1.9667208194732666, -3.3735859394073486, 0.9873318076133728, -0.03178301453590393, 0.36335259675979614, 0.0024953633546829224, 1.2708380222320557, 1.0443103313446045, 0.3929630517959595, 0.11437593400478363, 0.05576939508318901, -1.7329696416854858, 1.5891987085342407, 0.1201634481549263, -0.1276097446680069, -0.6845409870147705, -0.8778507113456726, 0.8023697137832642, 0.10686412453651428, -0.0413365364074707, 1.923929214477539, 1.297316312789917, 0.17893676459789276, 0.3884088099002838, -1.0882076025009155, -0.4093915820121765, 0.14663510024547577, 0.9309112429618835, 0.13667824864387512, -1.7842893600463867, -0.2978995740413666, 0.5853284001350403, 0.026299208402633667, -0.09195002913475037, 1.6440457105636597, 0.11963564157485962, -0.7634048461914062, -0.013345114886760712, 1.2773380279541016, -1.5598076581954956, -1.146911382675171, 0.7601479887962341, 1.3573431968688965, 0.03339384123682976, -0.10898041725158691, -0.017343886196613312, 0.04083600640296936, 0.08031538128852844, 0.5464262962341309, -1.9525781869888306, -0.7619601488113403, 0.5882729291915894, -1.9231634140014648, -0.37671053409576416, 1.3975943326950073, -0.9735984802246094, 1.1123831272125244, 0.21475955843925476, 0.06817399710416794, -1.3873615264892578, -0.6128643155097961, 0.5178639888763428, -0.3745476007461548, -1.428687572479248, -1.5232455730438232, -0.05976438149809837, 0.04686026647686958, 0.2039610743522644, 0.9537369608879089, -1.5196573734283447, 0.8555448055267334, 0.3846961557865143, 0.8059242367744446, -0.2934911251068115, -1.7953308820724487, -0.08660034835338593, -0.4816889464855194, 1.3334062099456787, 0.23474396765232086, -1.7424856424331665, -0.0001916438341140747, -0.15091736614704132, 0.6413806676864624, 0.4635234475135803, 0.09560360759496689, -0.5286282896995544, -1.4131100177764893, -0.5458664298057556, -1.7451962232589722, -1.4473659992218018, 0.5201593041419983, -0.2019353210926056, 0.18976885080337524, 1.1009474992752075, 1.2879078388214111, -2.349802255630493, 1.0842758417129517, -0.6644256114959717, -0.0019669383764266968, 0.13841386139392853, 0.017318710684776306, -1.195153832435608, 1.19514799118042, -1.6409637928009033, 0.26421064138412476, -1.072599172592163, -0.2582896649837494, -0.3728904128074646, 0.0667228251695633, 1.351506233215332, -0.8152086734771729, -0.6549816131591797, -0.6386963129043579, 1.4229737520217896, -0.2512829899787903, -1.499413013458252, -1.4253287315368652, 0.20919398963451385, -1.4300315380096436, -1.1197054386138916, 0.9050156474113464, -0.9245641231536865, -0.6085863709449768, -0.014175599440932274, -0.7070927023887634, 0.9421258568763733, 1.3542137145996094, 0.8504034280776978, 1.4410688877105713, 0.26067429780960083, -1.0967624187469482, 0.20450535416603088, -0.40488696098327637, 0.285965234041214, 0.4469221830368042, -0.22381503880023956, -0.08512468636035919, -1.7003570795059204, -0.5097121000289917, -0.03821618854999542, 0.7839866876602173, 0.41716304421424866, 0.11622270941734314, 0.11020302027463913, 0.125284805893898, 0.011543363332748413, 0.24270248413085938, -0.22420963644981384, 0.08574517071247101, 0.19849053025245667, -1.1386996507644653, -0.6151415109634399, -0.4552907943725586, -1.2335604429244995, 0.2337501049041748, -1.124877691268921, -0.5216190814971924, 0.2842560112476349};

int8_t* filter_tensor_data=filter_raw;
float* bias_tensor_data=bias_raw;

bool has_conv_bias=true;
const int stride_width=1;
const int stride_height=1;
const TfLiteFusedActivation activation=kTfLiteActNone;
const int dilation_width_factor=1;
const int dilation_height_factor=1;
const int filter_dims_size=4;
const int32_t filter_dims_raw[4]={480,1,1,80};
const int bias_dims_size=1;
const int32_t bias_dims_raw[1]={480};
const TfLitePadding paddings=kTfLitePaddingSame;
const TfLiteType filter_type=kTfLiteInt8;
const TfLiteType bias_type=kTfLiteFloat32;
const float scale_filter=0.0;
const int32_t zero_point_filter=0;
const float scale_bias=0.0;
const int32_t zero_point_bias=0;
// const float scales_filter=;
// const int32_t zero_points_filter=;
// const float scales_bias=;
// const int32_t zero_points_bias=;

struct OpData {
  // IDs are the arbitrary identifiers used by TF Lite to identify and access
  // memory buffers.
  int im2col_id = kTensorNotAllocated;
  int hwcn_weights_id = kTensorNotAllocated;
  int input_quantized_id = kTensorNotAllocated;
  int scaling_factors_id = kTensorNotAllocated;
  int input_offset_id = kTensorNotAllocated;
  int accum_scratch_id = kTensorNotAllocated;
  // Row sums are used to cache filter sums for hybrid zero-point calculations.
  int row_sums_id = kTensorNotAllocated;

  TfLitePaddingValues padding;
  // The scaling factor from input to output (aka the 'real multiplier') can
  // be represented as a fixed point multiplier plus a left shift.
  int32_t output_multiplier;
  int output_shift;

  // Per channel output multiplier and shift.
  std::vector<int32_t> per_channel_output_multiplier;
  std::vector<int> per_channel_output_shift;

  // The range of the fused activation layer. For example for kNone and
  // uint8_t these would be 0 and 255.
  int32_t output_activation_min;
  int32_t output_activation_max;
  // Indexes are the offset to the memory buffer in the array used to keep track
  // of the allocated temporaries.
  int32_t im2col_index;
  int32_t hwcn_weights_index;
  int32_t input_quantized_index;
  int32_t scaling_factors_index;
  int32_t accum_scratch_index;
  int32_t input_offset_index;
  int32_t row_sums_index;

  bool need_hwcn_weights = false;
  bool have_weights_been_transposed = false;
  bool need_im2col = false;
  // If it's true, it means im2col is needed but gets disabled because the
  // temporary im2col tensor requires too much memory (i.e.
  // >= kMaxIm2colBufferSize);
  bool im2col_oversized = false;

  bool supports_multithreaded_kernel = false;
  bool is_hybrid_per_channel = false;
  bool compute_hybrid_row_sums = true;

  // Number of convolution groups.
  int32_t groups = 1;
};

inline PaddingType RuntimePaddingType(TfLitePadding padding) {
  switch (padding) {
    case TfLitePadding::kTfLitePaddingSame:
      return PaddingType::kSame;
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
  }
}

void ExtractConvParams(TfLitePadding padding, int stride_width, int stride_height, 
                               int dilation_width_factor, int dilation_height_factor,
                               TfLiteFusedActivation activation,
                               TfLiteConvParams* data_params) {
  // TfLiteConvParams data_params;
  data_params->padding = padding;
  data_params->stride_width = stride_width;
  data_params->stride_height = stride_height;
  data_params->dilation_width_factor = dilation_width_factor;
  data_params->dilation_height_factor = dilation_height_factor;
  data_params->activation = activation;
  // return data_params;
}

void GetConvTensor(TfLiteType type, const char* name, TfLiteIntArray* tensor_dims_data, 
                       TfLiteQuantizationParams quant_params,
                       char* tensor_data, TfLiteAffineQuantization* quant_struct,
                       size_t bytes_size, TfLiteTensor* tensor) {
  tensor->type = type;
  tensor->name = name;
  tensor->dims = tensor_dims_data;
  tensor->params = quant_params;
  // tensor->data.raw = reinterpret_cast<char*>(tensor_data);
  tensor->data.raw = tensor_data;
  tensor->bytes = bytes_size;
  tensor->allocation_type = kTfLiteMemNone;
  // data_0.allocation = allocation;
  tensor->is_variable = false;
  if (type != kTfLiteFloat32) {
    tensor->quantization.type = kTfLiteAffineQuantization;
    tensor->quantization.params = quant_struct;
  } else {
    tensor->quantization.type = kTfLiteNoQuantization;
  }
  tensor->sparsity = nullptr;
}

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  // This is a builtin op, so we don't use the contents in 'buffer', if any.
  // Instead, we allocate a new object to use as scratch space for im2col, and
  // to carry information from Prepare() to Eval().
  auto* data = new OpData;
#if defined(TFLITE_WITH_MULTITHREADED_EIGEN)
  eigen_support::IncrementUsageCounter(context);
#endif
  return data;
}

void Free(TfLiteContext* context, void* buffer) {
#if defined(TFLITE_WITH_MULTITHREADED_EIGEN)
  eigen_support::DecrementUsageCounter(context);
#endif
  delete reinterpret_cast<OpData*>(buffer);
}

// Naive implementation of transpose for floats. Could be optimized to be more
// cache friendly, but for now it's a one-time cost on first run, and we would
// prefer to remove the need to do this at all eventually.
void TransposeFloatTensor(const TfLiteTensor* input, TfLiteTensor* output) {
  const int rows = output->dims->data[1];
  const int cols = output->dims->data[0];
  const float* input_data = GetTensorData<float>(input);
  float* output_data = GetTensorData<float>(output);
  for (int i = 0; i < rows; ++i) {
    for (int j = 0; j < cols; ++j) {
      const float in_value = input_data[i * cols + j];
      output_data[j * rows + i] = in_value;
    }
  }
}

// Check if im2col needs to be allocated, as some version of optimized Conv dont
// use it. If any change is supporting im2col in any of the Conv versions, then
// it should be updated here as well
bool IsIm2ColRequired(const TfLiteTensor* input, TfLiteConvParams* params,
                      const TfLiteTensor* filter, OpData* data, bool is_hybrid,
                      KernelType kernel_type) {
  // If HWCN weights are required, Im2Col not required
  if (data->need_hwcn_weights) return false;

  // segregate based on dilated conv & non-dialated conv
  const bool need_dilated_im2col =
      params->dilation_width_factor != 1 || params->dilation_height_factor != 1;
  const bool need_non_dilated_im2col =
      params->stride_width != 1 || params->stride_height != 1 ||
      filter->dims->data[2] != 1 || filter->dims->data[1] != 1;

  const bool need_im2col = need_dilated_im2col || need_non_dilated_im2col;

  // Return early as basic requirement is not met
  if (!need_im2col) return false;

  // Special case for Hybrid, as it supports only non-dilated im2col currently
  const bool is_hybrid_non_dilated = is_hybrid && need_non_dilated_im2col;
  const bool is_quantized = input->type == kTfLiteUInt8 ||
                            input->type == kTfLiteInt8 ||
                            input->type == kTfLiteInt16;

  switch (kernel_type) {
    case kReference:
      if (is_hybrid) {
        return true;
      } else {
        return false;
      }
    case kGenericOptimized:
    case kCblasOptimized:
      if (is_hybrid && !need_non_dilated_im2col) {
        return false;
      } else {
        return true;
      }
    case kMultithreadOptimized:
      if (is_hybrid_non_dilated || is_quantized ||
          !data->supports_multithreaded_kernel) {
        return true;
      } else {
        return false;
      }
    default:
      return false;
  }
}

// Allocate temporary tensors (`im2col`, `hwcn_weights` if necessary).
// Note: `context->AddTensors` might invalidate pointers to existing tensors.
// Therefore the logic to add tensors are isolated into this function.
static TfLiteStatus AllocateTemporaryTensorsIfRequired(
    TfLiteContext* context, TfLiteNode* node, bool is_hybrid,
    bool is_per_channel, KernelType kernel_type, size_t im2col_bytes) {
  // auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);
  TfLiteConvParams data_params;
  ExtractConvParams(paddings, stride_width, stride_height, dilation_width_factor, dilation_height_factor, activation, &data_params);
  TfLiteConvParams* params = &data_params;

  OpData* data = reinterpret_cast<OpData*>(node->user_data);

  // TF_LITE_ENSURE(context, node->inputs->size >= 2);
  const TfLiteTensor* input;
  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));
  TfLiteTensor filter_tensor;
  TfLiteIntArray* filter_dims_data = TfLiteIntArrayCreate(filter_dims_size);
  int size_filter = 1;
  for (int i = 0; i < filter_dims_size; i++) {
    // std::cout << "dims_raw: " << dims_raw[i] << std::endl;
    filter_dims_data->data[i] = filter_dims_raw[i];
    size_filter *= filter_dims_raw[i];
  }
  size_t bytes_size_filter = sizeof(float) * size_filter;
  TfLiteQuantizationParams filter_params;
  filter_params.scale=scale_filter;
  filter_params.zero_point=zero_point_filter;

  TfLiteFloatArray* scale_array_filter = TfLiteFloatArrayCreate(1);
  scale_array_filter->data[0] = scale_filter;
  TfLiteIntArray* zero_point_array_filter = TfLiteIntArrayCreate(1);
  zero_point_array_filter->data[0] = zero_point_filter;

  TfLiteAffineQuantization quant_struct_filter;
  quant_struct_filter.scale = scale_array_filter;
  quant_struct_filter.zero_point = zero_point_array_filter;
  quant_struct_filter.quantized_dimension = 0;
  // float* filter_data;
  // filter_tensor_data = filter_raw;
  GetConvTensor(filter_type, "filter", filter_dims_data, filter_params,
                       reinterpret_cast<char*>(filter_tensor_data),
                       &quant_struct_filter, bytes_size_filter, &filter_tensor);
  const TfLiteTensor* filter = &filter_tensor;
  // TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &filter));

  // If we're using the optimized multithreaded EigenTensor implementation of
  // convolution, it expects the filter weights to be transposed compared to
  // the normal TF Lite buffer format. Typical TF Lite weights are
  // [filter_count, filter_height, filter_width, input_depth], but for the float
  // implementation we need them as [filter_height, filter_width, input_depth,
  // filter_count]. We get to that format by transposing, and create a temporary
  // buffer to store the results.
  // This path is only used for float processing, so only create the buffer if
  // we're running with that data type.
  data->need_hwcn_weights =
      input->type == kTfLiteFloat32 && data->supports_multithreaded_kernel;

  // We don't always need to allocate im2col. It is only used in some versions
  // of the optimized Conv. This test just mimics something that happens inside
  // optimized_ops.h, in order to avoid a DCHECK(!im2col_data).
  data->need_im2col =
      IsIm2ColRequired(input, params, filter, data, is_hybrid, kernel_type);

  // If im2col_oversized is found to be true, we have to fallback to an
  // execution path (like kReference in float/quantized cases) that doesn't
  // require im2col operation. Therefore, we have to skip checking the hybrid
  // case (but not the hybrid-per-channel one) where there's no such a fallback
  // execution path.
  // TODO(b/178743262): Consider making this check conditioned on the available
  // memory of the system, rather than coupling to the mobile platform check.
  if (IsMobilePlatform() && !(is_hybrid && !is_per_channel) &&
      data->need_im2col && im2col_bytes >= kMaxIm2colBufferSizeMobile) {
    data->need_im2col = false;
    data->im2col_oversized = true;
  }
  int temporaries_count = 0;
  if (data->need_im2col) {
    data->im2col_index = temporaries_count;
    if (data->im2col_id == kTensorNotAllocated) {
      context->AddTensors(context, 1, &data->im2col_id);
    }
    ++temporaries_count;
  }
  if (data->need_hwcn_weights) {
    data->hwcn_weights_index = temporaries_count;
    if (data->hwcn_weights_id == kTensorNotAllocated) {
      context->AddTensors(context, 1, &data->hwcn_weights_id);
    }
    ++temporaries_count;
  }

  if (is_hybrid) {
    // Allocate tensor to store the on-the-fly quantized inputs.
    data->input_quantized_index = temporaries_count;
    if (data->input_quantized_id == kTensorNotAllocated) {
      TF_LITE_ENSURE_OK(
          context, context->AddTensors(context, 1, &data->input_quantized_id));
    }
    ++temporaries_count;

    // Allocate tensor to store the quantization params computed during
    // on-the-fly input quantization.
    data->scaling_factors_index = temporaries_count;
    if (data->scaling_factors_id == kTensorNotAllocated) {
      TF_LITE_ENSURE_OK(
          context, context->AddTensors(context, 1, &data->scaling_factors_id));
    }
    ++temporaries_count;

    // Allocate tensor to store the accumulators for the matrix multiply.
    data->accum_scratch_index = temporaries_count;
    if (data->accum_scratch_id == kTensorNotAllocated) {
      TF_LITE_ENSURE_OK(
          context, context->AddTensors(context, 1, &data->accum_scratch_id));
    }
    ++temporaries_count;
    if (is_per_channel) {
      data->input_offset_index = temporaries_count;
      if (data->input_offset_id == kTensorNotAllocated) {
        TF_LITE_ENSURE_OK(
            context, context->AddTensors(context, 1, &data->input_offset_id));
      }
      ++temporaries_count;

      data->row_sums_index = temporaries_count;
      if (data->row_sums_id == kTensorNotAllocated) {
        TF_LITE_ENSURE_OK(context,
                          context->AddTensors(context, 1, &data->row_sums_id));
      }
      ++temporaries_count;
    }
  }

  TfLiteIntArrayFree(node->temporaries);
  node->temporaries = TfLiteIntArrayCreate(temporaries_count);

  return kTfLiteOk;
}

TfLiteStatus Prepare(KernelType kernel_type, TfLiteContext* context,
                     TfLiteNode* node) {
  // std::cout << "codes runs here #-1" << std::endl;
  // auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);
  TfLiteConvParams data_params;
  ExtractConvParams(paddings, stride_width, stride_height, dilation_width_factor, dilation_height_factor, activation, &data_params);
  TfLiteConvParams* params = &data_params;

  OpData* data = reinterpret_cast<OpData*>(node->user_data);
  // std::cout << "codes runs here #-2" << std::endl;
  bool has_bias = false;
  // Check number of inputs/outputs
  // TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
  TfLiteTensor* output;
  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));
  const TfLiteTensor* input;
  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));
  // const TfLiteTensor* filter;
  // TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &filter));
  // TfLiteTensor* filter;
  TfLiteTensor filter_tensor;
  TfLiteIntArray* filter_dims_data = TfLiteIntArrayCreate(filter_dims_size);
  int size_filter = 1;
  for (int i = 0; i < filter_dims_size; i++) {
    // std::cout << "dims_raw: " << dims_raw[i] << std::endl;
    filter_dims_data->data[i] = filter_dims_raw[i];
    size_filter *= filter_dims_raw[i];
  }
  size_t bytes_size_filter = sizeof(float) * size_filter;
  TfLiteQuantizationParams filter_params;
  filter_params.scale=scale_filter;
  filter_params.zero_point=zero_point_filter;

  TfLiteFloatArray* scale_array_filter = TfLiteFloatArrayCreate(1);
  scale_array_filter->data[0] = scale_filter;
  TfLiteIntArray* zero_point_array_filter = TfLiteIntArrayCreate(1);
  zero_point_array_filter->data[0] = zero_point_filter;

  TfLiteAffineQuantization quant_struct_filter;
  quant_struct_filter.scale = scale_array_filter;
  quant_struct_filter.zero_point = zero_point_array_filter;
  quant_struct_filter.quantized_dimension = 0;
  // float* filter_data;
  // filter_tensor_data = filter_raw;
  GetConvTensor(filter_type, "filter", filter_dims_data, filter_params,
                       reinterpret_cast<char*>(filter_tensor_data),
                       &quant_struct_filter, bytes_size_filter, &filter_tensor);
  const TfLiteTensor* filter = &filter_tensor;

  // Check dimensionality of input, filter
  TF_LITE_ENSURE_EQ(context, input->dims->size, 4);
  TF_LITE_ENSURE_EQ(context, filter->dims->size, 4);
  // Check input channels matching filter
  // Filter input channel can be a factor of channels of input (grouped conv)
  // or equals (normal conv).
  auto input_channel = input->dims->data[3];
  auto filter_input_channel = filter->dims->data[3];
  TF_LITE_ENSURE_EQ(context, input_channel % filter_input_channel, 0);
  data->groups = input_channel / filter_input_channel;
  // std::cout << "codes runs here #-3" << std::endl;
  // Check types. (We assume that UINT8 refers to quantized tensors)
  TfLiteType input_type = input->type;
  TF_LITE_ENSURE(context,
                 input_type == kTfLiteFloat32 || input_type == kTfLiteUInt8 ||
                     input_type == kTfLiteInt8 || input_type == kTfLiteInt16);
  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input_type);

  if (input_type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
  }
  // Filter must have zero zero-points in per-channel quantization.
  if (input_type == kTfLiteInt16 || input_type == kTfLiteInt8) {
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
                      kTfLiteAffineQuantization);
    const auto* affine_quantization =
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    for (int i = 0; i < affine_quantization->zero_point->size; ++i) {
      TF_LITE_ENSURE_EQ(context, affine_quantization->zero_point->data[i], 0);
    }
  }
  // std::cout << "codes runs here #-4" << std::endl;
  const TfLiteTensor* bias = nullptr;

  // TODO(ahentz): At this point the optimized versions require 'bias'. We can
  // either change that or document that convolution requires it.
  // TF_LITE_ENSURE(context, has_bias);

  if (has_bias) {
    // TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 2, &bias));
    if (input_type == kTfLiteUInt8 || input_type == kTfLiteInt8) {
      TF_LITE_ENSURE_TYPES_EQ(context, bias->type, kTfLiteInt32);
      TF_LITE_ENSURE_EQ(context, bias->params.zero_point, 0);
    } else if (input_type == kTfLiteInt16) {
      TF_LITE_ENSURE(context, (bias->type == kTfLiteInt32) ||
                                  (bias->type == kTfLiteInt64));
      TF_LITE_ENSURE_EQ(context, bias->params.zero_point, 0);
    } else {
      TF_LITE_ENSURE_TYPES_EQ(context, bias->type, input_type);
    }
    TF_LITE_ENSURE_EQ(context, NumElements(bias), SizeOfDimension(filter, 0));
  }
  // std::cout << "codes runs here #-5" << std::endl;
  const bool is_hybrid =
      (input->type == kTfLiteFloat32 &&
       (filter->type == kTfLiteUInt8 || filter->type == kTfLiteInt8));

  if (is_hybrid && filter->type == kTfLiteInt8 &&
      filter->quantization.type == kTfLiteAffineQuantization &&
      filter->quantization.params &&
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params)
          ->scale &&
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params)
              ->scale->size > 1) {
    const auto* affine_quantization =
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    const float scale = affine_quantization->scale->data[0];
    for (int i = 1; i < affine_quantization->scale->size; i++) {
      if (affine_quantization->scale->data[i] != scale) {
        data->is_hybrid_per_channel = true;
        break;
      }
    }
  }
  // std::cout << "codes runs here #-6" << std::endl;
  // The multi-threaded kernel supports neither dilation nor hybrid kernels, and
  // is incompatible with mutable input filters that might change between evals.
  data->supports_multithreaded_kernel =
      (kernel_type == kMultithreadOptimized) &&
      (context->recommended_num_threads != 1) && !is_hybrid &&
      (params->dilation_width_factor == 1) &&
      (params->dilation_height_factor == 1) &&
      (filter->allocation_type != kTfLiteArenaRw) && !IsDynamicTensor(filter);

  int channels_in = filter->dims->data[3];
  int channels_out = filter->dims->data[0];
  int width = input->dims->data[2];
  int height = input->dims->data[1];
  int filter_width = filter->dims->data[2];
  int filter_height = filter->dims->data[1];
  int batches = input->dims->data[0];
  // std::cout << "codes runs here #-7" << std::endl;
  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params->padding;
  int out_width, out_height;
  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
      params->dilation_height_factor, params->dilation_width_factor, height,
      width, filter_height, filter_width, padding, &out_height, &out_width);

  size_t im2col_type_size;
  TF_LITE_ENSURE_STATUS(GetSizeOfType(context, input->type, &im2col_type_size));
  // Note that we intentionally promote the first multiplicand (i.e. 'batches')
  // to 'size_t' to avoid integer overflow here.
  const size_t im2col_bytes = static_cast<size_t>(batches) * out_height *
                              out_width * channels_in * filter_height *
                              filter_width * im2col_type_size;
  TF_LITE_ENSURE_STATUS(AllocateTemporaryTensorsIfRequired(
      context, node, is_hybrid, data->is_hybrid_per_channel, kernel_type,
      im2col_bytes));
  // std::cout << "codes runs here #-8" << std::endl;
  // TF_LITE_ENSURE(context, has_bias);

  // Note that full fixed-point inference requires that all tensors have their
  // parameters set. This is usually done during quantized training or
  // calibration.
  if (input_type != kTfLiteFloat32) {
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
                      kTfLiteAffineQuantization);
    const auto* affine_quantization =
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
    TF_LITE_ENSURE(context, affine_quantization->scale);
    // std::cout << "affine_quantization->scale->size: " << affine_quantization->scale->size << std::endl;
    TF_LITE_ENSURE(context, (affine_quantization->scale->size == 1 ||
                             affine_quantization->scale->size == channels_out));

    data->per_channel_output_multiplier.resize(channels_out);
    data->per_channel_output_shift.resize(channels_out);
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
        context, input, filter, bias, output, params->activation,
        &data->output_multiplier, &data->output_shift,
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier.data(),
        data->per_channel_output_shift.data(), channels_out));
  }
  // std::cout << "codes runs here #-9" << std::endl;
  TfLiteIntArray* output_size = TfLiteIntArrayCreate(4);
  output_size->data[0] = batches;
  output_size->data[1] = out_height;
  output_size->data[2] = out_width;
  output_size->data[3] = channels_out;
  auto output_status = context->ResizeTensor(context, output, output_size);

  if (output_status != kTfLiteOk) return output_status;

  if (data->need_im2col) {
    node->temporaries->data[data->im2col_index] = data->im2col_id;

    TfLiteIntArray* im2col_size = TfLiteIntArrayCreate(4);

    auto filter_input_channel = filter->dims->data[3];
    im2col_size->data[0] = output_size->data[0];
    im2col_size->data[1] = output_size->data[1];
    im2col_size->data[2] = output_size->data[2];
    im2col_size->data[3] = filter_input_channel * filter_height * filter_width;

    TfLiteTensor* im2col =
        &context->tensors[node->temporaries->data[data->im2col_index]];
    im2col->type = input->type;
    if (is_hybrid) {
      im2col->type = filter->type;
    }
    im2col->allocation_type = kTfLiteArenaRw;
    auto im2col_status = context->ResizeTensor(context, im2col, im2col_size);
    if (im2col_status != kTfLiteOk) return im2col_status;
  }

  if (data->need_hwcn_weights) {
    node->temporaries->data[data->hwcn_weights_index] = data->hwcn_weights_id;
    TfLiteIntArray* hwcn_weights_size = TfLiteIntArrayCreate(2);

    // Because we're treating the filter weights as a matrix when we do the
    // transpose, we allocate the buffer with a two-dimensional shape, where one
    // dimension is the number of elements in each filter, and the second is the
    // total number of filters.
    auto filter_input_channel = filter->dims->data[3];
    hwcn_weights_size->data[0] =
        (filter_height * filter_width * filter_input_channel);
    hwcn_weights_size->data[1] = channels_out;

    TfLiteTensor* hwcn_weights =
        &context->tensors[node->temporaries->data[data->hwcn_weights_index]];
    hwcn_weights->type = input_type;
    hwcn_weights->allocation_type = kTfLiteArenaRwPersistent;

    auto hwcn_weights_status =
        context->ResizeTensor(context, hwcn_weights, hwcn_weights_size);
    if (hwcn_weights_status != kTfLiteOk) return hwcn_weights_status;

    // TODO(petewarden): If Resize() is called when the size hasn't actually
    // changed, this will do extra redundant work.
    data->have_weights_been_transposed = false;
  }

  if (is_hybrid) {
    node->temporaries->data[data->input_quantized_index] =
        data->input_quantized_id;
    TfLiteTensor* input_quantized;
    TF_LITE_ENSURE_OK(
        context, GetTemporarySafe(context, node, data->input_quantized_index,
                                  &input_quantized));
    input_quantized->type = kTfLiteInt8;
    input_quantized->allocation_type = kTfLiteArenaRw;
    if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {
      TfLiteIntArray* input_quantized_size = TfLiteIntArrayCopy(input->dims);
      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_quantized,
                                                       input_quantized_size));
    }
    // std::cout << "codes runs here #-10" << std::endl;
    node->temporaries->data[data->scaling_factors_index] =
        data->scaling_factors_id;
    TfLiteTensor* scaling_factors;
    TF_LITE_ENSURE_OK(
        context, GetTemporarySafe(context, node, data->scaling_factors_index,
                                  &scaling_factors));
    scaling_factors->type = kTfLiteFloat32;
    scaling_factors->allocation_type = kTfLiteArenaRw;
    // Only one scale factor per batch is typically necessary. See optimized
    // implementation for why we need to allocate for the height of the inputs
    // flattened to 2D.
    TF_LITE_ENSURE(context, channels_in != 0);
    const int height = NumElements(input) / channels_in;
    int scaling_dims[1] = {height};
    if (!TfLiteIntArrayEqualsArray(scaling_factors->dims, 1, scaling_dims)) {
      TfLiteIntArray* scaling_factors_size = TfLiteIntArrayCreate(1);
      scaling_factors_size->data[0] = height;
      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, scaling_factors,
                                                       scaling_factors_size));
    }

    node->temporaries->data[data->accum_scratch_index] = data->accum_scratch_id;
    TfLiteTensor* accum_scratch;
    TF_LITE_ENSURE_OK(context,
                      GetTemporarySafe(context, node, data->accum_scratch_index,
                                       &accum_scratch));
    accum_scratch->type = kTfLiteInt32;
    accum_scratch->allocation_type = kTfLiteArenaRw;
    const int scratch_width = batches * out_height * out_width;
    int accum_scratch_dims[2] = {channels_out, scratch_width};
    if (!TfLiteIntArrayEqualsArray(accum_scratch->dims, 2,
                                   accum_scratch_dims)) {
      TfLiteIntArray* accum_scratch_size = TfLiteIntArrayCreate(2);
      accum_scratch_size->data[0] = channels_out;
      accum_scratch_size->data[1] = scratch_width;
      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, accum_scratch,
                                                       accum_scratch_size));
    }

    if (data->is_hybrid_per_channel) {
      const auto* affine_quantization =
          reinterpret_cast<TfLiteAffineQuantization*>(
              filter->quantization.params);
      TF_LITE_ENSURE_EQ(
          context, affine_quantization->scale->size,
          filter->dims->data[affine_quantization->quantized_dimension]);
      node->temporaries->data[data->input_offset_index] = data->input_offset_id;
      TfLiteTensor* input_offsets;
      TF_LITE_ENSURE_OK(
          context, GetTemporarySafe(context, node, data->input_offset_index,
                                    &input_offsets));
      input_offsets->type = kTfLiteInt32;
      input_offsets->allocation_type = kTfLiteArenaRw;
      // See above comment for the need to allocate for height of inputs.
      TF_LITE_ENSURE(context, channels_in != 0);
      const int height = NumElements(input) / channels_in;
      const int input_offset_dims[1] = {height};
      if (!TfLiteIntArrayEqualsArray(input_offsets->dims, 1,
                                     input_offset_dims)) {
        TfLiteIntArray* input_offsets_size = TfLiteIntArrayCreate(1);
        input_offsets_size->data[0] = input_offset_dims[0];
        TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_offsets,
                                                         input_offsets_size));
      }
      node->temporaries->data[data->row_sums_index] = data->row_sums_id;
      TfLiteTensor* row_sums;
      TF_LITE_ENSURE_OK(
          context,
          GetTemporarySafe(context, node, data->row_sums_index, &row_sums));
      row_sums->type = kTfLiteInt32;
      row_sums->allocation_type = kTfLiteArenaRwPersistent;
      // See above comment for the need to allocate for height of inputs.
      const int row_sums_dims[1] = {channels_out};
      if (!TfLiteIntArrayEqualsArray(row_sums->dims, 1, row_sums_dims)) {
        TfLiteIntArray* row_sums_size = TfLiteIntArrayCreate(1);
        row_sums_size->data[0] = row_sums_dims[0];
        TF_LITE_ENSURE_OK(
            context, context->ResizeTensor(context, row_sums, row_sums_size));
      }
    }
  }
  // std::cout << "codes runs here #-11" << std::endl;
  return kTfLiteOk;
}

template <KernelType kernel_type>
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  return Prepare(kernel_type, context, node);
}

template <KernelType kernel_type>
void EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                   TfLiteConvParams* params, OpData* data,
                   const TfLiteTensor* input, const TfLiteTensor* filter,
                   const TfLiteTensor* bias, TfLiteTensor* im2col,
                   TfLiteTensor* output) {
  auto input_offset = -input->params.zero_point;
  auto filter_offset = -filter->params.zero_point;
  auto output_offset = output->params.zero_point;

  KernelType effective_kernel_type;
  if ((kernel_type == kMultithreadOptimized ||
       kernel_type == kCblasOptimized) &&
      (params->dilation_width_factor != 1 ||
       params->dilation_height_factor != 1)) {
    // kMultithreadOptimized and kCblasOptimized do not support dilation.
    // Therefore, fallback to optimized.
    effective_kernel_type = kGenericOptimized;
  } else {
    effective_kernel_type = kernel_type;
  }

  // We have to fallback to reference execution path when im2col is needed but
  // disabled because to-be-allocated temporary im2col tensor is too large.
  // See b/178743262 for the detailed motivation.
  if (data->im2col_oversized) {
    effective_kernel_type = kReference;
  }

  // Grouped convolution is right now only supported on reference kernel.
  if (data->groups != 1) {
    effective_kernel_type = kReference;
  }

  ConvParams op_params;
  op_params.padding_type = PaddingType::kSame;
  op_params.padding_values.width = data->padding.width;
  op_params.padding_values.height = data->padding.height;
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.stride_width = params->stride_width;
  op_params.stride_height = params->stride_height;
  op_params.input_offset = input_offset;
  op_params.weights_offset = filter_offset;
  op_params.output_offset = output_offset;
  op_params.output_multiplier = data->output_multiplier;
  op_params.output_shift = -data->output_shift;
  op_params.quantized_activation_min = data->output_activation_min;
  op_params.quantized_activation_max = data->output_activation_max;
  switch (effective_kernel_type) {
    case kReference: {
      reference_ops::Conv(
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
          GetTensorShape(filter), GetTensorData<uint8_t>(filter),
          GetTensorShape(bias), GetTensorData<int32_t>(bias),
          GetTensorShape(output), GetTensorData<uint8_t>(output),
          GetTensorShape(im2col), GetTensorData<uint8_t>(im2col),
          /* cpu_backend_context = */ nullptr);
      break;
    }
    case kGenericOptimized:
    case kMultithreadOptimized:
    case kCblasOptimized: {
      // There is only one optimized implementation for Quantized Conv.
      optimized_ops::Conv(
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
          GetTensorShape(filter), GetTensorData<uint8_t>(filter),
          GetTensorShape(bias), GetTensorData<int32_t>(bias),
          GetTensorShape(output), GetTensorData<uint8_t>(output),
          GetTensorShape(im2col), GetTensorData<uint8_t>(im2col),
          CpuBackendContext::GetFromContext(context));
      break;
    }
  }
}

template <KernelType kernel_type>
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
                             TfLiteConvParams* params, OpData* data,
                             const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             TfLiteTensor* im2col) {
  ConvParams op_params;
  op_params.input_offset = -input->params.zero_point;
  op_params.output_offset = output->params.zero_point;
  op_params.stride_height = params->stride_height;
  op_params.stride_width = params->stride_width;
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.padding_values.height = data->padding.height;
  op_params.padding_values.width = data->padding.width;
  op_params.quantized_activation_min = data->output_activation_min;
  op_params.quantized_activation_max = data->output_activation_max;

  KernelType effective_kernel_type = kernel_type;
  // We have to fallback to reference execution path when im2col is needed but
  // disabled because to-be-allocated temporary im2col tensor is too large.
  // See b/178743262 for the detailed motivation.
  if (data->im2col_oversized) {
    effective_kernel_type = kReference;
  }

  // Grouped convolution is right now only supported on reference kernel.
  if (data->groups != 1) {
    effective_kernel_type = kReference;
  }

  switch (effective_kernel_type) {
    case kReference: {
      reference_integer_ops::ConvPerChannel(
          op_params, data->per_channel_output_multiplier.data(),
          data->per_channel_output_shift.data(), GetTensorShape(input),
          GetTensorData<int8>(input), GetTensorShape(filter),
          GetTensorData<int8>(filter), GetTensorShape(bias),
          GetTensorData<int32>(bias), GetTensorShape(output),
          GetTensorData<int8>(output));
      break;
    }
    case kGenericOptimized:
    case kMultithreadOptimized:
    case kCblasOptimized: {
      optimized_integer_ops::ConvPerChannel(
          op_params, data->per_channel_output_multiplier.data(),
          data->per_channel_output_shift.data(), GetTensorShape(input),
          GetTensorData<int8>(input), GetTensorShape(filter),
          GetTensorData<int8>(filter), GetTensorShape(bias),
          GetTensorData<int32>(bias), GetTensorShape(output),
          GetTensorData<int8>(output), GetTensorShape(im2col),
          GetTensorData<int8>(im2col),
          CpuBackendContext::GetFromContext(context));
      break;
    }
  }
}

template <KernelType kernel_type>
void EvalQuantizedPerChannel16x8(TfLiteContext* context, TfLiteNode* node,
                                 TfLiteConvParams* params, OpData* data,
                                 const TfLiteTensor* input,
                                 const TfLiteTensor* filter,
                                 const TfLiteTensor* bias, TfLiteTensor* output,
                                 TfLiteTensor* im2col) {
  ConvParams op_params;
  op_params.input_offset = -input->params.zero_point;
  op_params.output_offset = output->params.zero_point;
  op_params.stride_height = params->stride_height;
  op_params.stride_width = params->stride_width;
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.padding_values.height = data->padding.height;
  op_params.padding_values.width = data->padding.width;
  op_params.quantized_activation_min = data->output_activation_min;
  op_params.quantized_activation_max = data->output_activation_max;

  KernelType effective_kernel_type = kernel_type;
  // We have to fallback to reference execution path when im2col is needed but
  // disabled because to-be-allocated temporary im2col tensor is too large.
  // See b/178743262 for the detailed motivation.
  if (data->im2col_oversized) {
    effective_kernel_type = kReference;
  }

  // Grouped convolution is right now only supported on reference kernel.
  if (data->groups != 1) {
    effective_kernel_type = kReference;
  }

  // To prevent 32bit accum overflow for 16x8 quantization, it enables the
  // optimized path only when zero_point is 0.
  bool has_non_zero_point = input->params.zero_point ||
                            filter->params.zero_point ||
                            output->params.zero_point;

  // Fallback to reference kernel when bias_type is int64 as
  // there is no optimized kernel for int64 bias yet.
  if (bias && bias->type == kTfLiteInt64) {
    reference_integer_ops::ConvPerChannel(
        op_params, data->per_channel_output_multiplier.data(),
        data->per_channel_output_shift.data(), GetTensorShape(input),
        GetTensorData<int16>(input), GetTensorShape(filter),
        GetTensorData<int8>(filter), GetTensorShape(bias),
        GetTensorData<std::int64_t>(bias), GetTensorShape(output),
        GetTensorData<int16>(output));
  } else if (effective_kernel_type == kReference || has_non_zero_point) {
    reference_integer_ops::ConvPerChannel(
        op_params, data->per_channel_output_multiplier.data(),
        data->per_channel_output_shift.data(), GetTensorShape(input),
        GetTensorData<int16>(input), GetTensorShape(filter),
        GetTensorData<int8>(filter), GetTensorShape(bias),
        GetTensorData<std::int32_t>(bias), GetTensorShape(output),
        GetTensorData<int16>(output));
  } else {
    optimized_integer_ops::ConvPerChannel(
        op_params, data->per_channel_output_multiplier.data(),
        data->per_channel_output_shift.data(), GetTensorShape(input),
        GetTensorData<int16_t>(input), GetTensorShape(filter),
        GetTensorData<int8_t>(filter), GetTensorShape(bias),
        GetTensorData<std::int32_t>(bias), GetTensorShape(output),
        GetTensorData<int16_t>(output), GetTensorShape(im2col),
        GetTensorData<int16_t>(im2col),
        CpuBackendContext::GetFromContext(context));
  }
}

template <KernelType kernel_type>
void EvalFloat(TfLiteContext* context, TfLiteNode* node,
               TfLiteConvParams* params, OpData* data,
               const TfLiteTensor* input, const TfLiteTensor* filter,
               const TfLiteTensor* bias, TfLiteTensor* im2col,
               TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
  // std::cout << "codes runs here #4" << std::endl;
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
                           &output_activation_max);
  KernelType effective_kernel_type = kernel_type;
  // Fall back to the optimized path if multi-threaded conv is unsupported.
  if ((kernel_type == kMultithreadOptimized) &&
      !data->supports_multithreaded_kernel) {
    effective_kernel_type = kGenericOptimized;
  }
  // std::cout << "codes runs here #5" << std::endl;
  // When im2col is needed (which is implied when 'im2col_oversized' is true),
  // the GEMMM-based optimized path requires im2col data be allocated to ensure
  // the correctness. Therefore, when im2col is disabled because of the
  // oversized temporary im2col tensor, fallback to a non-optimized path is
  // needed.
  // See b/178743262 for the detailed motivation.
  if (data->im2col_oversized) {
    effective_kernel_type = kReference;
#if defined(TFLITE_WITH_MULTITHREADED_EIGEN)
    // As detailed by tflite::multithreaded_ops::Conv implementation in
    // multithreaded_conv.h, the Eigen-based execution doesn't need im2col data.
    // Therefore, we could rely on it as a better-optimized fallback than the
    // reference one.
    if (data->supports_multithreaded_kernel) {
      effective_kernel_type = kMultithreadOptimized;
    }
#endif
  }
  // std::cout << "codes runs here #6" << std::endl;
  // Grouped convolution is right now only supported on reference kernel.
  if (data->groups != 1) {
    effective_kernel_type = kReference;
  }

  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
  op_params.padding_values.width = data->padding.width;
  op_params.padding_values.height = data->padding.height;
  op_params.stride_width = params->stride_width;
  op_params.stride_height = params->stride_height;
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.float_activation_min = output_activation_min;
  op_params.float_activation_max = output_activation_max;
  switch (effective_kernel_type) {
    case kReference: {
      reference_ops::Conv(op_params, GetTensorShape(input),
                          GetTensorData<float>(input), GetTensorShape(filter),
                          GetTensorData<float>(filter), GetTensorShape(bias),
                          GetTensorData<float>(bias), GetTensorShape(output),
                          GetTensorData<float>(output), GetTensorShape(im2col),
                          GetTensorData<float>(im2col));
      break;
    }
    case kCblasOptimized:
    case kGenericOptimized: {
      optimized_ops::Conv(op_params, GetTensorShape(input),
                          GetTensorData<float>(input), GetTensorShape(filter),
                          GetTensorData<float>(filter), GetTensorShape(bias),
                          GetTensorData<float>(bias), GetTensorShape(output),
                          GetTensorData<float>(output), GetTensorShape(im2col),
                          GetTensorData<float>(im2col),
                          CpuBackendContext::GetFromContext(context));
      break;
    }
    case kMultithreadOptimized: {
#if defined(TFLITE_WITH_MULTITHREADED_EIGEN)
      // std::cout << "codes runs here #7" << std::endl;
      const float* filter_data;
      if (data->need_hwcn_weights) {
        filter_data = GetTensorData<float>(hwcn_weights);
      } else {
        filter_data = GetTensorData<float>(filter);
      }
      // int index;
      // for (index = 0; index < 432; index++){
      //   // std::cout << "filter_data[" << index << "] = " << filter_data[index] << std::endl;
      //   std::cout << filter_data[index] << ", ";
      // }
      multithreaded_ops::Conv(
          *eigen_support::GetThreadPoolDevice(context), op_params,
          GetTensorShape(input), GetTensorData<float>(input),
          GetTensorShape(filter), filter_data, GetTensorShape(bias),
          GetTensorData<float>(bias), GetTensorShape(output),
          GetTensorData<float>(output), GetTensorShape(im2col),
          GetTensorData<float>(im2col));
      break;
#else   // !defined(TFLITE_WITH_MULTITHREADED_EIGEN)
      // See Register_CONV_2D: we should never be here when TFLITE_WITH_RUY
      // was enabled. We #if out this code in order to get the corresponding
      // binary size benefits.
      TFLITE_DCHECK(false);
#endif  // defined(TFLITE_WITH_MULTITHREADED_EIGEN)
    }
  }
}

template <KernelType kernel_type>
TfLiteStatus EvalHybridPerChannel(TfLiteContext* context, TfLiteNode* node,
                                  TfLiteConvParams* params, OpData* data,
                                  const TfLiteTensor* input,
                                  const TfLiteTensor* filter,
                                  const TfLiteTensor* bias,
                                  TfLiteTensor* im2col, TfLiteTensor* output) {
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
                           &output_activation_max);

  const int batch_size = SizeOfDimension(input, 0);
  TF_LITE_ENSURE(context, batch_size != 0);
  const int input_size = NumElements(input) / batch_size;
  TfLiteTensor* quantized_input_tensor;
  TF_LITE_ENSURE_OK(context,
                    GetTemporarySafe(context, node, data->input_quantized_index,
                                     &quantized_input_tensor));
  int8_t* quantized_input_ptr_batch =
      GetTensorData<int8_t>(quantized_input_tensor);
  TfLiteTensor* scaling_factors_tensor;
  TF_LITE_ENSURE_OK(context,
                    GetTemporarySafe(context, node, data->scaling_factors_index,
                                     &scaling_factors_tensor));
  float* scaling_factors_ptr = GetTensorData<float>(scaling_factors_tensor);
  TfLiteTensor* input_offset_tensor;
  TF_LITE_ENSURE_OK(context,
                    GetTemporarySafe(context, node, data->input_offset_index,
                                     &input_offset_tensor));
  int32_t* input_offset_ptr = GetTensorData<int32_t>(input_offset_tensor);

  for (int b = 0; b < batch_size; ++b) {
    const int offset = b * input_size;
    tensor_utils::AsymmetricQuantizeFloats(
        GetTensorData<float>(input) + offset, input_size,
        quantized_input_ptr_batch + offset, &scaling_factors_ptr[b],
        &input_offset_ptr[b]);
  }

  int8_t* im2col_ptr = nullptr;
  int8_t* filter_ptr = nullptr;
  if (im2col != nullptr) {
    im2col_ptr = im2col->data.int8;
  }
  filter_ptr = filter->data.int8;
  const auto* affine_quantization =
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);

  KernelType effective_kernel_type = kernel_type;
  // We have to fallback to reference execution path when im2col is needed but
  // disabled because to-be-allocated temporary im2col tensor is too large.
  // See b/178743262 for the detailed motivation.
  if (data->im2col_oversized) {
    effective_kernel_type = kReference;
  }

  // Grouped convolution is right now only supported on reference kernel.
  if (data->groups != 1) {
    effective_kernel_type = kReference;
  }

  ConvParams op_params;
  op_params.padding_type = PaddingType::kSame;
  op_params.padding_values.width = data->padding.width;
  op_params.padding_values.height = data->padding.height;
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.stride_width = params->stride_width;
  op_params.stride_height = params->stride_height;
  op_params.float_activation_min = output_activation_min;
  op_params.float_activation_max = output_activation_max;
  switch (effective_kernel_type) {
    case kReference:
      reference_ops::HybridConvPerChannel(
          op_params, scaling_factors_ptr, GetTensorShape(input),
          quantized_input_ptr_batch, GetTensorShape(filter), filter_ptr,
          GetTensorShape(bias), GetTensorData<float>(bias),
          GetTensorShape(output), GetTensorData<float>(output),
          GetTensorShape(im2col), im2col_ptr, affine_quantization->scale->data,
          input_offset_ptr);
      break;
    case kGenericOptimized:
    case kMultithreadOptimized:
    case kCblasOptimized: {
      TfLiteTensor* row_sums;
      TF_LITE_ENSURE_OK(
          context,
          GetTemporarySafe(context, node, data->row_sums_index, &row_sums));
      TfLiteTensor* scratch;
      TF_LITE_ENSURE_OK(
          context,
          GetTemporarySafe(context, node, data->accum_scratch_index, &scratch));
      optimized_ops::HybridConvPerChannel(
          op_params, scaling_factors_ptr, GetTensorShape(input),
          quantized_input_ptr_batch, GetTensorShape(filter), filter_ptr,
          GetTensorShape(bias), GetTensorData<float>(bias),
          GetTensorShape(output), GetTensorData<float>(output),
          GetTensorShape(im2col), im2col_ptr, affine_quantization->scale->data,
          input_offset_ptr, GetTensorShape(scratch),
          GetTensorData<int32>(scratch), GetTensorData<int32_t>(row_sums),
          &data->compute_hybrid_row_sums,
          CpuBackendContext::GetFromContext(context));
      data->compute_hybrid_row_sums = false;
      break;
    }
  }

  return kTfLiteOk;
}

template <KernelType kernel_type>
TfLiteStatus EvalHybrid(TfLiteContext* context, TfLiteNode* node,
                        TfLiteConvParams* params, OpData* data,
                        const TfLiteTensor* input, const TfLiteTensor* filter,
                        const TfLiteTensor* bias, TfLiteTensor* im2col,
                        TfLiteTensor* accum_scratch, TfLiteTensor* output) {
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
                           &output_activation_max);

  const int batch_size = SizeOfDimension(input, 0);
  TF_LITE_ENSURE(context, batch_size != 0);
  const int input_size = NumElements(input) / batch_size;

  const float* input_ptr = GetTensorData<float>(input);
  TfLiteTensor* quantized_input_tensor;
  TF_LITE_ENSURE_OK(context,
                    GetTemporarySafe(context, node, data->input_quantized_index,
                                     &quantized_input_tensor));
  int8_t* quantized_input_ptr_batch =
      GetTensorData<int8_t>(quantized_input_tensor);
  TfLiteTensor* scaling_factors_tensor;
  TF_LITE_ENSURE_OK(context,
                    GetTemporarySafe(context, node, data->scaling_factors_index,
                                     &scaling_factors_tensor));
  float* scaling_factors_ptr = GetTensorData<float>(scaling_factors_tensor);

  // Per-batch input quantization for higher accuracy.
  {
    ruy::profiler::ScopeLabel label("ConvHybridQuantizeInputs");
    for (int b = 0; b < batch_size; ++b) {
      float unused_min, unused_max;
      const int offset = b * input_size;
      tensor_utils::SymmetricQuantizeFloats(
          input_ptr + offset, input_size, quantized_input_ptr_batch + offset,
          &unused_min, &unused_max, &scaling_factors_ptr[b]);
      scaling_factors_ptr[b] *= filter->params.scale;
    }
  }

  switch (kernel_type) {
    case kReference:
    case kGenericOptimized:
    case kMultithreadOptimized:
    case kCblasOptimized: {
      // There is only one implementation for hybrid kernel.
      ConvParams op_params;
      op_params.padding_type = PaddingType::kSame;
      op_params.padding_values.width = data->padding.width;
      op_params.padding_values.height = data->padding.height;
      op_params.stride_width = params->stride_width;
      op_params.stride_height = params->stride_height;
      op_params.dilation_width_factor = params->dilation_width_factor;
      op_params.dilation_height_factor = params->dilation_height_factor;
      op_params.float_activation_min = output_activation_min;
      op_params.float_activation_max = output_activation_max;
      if (data->groups == 1) {
        optimized_ops::HybridConv(
            op_params, scaling_factors_ptr, GetTensorShape(input),
            quantized_input_ptr_batch, GetTensorShape(filter),
            GetTensorData<int8_t>(filter), GetTensorShape(bias),
            GetTensorData<float>(bias), GetTensorShape(accum_scratch),
            GetTensorData<int32_t>(accum_scratch), GetTensorShape(output),
            GetTensorData<float>(output), GetTensorShape(im2col),
            GetTensorData<int8_t>(im2col),
            CpuBackendContext::GetFromContext(context));
      } else {
        // This case is handled by (fallbacked to) per channel hybrid group conv
        // and shouldn't hit this branch.
        TF_LITE_KERNEL_LOG(
            context,
            "Group convolution currently not supported for hybrid kernel.");
        return kTfLiteError;
      }
      break;
    }
  }

  return kTfLiteOk;
}

template <KernelType kernel_type, TfLiteType input_type>
TfLiteStatus EvalImpl(TfLiteContext* context, TfLiteNode* node) {
  // std::cout << "codes runs here #0" << std::endl;
  // auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);
  TfLiteConvParams data_params;
  ExtractConvParams(paddings, stride_width, stride_height, dilation_width_factor, dilation_height_factor, activation, &data_params);
  TfLiteConvParams* params = &data_params;

  OpData* data = reinterpret_cast<OpData*>(node->user_data);
  // std::cout << "codes runs here #1" << std::endl;
  TfLiteTensor* output;
  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));
  const TfLiteTensor* input;
  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));
  TfLiteTensor filter_tensor;
  TfLiteIntArray* filter_dims_data = TfLiteIntArrayCreate(filter_dims_size);
  int size_filter = 1;
  for (int i = 0; i < filter_dims_size; i++) {
    // std::cout << "dims_raw: " << dims_raw[i] << std::endl;
    filter_dims_data->data[i] = filter_dims_raw[i];
    size_filter *= filter_dims_raw[i];
  }
  size_t bytes_size_filter = sizeof(float) * size_filter;
  TfLiteQuantizationParams filter_params;
  filter_params.scale=scale_filter;
  filter_params.zero_point=zero_point_filter;

  TfLiteFloatArray* scale_array_filter = TfLiteFloatArrayCreate(1);
  scale_array_filter->data[0] = scale_filter;
  TfLiteIntArray* zero_point_array_filter = TfLiteIntArrayCreate(1);
  zero_point_array_filter->data[0] = zero_point_filter;

  TfLiteAffineQuantization quant_struct_filter;
  quant_struct_filter.scale = scale_array_filter;
  quant_struct_filter.zero_point = zero_point_array_filter;
  quant_struct_filter.quantized_dimension = 0;

  // float* filter_data;
  // filter_tensor_data = filter_raw;
  GetConvTensor(filter_type, "filter", filter_dims_data, filter_params,
                       reinterpret_cast<char*>(filter_tensor_data), 
                       &quant_struct_filter, bytes_size_filter, &filter_tensor);
  const TfLiteTensor* filter = &filter_tensor;

  TfLiteTensor bias_tensor;
  const TfLiteTensor* bias;
  if (has_conv_bias) {
    TfLiteIntArray* bias_dims_data = TfLiteIntArrayCreate(bias_dims_size);
    int size_bias = 1;
    for (int i = 0; i < bias_dims_size; i++) {
      // std::cout << "dims_raw: " << dims_raw[i] << std::endl;
      bias_dims_data->data[i] = bias_dims_raw[i];
      size_bias *= bias_dims_raw[i];
    }
    size_t bytes_size_bias = sizeof(float) * size_bias;
    TfLiteQuantizationParams bias_params;
    bias_params.scale=scale_bias;
    bias_params.zero_point=zero_point_bias;

    TfLiteFloatArray* scale_array_bias = TfLiteFloatArrayCreate(1);
    scale_array_bias->data[0] = scale_bias;
    TfLiteIntArray* zero_point_array_bias = TfLiteIntArrayCreate(1);
    zero_point_array_bias->data[0] = zero_point_bias;

    TfLiteAffineQuantization quant_struct_bias;
    quant_struct_bias.scale = scale_array_bias;
    quant_struct_bias.zero_point = zero_point_array_bias;
    quant_struct_bias.quantized_dimension = 0;
    
    // float* bias_data;
    // bias_tensor_data = bias_raw;
    GetConvTensor(bias_type, "bias", bias_dims_data, bias_params,
                        reinterpret_cast<char*>(bias_tensor_data), 
                        &quant_struct_bias, bytes_size_bias, &bias_tensor);
    bias = &bias_tensor;
  } else {
    bias = nullptr;
  }

  TfLiteTensor* im2col =
      data->need_im2col
          ? &context->tensors[node->temporaries->data[data->im2col_index]]
          : nullptr;
  TfLiteTensor* hwcn_weights =
      data->need_hwcn_weights
          ? &context->tensors[node->temporaries->data[data->hwcn_weights_index]]
          : nullptr;

  if (data->need_hwcn_weights && !data->have_weights_been_transposed) {
    TransposeFloatTensor(filter, hwcn_weights);
    data->have_weights_been_transposed = true;
  }
  // std::cout << "codes runs here #3" << std::endl;
  TFLITE_DCHECK_EQ(input_type, input->type);
  switch (input_type) {  // Already know in/outtypes are same.
    case kTfLiteFloat32:
      if (filter->type == kTfLiteUInt8 || filter->type == kTfLiteInt8) {
        if (data->is_hybrid_per_channel ||
            // TODO(b/162870360): Fallback to PerChannel implementation
            // before we have grouped hybrid convolution.
            data->groups != 1) {
          TF_LITE_ENSURE_OK(context, EvalHybridPerChannel<kernel_type>(
                                         context, node, params, data, input,
                                         filter, bias, im2col, output));
        } else {
          TfLiteTensor* accum_scratch =
              &context->tensors[node->temporaries
                                    ->data[data->accum_scratch_index]];
          TF_LITE_ENSURE_OK(context,
                            EvalHybrid<kernel_type>(context, node, params, data,
                                                    input, filter, bias, im2col,
                                                    accum_scratch, output));
        }
      } else {
        EvalFloat<kernel_type>(context, node, params, data, input, filter, bias,
                               im2col, hwcn_weights, output);
      }
      break;
    case kTfLiteUInt8:
      EvalQuantized<kernel_type>(context, node, params, data, input, filter,
                                 bias, im2col, output);
      break;
    case kTfLiteInt8:
      EvalQuantizedPerChannel<kernel_type>(context, node, params, data, input,
                                           filter, bias, output, im2col);
      break;
    case kTfLiteInt16:
      EvalQuantizedPerChannel16x8<kernel_type>(
          context, node, params, data, input, filter, bias, output, im2col);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s currently not supported.",
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
  }
  // std::cout << "codes runs here #10" << std::endl;
  return kTfLiteOk;
}

template <KernelType kernel_type>
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
  const TfLiteTensor* input;
  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));

  switch (input->type) {
    case kTfLiteFloat32:
      return EvalImpl<kernel_type, kTfLiteFloat32>(context, node);
    case kTfLiteUInt8:
      return EvalImpl<kernel_type, kTfLiteUInt8>(context, node);
    case kTfLiteInt8:
      return EvalImpl<kernel_type, kTfLiteInt8>(context, node);
    case kTfLiteInt16:
      return EvalImpl<kernel_type, kTfLiteInt16>(context, node);
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
  }
}

}  // namespace conv

TfLiteRegistration* Register_cpmalk_REF() {
  static TfLiteRegistration r = {cpmalk::Init, cpmalk::Free,
                                 cpmalk::Prepare<cpmalk::kReference>,
                                 cpmalk::Eval<cpmalk::kReference>};
  return &r;
}

TfLiteRegistration* Register_cpmalk_GENERIC_OPT() {
  static TfLiteRegistration r = {cpmalk::Init, cpmalk::Free,
                                 cpmalk::Prepare<cpmalk::kGenericOptimized>,
                                 cpmalk::Eval<cpmalk::kGenericOptimized>};
  return &r;
}

TfLiteRegistration* Register_cpmalk_MULTITHREADED_OPT() {
  static TfLiteRegistration r = {cpmalk::Init, cpmalk::Free,
                                 cpmalk::Prepare<cpmalk::kMultithreadOptimized>,
                                 cpmalk::Eval<cpmalk::kMultithreadOptimized>};
  return &r;
}

// TfLiteRegistration* Register_cpmalk_CBLAS_OPT() {
//   static TfLiteRegistration r = {cpmalk::Init, cpmalk::Free,
//                                  cpmalk::Prepare<cpmalk::kCblasOptimized>,
//                                  cpmalk::Eval<cpmalk::kCblasOptimized>};
//   return &r;
// }

TfLiteRegistration* Register_cpmalk() {
#if defined TFLITE_WITH_MULTITHREADED_EIGEN
  return Register_cpmalk_MULTITHREADED_OPT();
#else
  return Register_cpmalk_GENERIC_OPT();
#endif
}


}  // namespace builtin
}  // namespace ops
}  // namespace tflite
