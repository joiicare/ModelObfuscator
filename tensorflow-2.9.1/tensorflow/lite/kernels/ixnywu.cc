/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

#include "tensorflow/lite/kernels/internal/optimized/integer_ops/depthwise_conv.h"

#include <stddef.h>
#include <stdint.h>
#include <vector>

#include "tensorflow/lite/c/builtin_op_data.h"
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/kernels/cpu_backend_context.h"
#include "tensorflow/lite/kernels/internal/compatibility.h"
#include "tensorflow/lite/kernels/internal/optimized/cpu_check.h"
#include "tensorflow/lite/kernels/internal/optimized/depthwiseconv_multithread.h"
#include "tensorflow/lite/kernels/internal/optimized/integer_ops/depthwise_conv_hybrid.h"
#include "tensorflow/lite/kernels/internal/optimized/neon_check.h"
#include "tensorflow/lite/kernels/internal/quantization_util.h"
#include "tensorflow/lite/kernels/internal/reference/depthwiseconv_float.h"
#include "tensorflow/lite/kernels/internal/reference/depthwiseconv_uint8.h"
#include "tensorflow/lite/kernels/internal/reference/integer_ops/depthwise_conv.h"
#include "tensorflow/lite/kernels/internal/tensor.h"
#include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
#include "tensorflow/lite/kernels/internal/tensor_utils.h"
#include "tensorflow/lite/kernels/internal/types.h"
#include "tensorflow/lite/kernels/kernel_util.h"
#include "tensorflow/lite/kernels/padding.h"

namespace tflite {
namespace ops {
namespace custom {
namespace ixnywu {

constexpr int kInputTensor = 0;
constexpr int kFilterTensor = 1;
constexpr int kBiasTensor = 2;
constexpr int kOutputTensor = 0;

// This file has three implementation of DepthwiseConv.
enum KernelType {
  kReference,
  kGenericOptimized,  // Neon-free
  kNeonOptimized,
};

const int kTensorNotAllocated = -1;

int8_t filter_r   aw[16800]={-17, -7, -31, -36, 8, 8, -20, -2, 23, -12, -15, -21, 11, 4, 10, -2, 28, -18, -15, -24, -6, -6, -16, 23, 7, 21, -2, 17, 15, -37, 5, 3, -30, 30, 25, -13, -13, 10, 23, -3, -58, 48, 19, 21, 21, 13, -3, 8, 9, -40, 11, 15, -26, -68, 16, 8, -6, -22, -56, 3, 11, 0, 14, 11, -16, 16, 9, 19, 5, 7, 7, 14, 3, 20, 11, 13, -29, -2, 15, -32, -15, -36, 17, 12, 35, 17, 13, 0, -25, 11, 6, -35, -37, -19, 6, -17, 29, 49, 44, 15, 12, 14, 13, -1, 13, -16, -35, -17, 7, 11, 16, 15, 23, 15, -44, 15, -36, -36, 13, 4, -4, 12, -9, 14, -1, 24, -10, -50, 14, 23, 11, 22, 10, 15, 12, -40, 13, 28, 9, -7, 127, 25, 14, -10, 26, 11, -32, 21, -3, -24, -32, -23, -127, 12, -11, 51, -20, 14, 1, -1, 33, -35, 4, 0, 5, 17, 16, 23, 12, 23, -65, 35, -13, 12, -14, 5, 7, 31, -11, 33, -21, 12, 9, -42, 9, 25, 18, 20, 36, -39, -34, 11, -52, -43, -54, -13, -41, -48, 9, -22, 22, -14, 13, 18, -2, -41, 15, -3, 2, 17, 53, -21, 22, -33, 14, 15, 11, -4, -30, 11, 14, 18, 16, 19, 13, 24, 10, 19, 21, 0, 16, -57, -9, -43, 6, -10, -1, -39, 5, 9, -14, 13, 9, -9, 24, -57, -13, -1, 14, -36, 11, -23, 15, 33, 2, -26, 12, 24, 9, 28, 0, 30, 37, 11, 3, 7, -14, 27, 12, 13, -25, 13, 14, -13, -26, 5, 8, 11, 15, 24, 12, 10, 4, -28, -36, 7, 14, -10, 22, 24, 4, -10, 1, 18, 28, 23, -16, 10, -53, 7, -21, 8, -11, -47, 10, 37, 3, 3, -3, 39, 12, -1, 22, 23, 13, 13, 24, 14, 40, -9, 8, -26, 10, 30, 1, -10, -25, 38, 8, -37, 3, 5, 6, -28, -45, -45, -2, 19, -26, -15, 8, 5, -18, -1, -16, 15, -2, -60, 22, 16, -43, 8, -20, 4, 16, 14, -10, -21, -7, -7, 3, -63, 8, -9, 7, 4, -43, 2, 12, -2, 21, 20, -26, -59, -23, 21, 28, -35, -7, -5, 0, 8, -53, -18, -23, 18, -11, 20, 0, 56, 1, 10, -28, 2, -20, 12, -84, 21, 15, -6, 53, 34, 9, 7, -14, 4, -30, 15, -6, 8, 6, 24, -25, 16, 9, 11, 25, 18, 7, 24, -3, 4, 16, 12, 12, -52, -2, 13, 4, 16, -98, 27, -30, 16, -22, 12, -33, -2, 30, -23, -22, 24, 13, 12, 8, -27, -30, -37, 15, -17, 10, 19, 16, 5, 7, 15, 17, 11, -11, 24, -5, 12, -23, 16, -7, -29, 7, 25, 1, -3, -41, 16, 4, 19, -19, 30, 11, 9, 20, 5, 19, 6, 14, -26, -21, 25, -67, -14, 9, 31, -33, 12, 16, -23, 29, 24, 10, -22, 30, 22, -2, 8, 11, 21, 16, 1, 6, -12, 13, -19, 8, 22, 14, 0, 26, 21, 3, 16, -18, 28, -40, 15, 20, -1, 14, 17, 10, 25, 37, 24, -2, 0, 11, 2, 1, -2, 0, 12, 6, -12, 39, 17, -24, -3, 18, 15, -35, 10, -3, 6, -38, 7, 13, 8, 9, -30, -21, -15, 28, 23, -12, 6, 24, 22, -2, 31, 37, 21, 11, -25, -9, 19, -15, -2, -103, 9, -19, 28, -16, 16, -17, 12, 14, 39, 10, -30, -12, -25, -33, -61, -16, -25, 19, 0, -64, 11, 11, 19, 4, -7, -31, -16, 13, -38, 12, 27, -16, 3, -4, 6, -16, 41, -4, -26, 4, -1, 8, 4, 20, 55, -13, 10, 2, -13, -3, 12, -11, 13, 3, -21, 11, 14, 3, -28, 0, 3, -7, -8, -22, 22, 9, -10, -2, 19, 26, 15, 2, -20, 11, -36, 42, -75, 28, -4, -22, 7, -12, -4, 13, 7, -42, 7, 23, 15, -45, 12, 21, 23, 1, 1, -4, -1, -29, -34, -59, -76, -6, 21, -62, 46, 71, -35, -65, -105, 54, 11, 48, 35, 98, 42, -52, -65, -13, -59, -62, 73, 34, 51, 41, 66, 62, -110, -20, 30, -46, 72, 60, -54, -65, 43, 63, -46, -74, 127, 57, 44, 49, 34, 52, 41, 42, -95, 45, 59, -68, -111, 57, 40, -31, -53, -50, -16, 52, 24, 57, 7, -44, 51, 50, -17, 45, 40, 52, 50, 47, 49, 30, 41, -43, 21, 72, -119, -66, -93, 54, 44, 69, 48, 50, 36, -52, 34, 48, -108, -78, -50, 43, -57, 68, 57, 76, 53, 45, 41, 52, 36, 52, -30, -91, -59, 47, 43, 65, 36, 67, 54, -68, 55, -87, -66, 48, 26, 11, 57, -33, 38, -12, 55, 27, -104, 44, 80, 36, 57, 49, 55, 36, -65, 59, 126, 60, -25, 99, 84, 46, -52, 49, 67, -93, 55, 23, -67, -78, -72, -85, 44, -40, 110, -32, 46, -46, 33, 62, -73, 39, 26, 32, -20, 50, 55, 42, 77, -104, 75, -22, 38, -69, 40, 41, 53, -56, 62, -66, 34, -51, -77, 41, 64, 52, 66, 91, -105, -59, 45, -79, -73, -127, -11, -97, -83, 38, -52, 79, -26, 14, 41, 32, -95, 43, 36, 43, 39, 72, -61, 45, -66, 51, 58, 39, 15, -58, 41, 48, 66, 33, 37, 55, 51, 64, 55, 49, 42, 64, -115, -41, -39, 26, 30, 54, -91, 41, -59, -20, 50, 32, -2, 69, -79, -69, 19, 46, -89, 50, -63, 54, 35, 38, -62, 42, 59, 34, 87, -3, 63, 107, 37, 15, 47, -58, 90, 36, 75, -46, -8, 36, -48, -72, 46, 44, 57, 56, 61, 66, 42, 36, -47, -73, -33, 50, 41, 66, 38, 21, -55, 31, 18, 55, 58, -48, 39, -33, 41, -85, 46, -38, -94, -26, 82, 51, 26, -69, 99, 39, -12, 67, 63, 43, 36, 85, 66, 58, -10, 29, -59, 64, 79, 38, -67, -78, 45, 51, -83, 34, 34, 30, -65, -111, -96, 29, 56, -75, -75, 34, 42, -69, 41, -61, 52, 34, -75, 37, 44, -93, 46, 21, 27, 7, 54, -64, 10, -57, 45, 37, -110, 39, -81, 29, 37, -92, 61, 50, 50, 55, 45, -70, -45, -63, 52, 70, -78, -46, -98, 34, 41, -88, -56, -93, 77, -53, 56, 20, 125, 6, 54, -67, 36, -40, 55, -107, 73, 47, -23, 122, 80, 47, 15, -91, 12, -75, 35, 19, 47, 27, 55, -52, 53, 33, 33, 57, 58, 45, 66, -30, 30, 48, 48, 31, -110, -28, 45, -20, 39, -109, 76, -79, 49, -66, 61, -69, 34, 77, -50, -76, 17, 43, 44, 41, -63, -68, -80, 50, -68, 45, 58, 57, 30, 40, 55, 45, 58, -50, 58, 31, 39, -45, 33, -55, -76, 50, 50, -4, 46, -93, 42, 41, 48, -62, 53, 27, 29, 64, 32, 56, 52, 43, -63, -71, 52, -34, -62, -30, 61, -89, 44, 30, -52, 71, 74, 40, -67, 25, 48, 32, 32, 51, 61, 66, 38, 29, -36, 44, -66, 32, 57, 67, -36, 69, 59, 43, 59, -61, 68, -61, 45, 61, 23, 26, 52, 38, 85, 84, 51, 31, -35, 50, 38, 29, 68, 44, 26, 53, -40, 53, 38, -98, -7, 50, 48, -80, 67, -65, 41, -68, 25, 58, 49, 44, -84, -68, -68, 61, 68, 10, 38, 121, 59, 44, 73, 20, 53, 68, -36, -27, 46, -55, 33, -111, 45, 25, 50, -85, 48, -51, 48, 58, 33, 42, -61, -77, -68, -76, -127, -46, -72, -12, 43, -125, 42, 56, 35, 29, 1, -48, -61, 48, -80, 47, 30, -30, 21, 55, 47, -68, 31, 39, -82, 37, 38, 38, -48, 65, 45, -64, 39, 29, -57, 25, 49, -100, 46, 35, -72, 53, 44, 48, -49, 29, 40, -14, -16, -37, 66, 36, -65, 25, 36, 71, 47, 40, -63, 56, -88, 42, -124, 67, 4, -48, -20, -22, 2, 53, 48, 49, 43, 60, 62, -77, 37, 105, 60, -46, 16, 38, 46, -32, -41, -57, -66, -18, 24, -56, 52, 69, -34, -59, -102, 57, 14, 55, 41, 100, 51, -59, -64, -10, -60, -56, 78, 37, 49, 44, 60, 65, -108, 10, 35, -43, 77, 53, -60, -57, 49, 63, -35, 27, 123, 60, 55, 46, 34, 58, 42, 46, -90, 49, 66, -66, -106, 42, 41, -31, -53, 33, -25, 57, 28, 62, 3, -43, 53, 48, -32, 41, 46, 52, 48, 50, 49, 35, 40, -33, 21, 73, -127, -59, -87, 58, 44, 68, 47, 59, 45, -50, 35, 56, -109, -75, -55, 48, -56, 65, 45, 70, 55, 48, 51, 55, 44, 52, -29, -92, -50, 51, 45, 70, 37, 71, 57, -61, 66, -82, -55, 50, 23, 13, 64, -35, 42, -22, 57, 39, -103, 46, 85, 46, 60, 53, 59, 40, -61, 66, 121, 40, -28, 95, 93, 42, -48, 51, 69, -99, 50, 25, -69, -77, -77, -61, 45, -40, 111, -34, 40, -51, 38, 61, -67, 46, 19, 33, -27, 58, 57, 48, 82, -98, 71, -21, 39, -69, 48, 51, 49, -51, 62, -57, 36, -49, -64, 42, 66, 50, 68, 86, -73, -44, 43, -66, -57, -122, -6, -78, -68, 37, -46, 84, -30, 5, 42, 40, -95, 41, 35, 49, 42, 69, -62, 43, -71, 57, 59, 43, 20, -56, 43, 53, 73, 35, 48, 56, 51, 66, 56, 56, 50, 73, -111, -50, -21, 31, 36, 61, -95, 47, -49, -21, 56, 36, -9, 69, -62, -63, 25, 44, -90, 53, -53, 54, 24, 43, -56, 46, 59, 34, 93, -6, 62, 108, 39, 16, 55, -58, 97, 36, 82, -49, -12, 37, -46, -83, 54, 45, 63, 51, 59, 66, 43, 44, -52, -67, -48, 53, 53, 61, 41, 20, -55, 35, -7, 58, 55, -49, 39, 29, 45, -86, 52, -37, -97, -24, 68, 56, 22, -72, 101, 46, -14, 64, 69, 42, 35, 92, 60, 48, -3, 28, -59, 62, 85, 44, -72, -79, 43, 51, -68, 39, 40, 30, -61, -113, -88, 32, 57, -65, -72, 36, 46, -56, 43, -64, 52, 42, 12, 26, 47, -93, 53, 33, 36, 9, 49, -56, 53, -61, 49, 40, -105, 43, -79, 31, 42, -91, 59, 51, 57, 52, 41, -72, 35, -65, 52, 57, -74, -49, -92, 39, 44, -88, -62, -95, 85, -45, 52, 28, 127, -5, 56, -65, 52, -34, 57, -94, 76, 46, -22, 123, 79, 40, 19, -72, 16, -66, 40, 24, 51, 26, 51, -41, 51, 39, 28, 52, 65, 53, 59, -33, 29, 50, 50, 28, -97, -26, 47, -8, 35, -60, 81, -55, 46, -72, 67, -58, 43, 80, -49, -76, 13, 46, 41, 47, -50, -60, -86, 54, -59, 46, 59, 54, 39, 42, 55, 44, 63, -69, 55, 38, 42, -49, 32, -66, -72, 54, 47, -10, 55, -98, 40, 47, 49, -58, 49, 32, 29, 60, 36, 55, 52, 46, -54, -68, 60, 84, -64, -37, 69, -66, 46, 32, -54, 72, 77, 39, -70, 15, 49, 38, 37, 46, 64, 69, 41, 27, -33, 43, -71, 31, 55, 69, -29, 70, 61, 45, 56, -60, 65, -47, 45, 69, 35, 22, 57, 45, 90, 88, 49, 39, -50, 47, 48, 34, 70, 47, 23, 51, -40, 48, 41, -114, -5, 54, 46, -67, 74, -82, 48, -72, 26, 60, 53, 53, -84, -51, -73, 66, 72, 13, 41, 127, 49, 54, 76, -53, 56, 70, -32, -18, 49, -44, 35, -11, 53, 28, 45, -87, 50, -47, 53, 63, -59, 38, -54, -75, -56, -71, -112, -49, -71, -23, 52, -126, 49, 60, 33, 29, 1, -35, -54, 48, -72, 44, 26, -24, 22, 55, 48, -56, -61, 48, -60, 44, 45, 41, -53, 66, -52, -68, 38, 30, -59, 33, 52, -95, 43, 36, -72, 55, 48, 56, -16, 35, 42, -12, -25, -30, 68, 37, -69, 17, 30, 76, 51, 43, -54, 52, -80, 2, -67, 72, 7, -48, -24, -24, 3, 58, 49, -5, 47, 56, 71, -73, 40, 119, 59, -52, 16, 43, 52, -17, -12, -22, -26, 0, 4, -21, 7, 19, -14, -21, -36, 7, 5, 17, 2, 25, -8, -14, -17, -8, -10, -13, 26, 6, 14, 0, 12, 3, -30, 45, 15, -28, 32, 28, -16, -20, 9, 24, -7, -6, 45, 23, 27, 18, 12, 4, 6, 2, -38, 15, 21, -28, -58, 12, 7, -1, -28, 5, -1, 15, 3, 20, 4, -12, 16, 13, 20, 7, 11, 6, 13, 6, 15, 8, 9, -27, -2, 19, -36, -18, -26, 20, 16, 36, 14, 18, 15, -29, 11, 6, -43, -34, -16, 11, -12, 26, 37, 42, 16, 15, 13, 17, 7, 11, -13, -35, -11, 7, 10, 15, 16, 28, 18, -51, 18, -25, -38, 15, 8, 0, 13, -13, 17, -8, 28, -7, -38, 14, 25, 19, 23, 18, 17, 14, -29, 13, 33, -51, 0, 53, 26, 13, -12, 17, 11, -36, 16, -3, -14, -32, -24, -79, 10, -12, 57, -16, 6, 3, 3, 35, -39, 15, 0, 7, 7, 21, 10, 11, 25, -59, 34, -11, 8, -18, 10, 13, 32, -19, 36, -15, 17, 5, -26, 11, 20, 19, 20, 33, -35, -26, 8, -43, -39, -54, -12, -29, -29, 11, -10, 23, -16, 4, 15, 4, -33, 17, 3, 7, 17, 48, -21, 22, -19, 11, 16, 11, -5, -30, 17, 15, 21, 16, 18, 12, 20, 7, 20, 20, -2, 19, -49, -12, -46, 9, -3, 3, -32, 10, 22, -16, 15, 8, -16, 23, -20, -20, 3, 14, -28, 14, -19, 13, 18, 7, -11, 11, 24, 8, 28, -5, 25, 43, 7, 4, 12, -11, 28, 13, 17, -22, 4, 15, -13, -29, 4, 16, 17, 12, 21, 7, 14, 5, -35, -31, -2, 20, -3, 22, 29, 6, -17, 5, 14, 33, 22, -15, 12, 52, 5, -15, 16, -8, -41, 3, 41, 4, 4, -7, 37, 11, 1, 23, 24, 5, 10, 29, 20, 32, -7, 6, -26, 5, 33, 1, -13, -21, 32, 13, -23, 8, 12, 11, -30, -40, -35, -2, 18, -23, -21, 10, 5, -15, 2, -19, 17, 3, 59, 22, 23, -43, 12, -5, 3, 18, 14, -9, -33, -10, 4, 8, -59, 7, -10, 13, 6, -41, 2, 15, -1, 15, 17, -30, 62, -24, 21, 12, -31, -7, -10, 4, 10, -46, -25, -26, 21, -12, 20, 2, 52, -1, 11, -23, 6, -20, 14, -62, 19, 13, -10, 53, 32, 14, 7, -5, 5, -23, 11, -1, 9, 6, 25, -29, 14, 5, 13, 16, 25, 13, 24, -9, 1, 20, 9, 9, -47, -3, 8, 8, 18, -76, 28, -27, 15, -28, 14, -24, 6, 29, -16, -14, 20, 16, 11, 6, -30, -28, -35, 19, -13, 10, 17, 10, 7, 7, 14, 19, 13, -22, 22, 0, 16, -22, 10, -14, -25, 10, 21, -2, 5, -42, 16, 5, 20, -16, 29, 16, 5, 15, 8, 20, 2, 13, -30, -15, 25, 96, -11, -1, 35, -21, 7, 13, -24, 27, 27, 7, -16, 13, 22, 2, 11, 0, 19, 19, 4, 9, -4, 6, -31, 7, 18, 17, 3, 25, 23, 4, 20, -11, 19, -31, 11, 26, 6, 12, 18, 14, 25, 37, 19, -3, -6, 17, 5, -2, 0, 12, 9, 11, -14, 31, 23, -31, -5, 19, 21, -28, 12, -16, 12, -42, 9, 13, 5, 8, -22, -23, -19, 21, 23, -9, 10, 29, 17, 3, 33, -46, 23, 14, -21, -11, 24, -11, 4, -47, 10, -9, 27, -14, 23, -22, 18, 14, -46, 12, -24, -19, -21, -34, -58, -26, -32, 14, 11, -79, 12, 10, 18, 4, -5, -33, -17, 15, -26, 6, 19, -20, 1, -14, 11, -17, -28, 0, -15, 4, 9, 11, 3, 14, -39, -19, 16, 8, -11, 10, 13, -9, 7, 5, -18, 18, 21, 8, -21, 5, 7, -5, -9, -14, 24, 10, -15, -8, 14, 24, 18, 8, -21, 10, -23, -40, -28, 30, -2, -18, -3, -13, -4, 12, 4, 3, 13, 18, 12, -41, 13, 23, 24, -4, 1, 6, 10, 6, 0, 3, -8, 21, -9, -2, -13, -1, -2, -8, 6, -24, 7, -6, -10, 17, -5, 7, 0, 3, 17, -1, -9, -13, 7, -6, 5, -2, 6, 34, 2, -9, -7, 10, -6, 2, -14, -4, -3, 23, -4, 6, -9, -4, -1, -15, -6, -6, -3, -1, -12, -2, -18, 6, -13, -4, 0, 19, 23, -15, -7, -9, 4, 4, -8, 0, 14, -9, -3, -10, -4, -11, 2, -10, -1, -14, -6, -9, 9, -3, -10, 7, 0, 1, 4, -13, -13, -7, -7, -11, 18, -6, 3, -7, 15, -5, 22, 4, -2, -5, -4, 9, -9, -8, -2, 11, -6, -3, -3, -3, -2, -12, -4, -5, -14, -7, -10, -9, 3, -4, -15, 7, -1, 7, -2, -21, -5, -1, -14, -9, -5, -6, -12, -2, -10, -11, -7, -41, 2, 61, -19, 5, -4, 2, -10, -5, 3, -9, -8, 1, 4, -44, -11, 1, 16, 6, -1, 5, -13, -34, -3, -7, -2, -4, 14, -8, 1, -6, -5, -8, 0, -2, -5, -7, -6, -8, 23, -5, 12, -2, -1, 3, -16, -6, -1, -3, -6, 10, -36, -16, 3, 2, -7, -19, -8, -16, -11, 4, 4, -10, 2, 6, 2, -8, 2, 3, -9, -12, 1, -10, -6, 16, 1, -8, -16, -7, -6, 0, 0, -11, -12, -1, 5, -10, 2, -24, -6, 2, -16, -14, -10, 13, -13, -7, -16, -16, 10, -3, -2, -1, -9, -2, 9, -7, -20, -1, -5, -3, -5, -11, -13, -2, 12, -9, 0, -5, 0, 0, -6, 4, 1, -9, -10, 3, -11, 2, -6, -10, -13, -2, 10, 3, -2, 8, -9, -12, -26, 0, 4, -11, -4, -9, 3, -15, 16, -6, -13, -1, 14, 6, -2, -9, 29, 6, -5, 10, -1, 40, -9, -8, -3, 3, 0, 8, 10, -23, -1, 8, -4, -8, -6, -6, -7, -7, 2, -3, 6, 14, -2, -2, -1, -30, -7, -12, 8, 2, 21, -8, -10, -4, -5, -10, -3, -12, -2, -3, -11, -3, -3, 2, -11, -8, -3, 3, -7, -16, 44, 16, -4, 0, -11, -18, -12, 7, -5, -2, -12, 13, -13, -10, -23, -6, 3, -3, -11, -9, -9, -3, -17, 8, 2, 1, 43, -2, -4, 13, -1, 4, 21, -6, -4, -8, -4, -1, -11, 2, -2, -4, 0, 6, -10, -2, -19, -10, -6, -35, -5, -6, 7, -1, -17, -3, 4, -2, -4, -6, 3, -6, -7, 0, 8, -13, -1, -9, 3, 6, -5, -12, 8, 5, -12, -1, -10, -2, -7, -7, -7, -2, 2, -61, -7, -22, 8, -6, -18, -9, -15, -6, -4, 4, 19, -6, -4, -4, -13, -7, 3, -10, -8, -5, 1, -1, -7, -8, 0, 7, -13, 19, -1, -8, 1, -6, -11, 8, -3, -8, 7, 3, -16, 7, -2, -8, 2, 0, 8, -7, -7, 7, -5, 4, -12, -2, 3, -1, -8, 60, 2, 11, 4, -6, -9, 0, 1, -5, -10, -4, -13, 7, 4, -7, -6, -1, 5, -6, -15, 0, 6, 3, -2, -1, -3, -2, 3, -11, -6, -10, -1, 11, 2, -10, -2, -4, -15, 8, -10, -12, -19, -13, 3, -11, 18, -6, -3, -9, 8, -11, 0, -4, 3, -7, -2, 6, 4, -2, 3, -8, -23, 17, -12, -3, 4, -10, -11, -4, -4, -5, 13, -7, -11, 1, -12, -12, 8, -13, -8, -48, -7, -15, -5, -10, -4, 6, -6, -79, -11, -11, 11, 9, -3, -1, -5, -7, -19, 2, -1, 0, -24, 1, -22, 2, 6, 20, -27, -19, -7, -12, 12, -6, 1, -19, 5, -7, -6, -4, 15, -13, -8, -16, -11, -5, -30, -8, -10, -11, -35, -5, 7, -10, -28, -2, 3, -2, 7, -2, -20, 17, -5, -4, 4, -13, 3, -26, -19, -16, -6, 1, 10, -9, -24, -7, 4, 2, 2, -12, -7, -9, -5, -6, -6, -25, -82, -1, -1, -4, 11, 3, 5, -10, 1, -25, -6, -2, -11, -12, 0, -17, -6, 7, 3, -15, -7, 11, -40, -74, -66, 33, 55, -64, 43, 42, 6, -67, -99, 44, 32, 42, 31, 57, 66, -75, -73, 19, -45, -62, 41, 44, 54, 42, 65, 50, -95, -97, 50, -64, 46, 55, -49, -74, 47, 59, -37, -106, 47, 52, 57, 58, 34, 47, 34, 37, -25, 46, 45, -65, -96, 62, 27, -20, -81, -127, 59, 37, 23, 58, 43, -44, 44, 46, -17, 40, 33, 51, 42, 36, 48, 37, 35, -68, 21, 55, -105, -81, -87, 49, 47, 64, 46, 35, 34, -63, 33, 39, -108, -39, -58, 36, -77, 62, 61, 60, 45, 41, 43, 53, 35, 52, -49, 2, -63, 37, 33, 25, 31, 45, 46, -98, 38, -68, -82, 46, 33, 27, 51, -33, 41, 16, 55, 42, -39, 46, 48, 42, 38, 43, 41, 44, -30, 45, 41, 68, -25, 100, 42, 48, -58, 56, 43, -16, 59, 25, -66, -15, -69, -62, 41, 3, 56, -25, 30, -54, 35, 41, -75, 37, 26, 35, -7, 51, 57, 36, 36, -127, 50, -34, 36, -62, 28, 46, 75, -61, 60, -64, 46, -48, -53, 35, 54, 53, 39, 30, -95, -65, 50, -90, -86, -52, -31, -105, -76, 41, -60, 42, 4, 33, 48, 33, -103, 47, 22, 35, 61, 117, -71, 58, -127, 55, 45, 35, 25, -20, 57, 44, 42, 59, 50, 40, 65, 59, 56, 60, 38, 50, -46, -18, -98, 28, 18, 46, -27, 46, -52, 8, 39, 39, 29, 74, -89, -62, 28, 39, -75, 47, -62, 43, 45, 37, -67, 32, 57, 37, 44, 38, 57, 65, 46, 26, 40, -61, 50, 58, 52, -43, -9, 47, -40, -21, 35, 45, 49, 44, 51, 67, 43, 31, -60, -80, -21, 61, 41, 53, 40, 30, -56, 28, 52, 37, 70, -54, 46, -97, 35, -87, 43, -45, -47, -37, 73, 43, 38, -59, 50, 37, -49, 55, 45, 35, 48, 42, 54, 77, 17, 33, -68, 48, 59, 31, -61, -29, 55, 46, -98, 41, 47, 47, -68, -80, -98, 27, 51, -64, -70, 38, 31, -88, 50, -51, 49, 31, -127, 59, 44, -38, 45, 18, 36, -2, 45, -70, -90, -56, 43, 43, -57, 46, -76, 43, 38, -71, 48, 51, 43, 44, 44, 2, -121, -81, 57, 70, -75, -46, -95, 34, 31, -110, -53, -101, 39, -71, 42, 20, 47, 35, 51, -60, 36, -61, 52, -80, 44, 54, 6, 51, 57, 49, 35, -80, 39, -80, 44, 30, 40, 37, 54, -62, 55, 56, 56, 61, 59, 50, 61, -47, 19, 42, 42, 28, -47, -17, 27, -19, 43, -127, 59, -71, 57, -65, 36, -83, 30, 48, -65, -101, 45, 42, 46, 41, -74, -72, -66, 52, -53, 42, 48, 47, 27, 36, 51, 49, 41, 32, 45, 36, 48, -49, 48, -59, -71, 47, 63, 27, 43, -38, 39, 34, 40, -51, 55, 29, 28, 54, 30, 48, 43, 37, -70, -76, 54, -87, -62, -25, 71, -92, 39, 35, -59, 50, 47, 46, -70, 69, 37, 38, 56, 55, 34, 47, 29, 33, -47, 49, -80, 37, 57, 57, -41, 63, 59, 28, 55, 19, 49, -77, 45, 39, 38, 49, 55, 42, 54, 45, 52, 23, 18, 45, 41, 24, 40, 38, 45, 48, -33, 80, 44, -99, 8, 45, 54, -80, 53, -40, 31, -65, 31, 37, 44, 42, -89, -75, -55, 47, 40, 13, 38, 35, 51, 42, 48, 72, 53, 29, -5, -46, 45, -67, 32, -114, 34, 33, 68, -38, 56, -60, 34, 63, 107, 34, -66, -78, -64, -72, -48, -13, -85, 20, 43, -127, 46, 37, 48, 32, 20, -70, -61, 39, -94, 46, 52, -79, 36, 37, 37, -72, 127, 31, -79, 29, 41, 38, -60, 50, 127, -69, 41, 36, -60, 21, 47, -120, 46, 27, -64, 39, 44, 45, -54, 32, 38, 15, 11, -101, 54, 38, -58, 35, 37, 53, 38, 34, -54, 57, -80, 118, -108, 63, 19, -18, 16, 15, 12, 56, 43, 51, 36, 60, 54, -96, 43, 43, 55, -42, 25, 41, 49, 52, -112, -124, -112, 72, 116, -117, 123, 127, 46, -127, -127, 124, 93, 119, 116, 127, 127, -125, -124, 72, -127, -127, 124, 125, 127, 124, 127, 127, -125, -82, 108, -115, 125, 127, -122, -114, 117, 127, -96, -127, 120, 127, 110, 120, 115, 127, 120, 120, -119, 125, 123, -121, -127, 122, 117, -121, -127, -69, 66, 120, 106, 127, 93, -118, 127, 124, -106, 117, 116, 118, 125, 123, 127, 114, 119, -120, 112, 127, -114, -117, -127, 127, 119, 127, 127, 125, 111, -120, 111, 127, -107, -61, -124, 124, -127, 127, 127, 127, 123, 126, 127, 127, 127, 127, -113, -53, -121, 122, 124, 123, 115, 123, 126, -127, 121, -127, -118, 125, 85, 80, 126, -127, 111, 78, 127, 99, -72, 122, 127, 117, 118, 127, 126, 117, -34, 125, 112, 92, -95, 43, 123, 126, -121, 127, 124, -122, 113, 104, -127, -10, -127, -49, 117, 27, 123, -126, 114, -119, 118, 127, -127, 117, 97, 110, -114, 127, 111, 119, 126, -121, 125, -94, 120, -124, 121, 126, 124, -127, 127, -127, 116, -127, -127, 121, 124, 127, 124, 38, -127, -118, 116, -127, -127, -123, -103, -127, -127, 119, -121, 127, 52, 99, 125, 110, -127, 123, 125, 118, 127, 127, -127, 127, -116, 123, 124, 118, 108, 33, 121, 127, 126, 107, 113, 126, 114, 127, 125, 115, 111, 127, -73, -107, -118, 116, 123, 119, -119, 118, -127, 43, 122, 120, 67, 127, -110, -127, 105, 122, -127, 119, -127, 127, -91, 122, -127, 126, 127, 111, 123, 67, 127, 127, 118, 91, 122, -127, 127, 120, 127, -113, -103, 115, -123, -115, 119, 118, 117, 117, 127, 127, 114, 118, -104, -127, -102, 123, 123, 127, 120, 91, -127, 117, 86, 125, 127, -108, 118, -82, 119, -124, 124, -105, -127, -98, 127, 124, 114, -125, 127, 123, -92, 127, 124, 126, 120, 123, 126, 127, 77, 104, -116, 127, 127, 118, -127, -123, 114, 112, -127, 112, 112, 99, -127, -127, -127, 109, 125, -122, -123, 114, 117, -127, 127, -124, 127, 116, -92, 127, 115, -127, 124, 114, 119, -83, 125, -127, -11, -127, 119, 116, -127, 120, -127, 113, 118, -127, 122, 125, 126, 126, 122, -7, -98, -127, 121, 125, -127, -105, -127, 110, 122, -127, -127, -121, 124, -122, 121, 108, 72, 78, 125, -127, 118, -118, 126, -106, 126, 113, 72, 118, 127, 119, 86, -127, 104, -127, 117, 105, 127, 91, 127, -126, 125, 115, 98, 127, 127, 122, 127, -120, 99, 123, 119, 121, -23, -122, 112, -96, 127, -106, 127, -110, 127, -127, 123, -124, 118, 127, -111, -127, 100, 120, 119, 119, -112, -113, -127, 124, -127, 120, 125, 127, 115, 118, 127, 127, 122, 18, 127, 104, 127, -108, 104, -114, -116, 126, 127, 68, 121, -119, 121, 121, 123, -115, 122, 121, 120, 126, 114, 121, 113, 124, -127, -127, 123, -60, -127, -109, 127, -127, 119, 111, -119, 125, 125, 104, -122, -54, 125, 114, 117, 125, 127, 127, 120, 98, -110, 122, -127, 112, 127, 127, -92, 127, 126, 119, 127, -8, 127, -127, 110, 123, 111, 90, 127, 120, 127, 122, 127, 119, 54, 123, 127, 112, 127, 117, 110, 126, -101, 127, 126, -127, 81, 121, 125, -127, 127, -122, 121, -127, 106, 121, 124, 124, -127, -127, -127, 127, 126, 90, 115, 80, 123, 119, 127, 54, 121, 123, 28, -83, 121, -125, 107, -127, 122, 107, 127, -127, 126, -103, 124, 125, 87, 122, -127, -123, -127, -127, -103, 3, -127, -105, 119, -117, 122, 119, 121, 113, 72, -108, -127, 122, -121, 118, -111, -109, 98, 127, 125, -122, 65, 121, -127, 124, 106, 122, -120, 126, 68, -127, 112, 113, -114, 103, 126, -104, 123, 124, -127, 124, 122, 123, -106, 117, 116, 69, 60, -127, 127, 112, -127, 102, 115, 127, 123, 122, -127, 122, -127, 101, -127, 127, 81, -6, 48, 56, 72, 127, 125, 127, 127, 127, 125, -127, 119, 127, 127, -105, 121, 119, 127, 55, -115, -111, -108, 69, 107, -115, 123, 127, 51, -111, -114, 127, 95, 127, 118, 121, 111, -121, -127, 78, -123, -111, 127, 127, 119, 126, 117, 123, -106, 84, 107, -100, 127, 121, -127, -91, 120, 127, -98, 57, 117, 124, 107, 116, 116, 122, 123, 126, -127, 127, 127, -121, -113, 108, 120, -121, -120, 94, 55, 127, 113, 122, 86, -119, 126, 125, -116, 122, 124, 116, 127, 127, 124, 115, 121, -112, 115, 125, -102, -109, -123, 126, 123, 126, 125, 127, 116, -113, 121, 123, -118, -53, -127, 125, -116, 126, 118, 122, 124, 125, 125, 119, 126, 125, -111, -64, -114, 127, 127, 127, 118, 127, 124, -113, 127, -124, -105, 125, 84, 85, 127, -117, 114, 87, 124, 99, -72, 123, 127, 120, 127, 125, 127, 120, -37, 127, 119, 39, -107, 47, 127, 125, -125, 116, 127, -127, 103, 113, -125, -13, -118, -28, 115, 40, 127, -127, 118, -116, 118, 116, -126, 122, 101, 111, -121, 123, 110, 127, 127, -98, 127, -96, 120, -127, 127, 127, 117, -116, 121, -120, 117, -123, -115, 122, 127, 127, 127, 34, -93, -107, 113, -105, -117, -123, -95, -115, -120, 121, -123, 127, 60, 100, 127, 111, -97, 124, 127, 127, 127, 97, -112, 127, -91, 118, 127, 122, 111, 36, 116, 115, 127, 100, 105, 127, 109, 124, 127, 109, 125, 124, -70, -127, -106, 117, 127, 122, -127, 118, -93, 46, 127, 119, 65, 123, -105, -126, 109, 127, -125, 127, -113, 126, -117, 127, -110, 127, 119, 112, 127, 61, 126, 125, 121, 91, 127, -118, 126, 118, 125, -115, -101, 119, -125, -127, 127, 114, 122, 118, 124, 109, 108, 127, -107, -113, -100, 121, 127, 123, 124, 96, -122, 120, 75, 127, 122, -107, 117, 57, 121, -119, 127, -102, -126, -97, 124, 127, 121, -123, 126, 127, -76, 123, 127, 127, 115, 127, 127, 120, 91, 104, -115, 124, 127, 125, -121, -127, 109, 112, -118, 110, 111, 98, -109, -122, -118, 112, 127, -117, -114, 113, 122, -102, 127, -127, 127, 117, 42, 117, 120, -122, 127, 126, 117, -89, 127, -101, 127, -115, 121, 115, -125, 119, -120, 112, 125, -120, 127, 126, 125, 127, 119, -9, 42, -122, 121, 113, -126, -115, -125, 116, 124, -106, -127, -127, 127, -112, 127, 117, 77, 75, 127, -127, 116, -109, 127, -101, 127, 110, 74, 127, 126, 125, 91, -113, 102, -120, 118, 113, 122, 90, 126, -117, 121, 108, 99, 115, 126, 118, 120, -110, 108, 127, 127, 127, -7, -122, 119, -102, 125, -65, 122, -112, 125, -113, 127, -116, 126, 127, -96, -121, 98, 121, 121, 127, -114, -107, -124, 124, -126, 121, 127, 121, 124, 122, 124, 122, 127, 4, 122, 107, 124, -104, 106, -117, -109, 125, 122, 65, 127, -127, 123, 127, 124, -115, 127, 126, 125, 127, 120, 125, 109, 127, -107, -112, 127, 97, -111, -114, 119, -106, 119, 118, -109, 127, 127, 108, -127, -99, 127, 122, 119, 127, 118, 123, 126, 101, -109, 119, -114, 109, 118, 125, -101, 120, 127, 127, 122, -16, 124, -107, 113, 127, 104, 90, 125, 123, 125, 127, 113, 127, 47, 119, 122, 121, 110, 123, 109, 124, -110, 97, 123, -110, 85, 121, 121, -113, 127, -127, 127, -121, 115, 127, 118, 123, -101, -122, -125, 127, 127, 92, 119, 81, 127, 120, 127, -127, 127, 127, 36, -90, 121, -117, 109, -39, 123, 111, 117, -126, 126, -108, 127, 124, -127, 115, -121, -115, -121, -115, -105, 6, -109, -127, 122, -112, 124, 127, 127, 118, 78, -93, -118, 127, -115, 119, -123, -93, 98, 123, 127, -117, -123, 120, -112, 127, 106, 121, -115, 127, -55, -122, 113, 118, -111, 110, 127, -107, 124, 127, -125, 127, 122, 122, -97, 123, 121, 77, 63, -121, 126, 112, -124, 107, 121, 126, 127, 126, -119, 121, -120, -22, -66, 125, 90, -1, 50, 59, 78, 124, 126, -2, 126, 122, 127, -97, 118, 127, 126, -106, 118, 118, 120, 12, -44, -69, -67, 37, 50, -70, 40, 44, 4, -56, -76, 45, 38, 43, 33, 51, 40, -67, -66, 22, -39, -60, 46, 44, 50, 43, 59, 52, -80, 74, 49, -64, 47, 52, -53, -67, 54, 57, -31, 80, 48, 54, 51, 50, 38, 44, 33, 39, -33, 43, 44, -59, -84, 67, 25, -25, -76, 102, 57, 40, 25, 60, 39, -45, 44, 48, -26, 46, 37, 51, 40, 42, 45, 39, 41, -77, 23, 53, -91, -79, -73, 54, 46, 63, 42, 36, 42, -58, 44, 36, -96, -32, -57, 38, -78, 60, 57, 60, 49, 42, 38, 46, 33, 50, -39, -4, -55, 42, 33, 28, 34, 46, 45, -94, 40, -83, -72, 49, 28, 30, 54, -33, 44, 15, 52, 43, -34, 45, 48, 48, 43, 45, 44, 43, -25, 43, 43, -48, -39, 53, 43, 48, -54, 45, 46, -26, 54, 27, -70, -16, -60, -57, 42, 13, 53, -33, 30, -43, 34, 8, -75, 42, 24, 38, -19, 54, 54, 39, 37, -114, 54, -30, 33, -65, 31, 39, 64, -64, 57, -58, 42, -49, -45, 36, 56, 55, 46, 22, -72, -63, 47, -85, -82, -55, -28, -85, -74, 39, -64, 43, 14, 35, 48, 29, -104, 47, 23, 43, 61, 105, -62, 59, -96, 55, 47, 39, 33, -30, 54, 41, 49, 53, 38, 46, 64, 62, 58, 58, 49, 53, -32, -25, -89, 29, 26, 47, -30, 50, -32, 11, 37, 38, 30, 68, -76, -63, 27, 40, -79, 56, -63, 49, 7, 35, -61, 35, 60, 37, 47, 35, 57, 54, 49, 27, 43, -52, 55, 53, 50, -46, -19, 50, -43, -30, 43, 48, 55, 43, 53, 51, 44, 35, -65, -73, -22, 59, 39, 52, 33, 35, -44, 27, 44, 39, 61, -48, 47, 124, 38, -79, 41, -43, -44, -37, 68, 42, 38, -51, 48, 40, -40, 60, 46, 35, 43, 43, 52, 76, 22, 30, -66, 36, 58, 31, -53, -27, 52, 44, -91, 38, 45, 52, -63, -71, -88, 27, 51, -64, -73, 39, 34, -77, 40, -48, 46, 35, 114, 54, 45, -32, 50, 26, 32, -8, 47, -66, 34, -56, 42, 42, -53, 42, -81, 37, 40, -70, 53, 55, 44, 47, 45, -7, 127, -50, 57, 61, -80, -47, -95, 41, 37, -88, -63, -98, 41, -65, 48, 26, 44, 33, 55, -64, 41, -62, 56, -65, 43, 52, 3, 51, 60, 49, 36, -74, 43, -72, 47, 30, 41, 36, 56, -60, 53, 52, 54, 53, 59, 47, 56, -46, 23, 43, 44, 36, -30, -27, 32, -16, 41, -70, 54, -66, 49, -64, 37, -71, 36, 49, -49, -75, 45, 40, 44, 46, -79, -77, -63, 56, -56, 42, 53, 45, 30, 38, 55, 48, 39, 23, 46, 36, 43, -40, 45, -62, -70, 53, 55, 29, 51, -40, 39, 36, 42, -61, 55, 36, 27, 53, 38, 51, 49, 38, -72, -83, 54, 127, -59, -34, 67, -92, 42, 40, -57, 54, 53, 46, -73, 17, 37, 43, 61, 54, 29, 46, 29, 31, -43, 53, -73, 40, 49, 53, -39, 58, 58, 34, 50, 20, 46, -69, 50, 43, 42, 40, 55, 46, 53, 47, 43, 32, 12, 43, 43, 32, 22, 47, 44, 45, -35, 76, 46, -95, 9, 48, 56, -74, 58, -51, 36, -69, 34, 40, 42, 44, -64, -67, -51, 53, 42, 23, 39, 33, 47, 41, 52, -75, 57, 29, 1, -48, 44, -67, 34, -57, 40, 38, 64, -35, 54, -62, 47, 59, -86, 35, -64, -68, -58, -64, -46, -9, -86, 5, 50, -115, 48, 41, 49, 31, 23, -71, -52, 44, -80, 43, 43, -86, 36, 38, 42, -71, -112, 25, -65, 30, 46, 32, -61, 49, -115, -74, 37, 36, -48, 33, 45, -103, 46, 29, -65, 43, 40, 45, -56, 43, 40, 14, 13, -93, 56, 42, -60, 39, 39, 57, 43, 37, -57, 60, -76, -53, -83, 66, 20, -15, 18, 14, 17, 54, 38, -48, 39, 57, 65, -73, 47, 43, 54, -46, 28, 37, 46, -3, 6, -24, -13, 7, 10, -20, -1, -4, -8, -13, -31, -16, -1, -11, -10, 19, 15, -20, -17, -11, -5, -5, -12, -7, 22, -3, 13, 14, -28, 94, 2, -23, -7, 3, 1, -36, -5, 4, -4, 68, 0, 8, 10, -1, -13, -2, -12, -9, 22, -6, -6, -19, -37, 30, -18, 20, -34, 73, 34, -9, -16, 4, 1, -5, -1, -5, 5, -8, -7, -3, -8, -16, 3, -3, -4, -22, -18, 7, -37, -26, -35, -4, 3, 8, 1, -12, -12, -15, -17, -1, -43, -12, -9, -16, -16, 7, 14, 4, 2, -9, -5, 7, -7, -1, -1, 22, -9, -12, -13, -9, -10, -8, 0, -41, -15, -15, -32, -5, 1, -8, -10, 7, -4, -16, -6, 10, -9, -6, -3, -9, -19, 3, -11, -1, -10, -12, -17, -22, 10, 38, -7, 2, -7, 9, 0, 19, 12, -22, -15, -7, -12, -27, -6, -12, 5, 28, -15, -5, -6, -40, -7, -10, -6, -14, 24, 1, 7, -9, -6, -53, -6, 9, -10, -10, -19, -9, 30, -6, 16, -6, -1, -8, -17, -5, 5, -2, -8, 21, -54, -19, 2, -34, -25, 1, 11, -34, -24, -5, -6, -7, -8, -3, 0, -5, -35, -5, -20, -9, 3, 66, -18, -1, -50, 12, -8, -15, -25, -20, 6, 3, 1, 8, 7, -8, 13, 8, -4, 15, -20, 3, -11, 35, -37, -17, -34, -10, 23, 0, -54, -3, -10, -5, 10, 11, -34, -10, -9, -12, -19, -8, -21, -3, 55, -9, -13, -12, 12, -5, -10, 3, 3, 1, -4, -8, -4, -10, 0, 0, 7, 6, 25, -8, -3, 28, -14, -1, -28, 6, -1, 29, 15, -25, -3, -21, 4, 3, 3, 14, -11, -2, -11, -15, 26, -11, 15, -9, 0, 83, -8, -20, -1, -14, 11, 3, 25, -9, -13, -3, -1, -18, -9, 6, -11, -10, 2, -5, 12, 24, -23, -10, -10, 3, 1, -14, -19, 16, -3, -6, -36, -5, 1, 8, -28, -24, -29, -20, -3, -5, -20, -4, -12, -34, 0, -1, -5, -9, 85, 12, -2, 19, 3, -16, 2, 17, -10, -32, 79, -10, -2, -9, -5, 6, -22, -5, -11, -23, -17, 7, -2, -4, -2, 11, 87, -33, 0, 12, -19, 4, -20, -5, -4, -40, -12, -19, -12, -18, -11, -17, 5, 8, -5, -19, 1, -11, 1, -19, -3, 10, -23, -12, 0, -7, -2, -24, -5, -24, 4, -13, -3, 4, 5, -20, 7, 21, 6, 17, 9, 9, 15, 10, -20, -10, -10, -18, -32, 21, -11, 5, -12, -71, 5, -21, 8, -14, -10, -27, -17, -8, -15, -26, 3, -6, -7, -8, -14, -34, -8, 5, -1, -4, -3, 3, -20, -3, 1, -8, -5, 23, -1, -6, -3, 0, 6, -15, -18, -1, 4, 4, -20, 24, -7, -13, -8, -13, 0, -29, -20, 13, -10, -6, 6, -12, -25, -28, -10, 74, -11, 13, 15, -39, -2, -4, -11, -4, -7, 2, -4, 63, -19, -14, 13, 10, 9, 3, -16, -10, -3, 1, -18, -2, 11, 8, 5, 21, 6, -12, 6, 21, -4, -24, -2, -10, 14, 6, 5, -10, 6, -14, 6, -20, -3, 2, -6, -17, 30, -6, 1, -1, 18, 41, 0, -40, -11, -6, 11, -31, 2, -1, -13, -13, -14, -11, 8, 3, -33, -18, -5, -1, -13, -15, -14, 1, 1, -8, -6, -54, -8, -25, -14, -5, -5, -24, -2, -100, -8, -32, 12, 8, -1, 2, -12, 14, -30, -4, -10, -29, -21, -12, 8, -7, -33, 38, -27, -54, -6, -21, -2, -15, -7, -31, -6, -7, -30, -6, 41, -35, -6, 9, -14, -10, -56, -10, -26, -11, -18, -1, -2, -4, -62, -15, -2, -11, -7, -14, -15, -35, -5, -22, -5, -10, 1, -12, -21, -13, -13, -17, -3, -52, -19, -11, -4, 9, -13, 0, -13, -15, -17, 9, -22, -27, -84, 8, -14, -19, -3, -7, -11, 6, 0, -68, -16, 15, 6, -50, -2, -12, 1, -4, -3, -6, 12, 47, -52, -82, -61, 56, 56, -84, 51, 28, 43, -72, -93, 52, 49, 41, 37, 69, 57, -67, -66, 51, -48, -58, 23, 53, 73, 60, 66, 49, -92, -115, 68, -73, 20, 60, -61, -98, 47, 60, -70, -77, 4, 52, 48, 55, 34, 49, 43, 48, 18, 40, 32, -64, -28, 76, 26, -27, -82, -114, 74, 39, 26, 57, 44, -54, 44, 50, -86, 50, 35, 67, 42, 46, 46, 36, 42, -77, 30, 44, -98, -85, -73, 58, 49, 28, 44, 26, 51, -61, 45, 49, -127, 18, -50, 38, -88, 65, 28, 18, 42, 39, 42, 55, 40, 51, -52, 47, -74, 46, 27, 28, 34, 19, 47, -71, 25, -83, -84, 45, 49, 56, 46, -44, 39, 43, 53, 62, 14, 49, 26, 45, 28, 48, 29, 48, -1, 35, -2, 48, -33, 111, 21, 40, -71, 62, 45, 51, 52, 34, -77, 35, -71, -12, 45, 23, -7, -24, 36, -62, 43, 9, -63, 35, 54, 44, -22, 48, 55, 41, 13, -91, 18, -37, 42, -78, 34, 48, 66, -68, 52, -73, 48, -74, -47, 44, 59, 59, 27, -16, -82, -57, 57, -95, -98, 3, -34, -85, -69, 45, -58, 29, 41, 42, 50, 41, -97, 50, 21, 45, 59, 109, -57, 57, -114, 62, 57, 33, 36, 32, 66, 39, 24, 65, 55, 37, 65, 62, 51, 55, 45, 48, 2, 6, -96, 34, 23, 44, 32, 52, -37, 43, 32, 40, 64, 76, -67, -62, 48, 39, -46, 51, -52, 54, 32, 27, -74, 36, 61, 48, 19, 63, 43, 28, 51, 37, 47, -62, 32, 59, 50, -43, -12, 45, -64, 27, 41, 51, 38, 50, 46, 76, 54, 33, -74, -68, -44, 53, 31, 59, 33, 43, -65, 28, 64, 38, 73, -51, 50, -97, 42, -71, 47, -57, 16, -54, 63, 40, 52, -70, 0, 34, -73, 65, 30, 37, 55, 27, 70, 75, 46, 35, -66, 60, 41, 39, -48, 16, 49, 67, -82, 39, 48, 56, -66, -57, -78, 53, 39, -70, -89, 50, 46, -88, 49, -53, 47, 42, -123, 66, 51, 20, 50, 24, 41, -42, 41, -86, -83, -71, 60, 53, -6, 51, -84, 37, 48, -7, 51, 47, 46, 45, 48, 46, -121, -67, 52, 101, -64, -43, -122, 46, 36, -101, -61, -94, 22, -78, 34, 31, -42, 53, 47, -43, 50, -66, 55, 29, 27, 61, 46, -23, 34, 53, 50, -96, 57, -64, 51, 45, 37, 57, 49, -71, 47, 69, 69, 51, 49, 59, 57, -41, 24, 42, 41, 32, 4, -7, 20, -57, 45, -63, 43, -73, 48, -71, 26, -83, 34, 32, -62, -70, 41, 46, 49, 47, -72, -75, -10, 63, -86, 47, 34, 57, 27, 37, 49, 50, 33, 62, 41, 52, 48, -69, 66, -103, -70, 48, 60, 54, 44, 22, 46, 31, 34, -57, 45, 35, 29, 49, 35, 51, 58, 35, -89, -101, 41, -67, -77, -40, 67, -79, 49, 44, -68, 31, 35, 53, -78, 62, 25, 58, 65, 66, 15, 42, 29, 34, -53, 58, -75, 48, 51, 48, -62, 65, 61, 24, 48, 53, 40, -72, 57, 26, 64, 57, 53, 37, 38, 11, 44, 24, 43, 48, 40, 39, 41, 54, 42, 51, -25, 70, 49, -102, 39, 46, 62, -80, 60, -49, 32, -29, 34, 28, 57, 47, -103, -72, -58, 48, 20, 44, 42, -17, 48, 56, 25, 80, 48, 28, 41, -68, 47, -68, 47, -43, 46, 51, 45, -5, 57, -77, 30, 64, 97, 44, -61, -92, -54, -52, 22, 34, -75, 51, 52, -105, 47, 31, 49, 39, 39, -71, -63, 47, -73, 46, 54, -80, 48, 48, 35, -89, 121, 44, -84, 24, 41, 38, -71, 43, 112, -70, 47, 48, -83, 40, 34, -127, 51, 30, -42, 26, 43, 50, -85, 42, 38, 43, 47, -85, 42, 39, -55, 57, 37, 45, 32, 40, -56, 64, -69, 127, -52, 55, 44, 24, 37, 52, 39, 62, 45, 83, 33, 62, 58, -92, 44, 19, 57, -59, 32, 49, 52, 125, -124, -127, -127, 127, 127, -127, 127, 110, 124, -121, -115, 111, 124, 117, 125, 109, 114, -127, -112, 125, -114, -108, 79, 122, 109, 120, 114, 123, -127, -62, 127, -127, 89, 120, -124, -127, 125, 119, -127, -112, 0, 122, 127, 123, 121, 126, 121, 127, -7, 122, 100, -127, -97, 127, 127, -118, -122, -76, 127, 119, 119, 122, 121, -127, 123, 122, -127, 127, 117, 127, 122, 117, 127, 127, 126, -127, 123, 103, -96, -127, -101, 123, 127, 101, 127, 110, 127, -127, 123, 121, -113, 54, -127, 125, -112, 124, 115, 84, 124, 125, 122, 114, 123, 124, -127, 77, -127, 123, 116, 112, 123, 87, 127, -116, 93, -109, -127, 119, 127, 120, 113, -107, 119, 123, 118, 127, 61, 127, 80, 127, 101, 120, 112, 127, 66, 114, -51, 127, -122, 58, 71, 126, -127, 127, 117, 39, 125, 119, -120, 97, -117, 18, 122, 117, 35, -112, 122, -119, 119, 106, -120, 120, 121, 122, -114, 121, 127, 117, 79, -113, 80, -127, 127, -112, 120, 119, 127, -120, 118, -121, 127, -126, -109, 119, 116, 124, 98, -90, -86, -122, 127, -114, -121, -30, -127, -115, -121, 125, -127, 60, 123, 125, 122, 127, -107, 123, 123, 117, 122, 118, -119, 119, -106, 127, 112, 125, 122, 106, 127, 118, 113, 127, 127, 118, 127, 120, 125, 127, 121, 121, 81, -84, -127, 127, 114, 127, -26, 127, -101, 126, 113, 127, 127, 121, -127, -102, 120, 115, -116, 122, -113, 115, -100, 118, -119, 118, 123, 126, 53, 124, 108, 18, 127, 120, 114, -125, 57, 127, 63, -118, -124, 122, -126, -32, 121, 122, 120, 121, 114, 114, 127, 116, -127, -111, -125, 124, 126, 115, 127, 123, -124, 123, 125, 125, 127, -127, 127, -86, 123, -127, 126, -127, -39, -125, 118, 123, 123, -127, 38, 125, -127, 118, 106, 123, 127, 67, 116, 123, 126, 117, -127, 123, 89, 125, -113, -57, 127, 127, -121, 121, 127, 122, -119, -112, -120, 125, 117, -124, -127, 127, 127, -117, 124, -110, 120, 124, -84, 122, 124, -26, 125, 122, 127, -115, 119, -117, -44, -113, 127, 127, -2, 127, -124, 124, 126, -108, 122, 127, 126, 113, 127, 105, -96, -112, 127, 127, -125, -120, -124, 127, 124, -116, -116, -113, 74, -127, 102, 122, -88, 126, 119, -108, 127, -126, 117, 47, 85, 127, 127, -17, 97, 127, 127, -121, 127, -120, 127, 123, 124, 127, 119, -127, 124, 127, 127, 118, 118, 127, 108, -123, 120, 113, 116, 122, 110, -117, 120, -127, 119, -50, 78, -123, 116, -107, 102, -126, 124, 78, -127, -117, 126, 127, 126, 122, -123, -127, -67, 127, -124, 124, 114, 117, 121, 125, 122, 127, 111, 119, 106, 126, 126, -127, 127, -127, -127, 127, 118, 126, 125, -36, 127, 123, 125, -125, 122, 126, 127, 126, 121, 126, 127, 121, -127, -127, 110, -72, -127, -116, 119, -124, 126, 127, -127, 84, 80, 126, -107, -80, 111, 122, 127, 127, 76, 102, 122, 123, -127, 127, -118, 127, 127, 115, -127, 119, 127, 114, 106, 97, 102, -123, 127, 96, 127, 127, 127, 127, 79, 85, 98, 120, 123, 127, 124, 127, 90, 127, 122, 124, -110, 123, 127, -125, 122, 122, 127, -115, 109, -116, 119, -102, 123, 108, 127, 127, -102, -122, -116, 115, 96, 126, 126, -71, 122, 127, 93, 74, 113, 126, 123, -127, 126, -127, 124, -37, 127, 122, 123, -67, 127, -127, 104, 127, 77, 126, -125, -127, -114, -110, 60, 107, -120, -78, 126, -101, 127, 107, 119, 122, 117, -127, -125, 122, -127, 119, -120, -127, 127, 125, 121, -127, 78, 127, -114, 122, 123, 124, -127, 114, 86, -117, 120, 127, -127, 127, 126, -91, 127, 124, -113, 114, 127, 127, -127, 124, 117, 127, 127, -108, 108, 121, -122, 126, 119, 93, 113, 125, -115, 127, -114, 102, -70, 115, 127, 97, 127, 127, 119, 126, 127, 85, 122, 122, 116, -98, 121, 19, 119, -122, 121, 124, 125, 127, -127, -117, -121, 125, 122, -123, 122, 112, 127, -122, -88, 118, 127, 123, 127, 109, 92, -121, -109, 127, -108, -106, 85, 120, 97, 127, 108, 117, -114, 127, 117, -115, 92, 111, -121, -99, 127, 121, -124, 33, -3, 126, 126, 127, 127, 120, 127, 121, -22, 126, 104, -123, -91, 125, 124, -127, -116, 89, 116, 118, 127, 121, 127, -124, 126, 127, -125, 126, 127, 127, 123, 118, 125, 127, 127, -127, 127, 104, -94, -116, -91, 123, 119, 110, 125, 117, 125, -119, 127, 118, -102, 57, -123, 127, -116, 121, 124, 91, 127, 127, 121, 110, 127, 125, -119, 74, -124, 124, 125, 118, 127, 93, 123, -104, 98, -101, -112, 127, 119, 127, 115, -107, 127, 127, 119, 115, 58, 125, 84, 121, 107, 121, 118, 127, 79, 117, -55, 117, -127, 50, 73, 127, -122, 122, 121, 37, 127, 127, -122, 103, -120, 38, 127, 127, 37, -111, 127, -127, 127, 103, -116, 127, 127, 127, -127, 126, 120, 117, 86, -101, 84, -120, 125, -106, 120, 120, 123, -119, 104, -116, 123, -123, -111, 127, 114, 126, 102, -95, -67, -127, 126, -98, -112, -40, -126, -116, -113, 127, -127, 63, 127, 127, 123, 127, -95, 127, 125, 117, 122, 106, -110, 118, -106, 123, 107, 127, 127, 113, 123, 121, 113, 122, 105, 123, 119, 117, 120, 121, 127, 119, 99, -99, -117, 127, 120, 126, -42, 127, -74, 127, 116, 127, 120, 113, -127, -101, 127, 121, -118, 125, -116, 107, -127, 120, -121, 118, 120, 127, 60, 127, 110, 5, 125, 127, 113, -112, 55, 124, 56, -127, -127, 127, -127, -45, 123, 127, 127, 127, 115, 88, 115, 126, -115, -109, -127, 127, 116, 112, 115, 127, -102, 127, 127, 127, 126, -121, 125, 48, 127, -119, 127, -117, -50, -127, 117, 121, 127, -122, 36, 126, -114, 111, 112, 126, 120, 66, 110, 114, 127, 127, -119, 117, 80, 127, -110, -69, 126, 118, -107, 127, 124, 127, -108, -106, -108, 127, 118, -127, -112, 124, 126, -98, 125, -112, 126, 127, 33, 113, 127, -32, 126, 127, 123, -127, 125, -108, 76, -106, 125, 127, 1, 124, -122, 127, 127, -117, 126, 124, 127, 118, 127, 96, 41, -109, 123, 119, -112, -127, -109, 122, 127, -88, -115, -109, 80, -125, 111, 127, -79, 127, 120, -108, 124, -127, 111, 45, 88, 121, 127, -15, 97, 126, 123, -109, 123, -120, 127, 127, 126, 123, 123, -122, 127, 111, 120, 113, 114, 122, 109, -127, 127, 119, 124, 125, 107, -127, 127, -122, 125, -20, 65, -127, 125, -105, 107, -127, 127, 76, -114, -116, 127, 127, 127, 115, -127, -113, -77, 119, -114, 127, 116, 112, 127, 127, 122, 126, 114, 103, 103, 127, 125, -117, 115, -111, -127, 122, 119, 127, 126, -51, 127, 127, 127, -127, 123, 127, 126, 124, 127, 127, 122, 124, -113, -115, 108, 49, -118, -127, 110, -117, 127, 126, -116, 86, 85, 127, -107, -127, 118, 127, 124, 125, 77, 108, 127, 127, -126, 120, -102, 127, 120, 119, -126, 109, 117, 125, 107, 96, 104, -107, 126, 95, 112, 122, 123, 125, 75, 88, 100, 125, 127, 121, 126, 123, 78, 127, 127, 127, -127, 114, 121, -107, 127, 127, 125, -114, 107, -114, 126, -107, 127, 112, 117, 123, -88, -126, -118, 117, 100, 127, 127, -67, 127, 120, 99, -96, 118, 126, 127, -117, 127, -122, 127, -13, 126, 127, 126, -69, 123, -124, 106, 122, -122, 127, -115, -121, -119, -112, 58, 106, -103, -102, 127, -85, 127, 109, 120, 127, 127, -127, -122, 122, -121, 127, -127, -102, 126, 120, 127, -121, -119, 126, -120, 126, 127, 127, -127, 112, -46, -111, 127, 126, -117, 126, 125, -85, 127, 125, -114, 118, 123, 124, -111, 127, 127, 126, 127, -96, 113, 127, -117, 127, 127, 89, 117, 127, -109, 123, -116, -31, -23, 108, 126, 108, 126, 126, 127, 123, 124, -40, 126, 117, 113, -86, 127, 19, 124, -127, 127, 127, 122, 48, -54, -83, -69, 54, 52, -76, 47, 31, 44, -71, -79, 55, 51, 41, 36, 60, 51, -68, -66, 54, -38, -54, 26, 51, 64, 61, 65, 51, -73, 85, 67, -64, 20, 53, -66, -77, 52, 63, -73, 84, 3, 60, 50, 56, 34, 51, 46, 53, 14, 42, 34, -61, -35, 68, 23, -35, -72, 98, 76, 40, 31, 60, 39, -51, 45, 48, -85, 46, 42, 66, 42, 45, 46, 38, 48, -80, 30, 54, -91, -89, -69, 50, 51, 32, 42, 28, 48, -55, 46, 44, -110, 19, -54, 38, -90, 58, 39, 20, 49, 37, 47, 51, 41, 52, -38, 47, -88, 49, 33, 32, 40, 22, 48, -65, 32, -88, -87, 56, 50, 57, 46, -45, 50, 44, 49, 63, 17, 51, 30, 43, 32, 46, 32, 46, 11, 39, -5, -65, -42, 67, 19, 35, -66, 57, 47, 46, 56, 40, -83, 37, -62, -9, 48, 31, -5, -30, 41, -64, 47, 1, -56, 37, 53, 47, -27, 53, 63, 42, 18, -83, 19, -48, 39, -73, 31, 43, 58, -61, 45, -62, 47, -69, -53, 44, 59, 62, 29, -21, -60, -62, 55, -93, -80, -1, -39, -87, -76, 45, -61, 33, 44, 41, 47, 41, -97, 45, 18, 43, 63, 108, -60, 59, -85, 65, 57, 33, 45, 39, 61, 40, 25, 61, 48, 41, 62, 64, 52, 57, 54, 41, 19, -4, -84, 31, 30, 48, 25, 52, -28, 42, 36, 41, 64, 72, -80, -65, 50, 39, -58, 48, -58, 51, 8, 31, -71, 37, 61, 49, 24, 69, 45, 16, 50, 39, 48, -53, 30, 55, 47, -43, -21, 49, -59, 15, 44, 51, 45, 52, 44, 68, 47, 39, -66, -64, -43, 55, 31, 58, 24, 47, -47, 30, 62, 40, 73, -46, 47, 127, 43, -72, 46, -59, 10, -49, 61, 44, 50, -68, 0, 41, -74, 59, 34, 40, 49, 20, 59, 65, 52, 36, -64, 55, 41, 40, -53, 9, 46, 61, -94, 45, 48, 57, -60, -69, -75, 56, 44, -65, -77, 44, 47, -81, 51, -46, 49, 43, 108, 61, 46, 20, 51, 28, 37, -57, 44, -84, 49, -63, 56, 51, 0, 49, -88, 37, 50, -15, 55, 45, 42, 49, 49, 38, 123, -54, 52, 77, -66, -43, -113, 45, 37, -96, -65, -99, 31, -73, 36, 34, -27, 51, 48, -49, 50, -67, 56, 33, 32, 54, 47, -18, 34, 51, 52, -93, 49, -68, 56, 44, 36, 54, 53, -73, 49, 52, 63, 56, 46, 59, 56, -39, 32, 43, 47, 36, 15, -20, 30, -70, 42, -38, 36, -60, 51, -69, 33, -86, 36, 33, -49, -77, 48, 45, 45, 47, -70, -87, -22, 63, -79, 50, 38, 49, 28, 41, 52, 51, 35, 57, 37, 52, 47, -63, 59, -95, -78, 51, 61, 47, 51, 19, 41, 38, 39, -65, 48, 37, 25, 49, 41, 57, 52, 36, -71, -102, 43, 79, -72, -40, 65, -82, 52, 40, -69, 31, 39, 56, -78, 9, 24, 58, 64, 67, 12, 44, 29, 31, -50, 62, -69, 50, 52, 50, -58, 59, 58, 28, 47, 52, 39, -72, 64, 25, 65, 59, 55, 40, 40, 11, 42, 33, 46, 43, 44, 39, 24, 51, 47, 48, -29, 71, 42, -86, 42, 53, 62, -81, 61, -57, 36, -38, 36, 34, 54, 47, -83, -67, -60, 54, 23, 50, 42, -14, 46, 54, 25, -76, 50, 34, 43, -57, 43, -64, 47, -4, 41, 56, 50, -6, 54, -65, 31, 63, -80, 42, -57, -89, -53, -49, 18, 34, -90, 42, 50, -90, 49, 38, 52, 41, 48, -68, -61, 48, -75, 48, 42, -58, 48, 42, 36, -92, -123, 43, -85, 32, 46, 33, -73, 44, -98, -63, 43, 42, -80, 39, 38, -115, 50, 29, -43, 28, 38, 44, -82, 47, 43, 39, 46, -71, 43, 43, -55, 56, 41, 43, 31, 38, -51, 58, -77, -51, -27, 57, 44, 25, 36, 50, 46, 59, 49, -63, 34, 61, 53, -74, 43, 19, 56, -55, 39, 50, 51, -13, 3, -20, -10, -6, 10, -19, -5, -11, -8, -18, -32, -3, -8, -17, -13, 7, 17, -18, -17, -11, -10, -12, -12, -3, 43, 4, 10, 12, -37, 65, 11, -18, -15, 6, -3, -38, -1, 2, -14, 50, 2, -1, 1, 5, -13, 3, -11, 0, 23, -8, -9, -4, 1, 22, -18, 13, -32, 60, 20, -7, -18, 5, -11, -9, 0, -5, -25, -6, -12, 8, -8, -5, -3, -7, -8, -19, -15, 12, -23, -23, -14, -3, 6, -16, -3, -17, -4, 2, -9, 1, -36, -2, -7, -9, -30, 12, -16, -10, 2, -9, -9, 5, -5, 4, 0, 11, -11, -16, -16, -10, -14, -14, 4, -28, -12, -13, -32, -1, 3, -4, -9, -7, -8, -14, -3, 21, 0, -3, -4, -7, -19, 6, -13, -8, -30, -13, 12, -68, 14, 47, -13, -2, -7, 10, -2, 16, 6, -13, -14, -12, -11, 0, -6, -17, -17, 20, -18, -5, -1, -39, -4, -8, -9, -11, 19, -6, 2, -7, -9, -28, -11, 2, -5, -24, -17, -10, 12, -16, 10, -5, -5, -14, 6, -5, 5, 0, -15, 14, -29, -6, -1, -38, -30, 28, 15, -11, -23, -6, -3, -3, -7, -4, -2, -5, -48, -4, -24, -5, 1, 62, -10, -7, -42, 19, 13, -15, -19, -4, 5, -5, -11, 8, 8, -9, 12, 17, -6, 8, -5, 2, -23, 33, -27, -15, -28, -4, 38, -1, -38, -9, -9, -8, 9, 19, -27, -21, -7, -9, -3, -7, -2, 10, 52, -13, -6, -8, 8, -4, -9, 0, 0, 15, -1, -8, -1, -14, 2, 8, 11, 20, 27, -10, -7, 37, -13, -1, -25, 2, -6, 43, 19, -23, -16, -10, 4, -4, 7, 7, -3, -4, -18, -13, 7, -17, 8, 0, -4, 80, -7, -2, -9, -13, 31, -1, 14, -7, -6, -15, -9, -16, -16, 17, -10, -7, 12, -2, 17, 10, -9, -14, -10, 23, 5, -14, -14, 31, -12, 21, -39, -8, -2, 7, -15, -6, -11, -7, -6, -3, -20, -3, -10, -34, 1, -3, 0, -5, 81, 18, -6, 33, -1, -11, 3, 0, -4, -32, 62, -21, 5, 1, 3, 1, -19, -11, -7, 22, -11, 4, -4, -18, -6, 0, 80, -15, 4, 35, -17, 0, -46, 0, -7, -35, -11, -18, -12, -6, -17, -14, 4, -1, -4, -4, 5, -8, 7, 9, -6, 3, -8, -5, -3, -1, 9, -29, 1, -6, 2, -7, -12, 7, -2, -17, 7, 16, 9, 13, -3, 16, 10, 20, -21, -7, -14, -15, -21, 38, -26, -11, -20, -28, 16, 5, -6, -22, -10, -13, -13, -2, -9, -13, -14, -7, 0, -3, -7, -26, 10, 13, -23, -9, -13, 9, -20, -5, 1, -2, -7, 13, 0, -1, 1, -1, 22, -26, -12, 9, 5, 3, -17, 45, -7, -8, -15, -15, -5, -25, -14, 5, -11, -10, 7, -14, -39, -26, -11, 46, -17, -4, 12, -25, 1, -7, -13, -7, 1, 6, -11, 63, -28, 0, 10, 6, 2, 5, -16, -14, -3, 8, -22, 0, 9, 0, -7, 21, 10, -19, 3, 5, -9, -26, 4, -9, 20, -1, 13, -10, 10, -19, 0, -17, -4, 7, -10, -12, 34, -4, -9, 1, 21, 30, -7, -34, -18, -5, 10, -21, 16, 1, -11, 5, -19, -10, 10, -4, -35, -8, -7, 0, -17, 0, -13, 5, 2, -2, -7, -57, -14, -14, -9, -12, -3, -23, -3, -27, -9, -24, -7, 20, 1, -11, -12, 14, -23, 1, -15, -26, 8, -3, 4, -10, -38, 53, -11, -58, -9, -10, -5, -8, -11, -12, -10, -3, -18, -3, 41, -31, -8, 9, -17, -15, -77, -10, -19, -19, -18, -5, -6, -1, -63, -10, -8, -6, -24, -5, -12, -48, -1, -17, 5, -12, -6, -5, -25, -12, -8, -12, -5, -42, -17, -21, -10, 13, -12, 5, -11, -15, -10, 15, -11, -16, -31, 8, -9, -14, -6, 0, -9, 5, -6, -64, -22, 17, 4, -35, -6, 0, -3, 2, -8, 0, 8, 48, -28, -43, -39, 36, 0, -30, 11, 5, 48, -44, -52, 11, 15, 5, 8, 55, -23, -21, -27, 36, -9, -17, -8, 5, 50, 27, 19, 24, -62, -40, 29, -46, -6, 27, -21, -44, 5, 21, -49, -28, -26, 25, 7, 17, 12, -3, 15, 20, 45, 10, 5, -40, 5, 11, 6, -6, -22, -48, 37, 11, 4, 13, 5, -20, 9, 24, -51, 12, 4, 19, 4, 11, 8, 0, 12, -27, 6, 7, -28, -16, -33, 28, 20, -15, 12, -2, 11, -22, 17, 16, -48, 44, -20, 12, -10, 22, 5, -12, 17, 7, 10, 8, 6, 18, -12, 44, -39, 10, 5, 15, 19, -7, 21, -18, -4, -45, -30, 18, 32, 31, 0, -20, 11, 34, 24, 16, 45, 20, -6, 10, 0, 18, 4, 12, 37, 4, -38, -65, -3, 48, -4, -2, -14, 35, 10, 43, 26, 14, -56, 49, -31, -94, 12, 19, -49, -7, 16, -17, 11, 21, -22, -1, 31, 14, 5, 11, 35, 4, -14, -46, -14, -32, 20, -32, 5, 13, 10, -30, 18, -24, 21, -11, 3, 11, 21, 32, -11, -42, -54, -14, 13, -68, -48, 36, -22, -25, -44, 13, -26, -7, 42, 16, 17, 21, -53, 11, -9, 11, 8, 38, -18, 13, -31, 30, 40, 3, -1, 49, 17, 10, -11, 22, 18, 6, 23, 11, 8, 25, 2, 14, 42, 24, -41, 12, -9, 8, 46, 15, 15, 39, -1, 9, 50, 33, -32, -21, 22, 10, -3, 9, -16, 12, 19, -1, -40, 7, 29, 29, -17, 36, 9, -27, 18, 22, 7, -19, -6, 15, -9, -24, 7, 6, -23, 45, 5, 17, 0, 29, 10, 24, 20, -3, -31, -31, -20, -4, -21, 21, 16, 18, -19, 7, 34, 33, 27, -7, 5, -56, 13, -10, 16, -18, 38, -20, 32, -3, 11, -31, -29, 4, -50, 38, 5, 7, 23, -2, 30, 25, 35, 11, -39, 28, 2, 8, -1, 46, 26, 39, -45, 12, 10, 27, -24, -53, -22, 40, 1, -28, -49, 27, 15, -27, 1, -23, 12, -1, -55, 26, 26, 45, 1, -17, 8, -42, 8, -32, -6, -19, 20, 13, 41, 4, -21, 8, 17, 25, -4, 6, 3, 18, 23, 44, -68, -13, 15, 60, -26, -18, -53, 12, 11, -38, -35, -29, -12, -6, 4, 16, -40, 29, 1, -18, 19, -29, 11, 57, -1, 14, 59, -47, -12, 17, 24, -52, 32, -20, 20, 12, 6, 33, 16, -25, 4, 19, 28, 19, 1, 17, 22, 1, 11, 6, 2, 13, 41, -2, -5, -44, 8, -90, 4, -35, -6, -42, 7, -30, 2, -4, -20, -29, 24, 8, 10, 9, -35, -49, 48, 32, -46, 13, -1, 29, 7, 9, 13, 22, 7, 43, 11, 23, 8, -42, 29, -55, -29, 2, 12, 26, 2, 55, 17, 1, 19, -37, 17, 11, 9, 11, 6, 30, 29, 9, -47, -40, 2, -48, -27, -11, 24, -36, 22, 21, -36, 0, -1, 22, -25, 31, 5, 12, 22, 24, -17, 11, 2, 37, -5, 12, -37, 13, 25, 4, -19, 25, 16, -3, 9, 39, 12, -21, 29, -3, 20, 26, 21, 7, 3, -7, 9, -3, 44, 12, 9, 9, -28, 13, -3, 1, -8, 11, 22, -31, 25, 21, 20, -40, 16, -9, 4, 11, 7, 1, 15, 13, -65, -25, -27, 23, -23, 47, 11, -28, 21, 11, -3, 52, -4, 28, 40, -34, 23, -15, 16, -56, 15, 10, 5, 24, 22, -35, 0, 26, 32, 22, -15, -48, -13, -15, 47, 49, -33, 64, 8, -85, 13, 1, 12, 6, 31, -33, -25, 16, -32, 8, 30, -3, 20, -15, -1, -42, 44, 13, -49, -1, -11, 8, -3, 14, 58, -19, 17, 4, -39, 10, 2, -37, 12, 2, 2, -4, 6, 1, -74, 7, 8, 25, 41, -32, -1, 15, -23, 15, 19, 5, -2, 8, -17, 20, -23, 48, -48, 19, 23, 47, 55, 43, 37, 12, 16, 33, -2, 12, 10, -45, 6, -26, 18, -26, -6, 11, 2, 107, -63, -81, -87, 86, 49, -82, 47, 26, 109, -69, -125, 35, 75, 37, 36, 104, 42, -70, -68, 71, -37, -55, -9, 24, 35, 59, 59, 67, -121, -19, 60, -86, 2, 56, -70, -110, 56, 61, -115, -84, -56, 52, 67, 60, 46, 50, 48, 63, 90, 41, 24, -97, -34, 67, 55, -27, -58, -35, 103, 39, 38, 53, 58, -70, 58, 44, -101, 54, 41, 72, 38, 38, 52, 41, 51, -52, 32, 25, -90, -89, -74, 62, 53, 15, 45, 16, 56, -62, 47, 41, -93, 125, -63, 47, -40, 55, 18, -9, 48, 38, 39, 39, 41, 47, -50, 123, -90, 44, 35, 49, 40, 1, 54, -57, 2, -91, -85, 46, 84, 79, 31, -20, 46, 90, 40, 61, 121, 60, 2, 44, 14, 49, 22, 52, 126, 31, -121, -93, -39, 50, -2, 36, -72, 78, 60, 99, 75, 51, -84, 122, -88, -55, 50, 100, -62, -27, 50, -73, 38, 54, -78, 40, 70, 55, -17, 57, 74, 31, -17, -104, 7, -80, 54, -65, 34, 32, 60, -83, 38, -86, 53, -76, -41, 41, 48, 55, 27, -127, -102, -81, 67, -89, -89, 44, -53, -91, -93, 46, -58, -23, 113, 63, 34, 62, -95, 40, 22, 29, 18, 54, -67, 24, -62, 80, 35, 47, 48, 124, 49, 52, 30, 58, 62, 36, 71, 45, 39, 68, 45, 37, 121, 21, -57, 47, 20, 44, 79, 58, -37, 117, 35, 43, 102, 58, -90, -59, 60, 29, -54, 47, -65, 46, 19, 25, -105, 36, 59, 67, -34, 96, 30, -71, 44, 72, 39, -67, -30, 46, 6, -58, -31, 43, -56, 99, 36, 42, 48, 59, 32, 39, 56, 29, -71, -83, -72, 54, 39, 48, 42, 72, -58, 36, 105, 67, 58, -53, 41, -30, 45, -77, 53, -68, 79, -75, 66, 37, 43, -77, -55, 35, -114, 46, 27, 37, 51, -14, 53, 37, 86, 47, -72, 66, -7, 36, -62, 52, 69, 73, -87, 57, 46, 75, -59, -83, -74, 79, 33, -79, -99, 50, 43, -84, 57, -62, 48, 31, -67, 10, 58, 112, 44, 25, 49, -70, 49, -85, -36, -59, 57, 54, 66, 45, -91, 38, 50, -5, 53, 50, 50, 46, 53, 127, -47, -57, 49, 93, -77, -61, -109, 52, 36, -104, -60, -83, -12, -64, 29, 35, -99, 86, 37, -48, 55, -54, 42, 126, 0, 72, 102, -104, 27, 53, 62, -104, 68, -65, 55, 60, 37, 80, 57, -70, 49, 60, 79, 65, 43, 60, 66, -42, 52, 33, 36, 33, 116, -18, 42, -94, 27, -74, 0, -93, 40, -79, 29, -87, 34, -24, -71, -67, 69, 51, 51, 44, -70, -117, 40, 66, -86, 51, 28, 60, 33, 44, 48, 49, 38, 117, 33, 73, 40, -77, 59, -114, -92, 58, 35, 95, 50, 102, 46, 40, 41, -91, 52, 40, 25, 44, 37, 61, 66, 32, -89, -115, 28, -42, -85, -51, 57, -91, 58, 51, -75, -9, -12, 68, -91, -4, 10, 59, 42, 64, -10, 15, 25, 69, -60, 57, -65, 60, 64, 40, -78, 62, 55, 24, 42, 122, 21, -70, 71, 8, 62, 65, 59, 37, 8, 1, 2, 27, 116, 49, 39, 36, 49, 55, 40, 39, -32, 51, 46, -101, 85, 57, 54, -96, 46, -74, 34, -5, 46, 14, 54, 47, -98, -80, -66, 42, 33, 108, 51, -65, 52, 61, 13, 66, 37, 68, 113, -90, 54, -58, 51, -53, 50, 59, 31, 30, 47, -90, 9, 62, 36, 46, -53, -101, -70, -48, 121, 122, -94, 72, 50, -119, 51, 21, 24, 36, 74, -93, -69, 41, -83, 55, 37, -40, 70, 48, 38, -83, 46, 65, -93, 21, 55, 37, -71, 41, 55, -67, 60, 56, -87, 46, 48, -92, 39, 33, -45, 28, 56, 46, -103, 37, 39, 78, 102, -4, 34, 36, -56, 47, 36, 1, 17, 37, -57, 62, -76, 53, -87, 52, 70, 123, 120, 89, 98, 52, 47, 18, 29, 63, 47, -66, 37, -70, 52, -89, 35, 50, 46, 109, -70, -77, -83, 95, 56, -88, 51, 29, 105, -58, -92, 44, 83, 37, 38, 103, 36, -65, -62, 70, -40, -58, -7, 25, 21, 56, 71, 56, -114, 73, 52, -79, 1, 57, -72, -97, 60, 60, -95, 17, -60, 54, 66, 60, 45, 57, 50, 59, 81, 41, 24, -82, -30, 75, 58, -38, -60, 39, 100, 38, 41, 58, 68, -69, 65, 43, -108, 51, 48, 72, 38, 43, 50, 48, 57, -53, 35, 15, -114, -89, -59, 59, 55, 18, 44, 20, 66, -65, 48, 45, -77, 127, -60, 48, -49, 56, 21, 1, 48, 47, 41, 39, 43, 45, -58, 127, -81, 42, 34, 51, 37, 3, 56, -38, 2, -92, -92, 43, 83, 81, 34, -19, 50, 93, 44, 68, 127, 60, 2, 53, 19, 50, 30, 55, 127, 33, -127, -106, -45, 60, -7, 36, -76, 69, 67, 100, 74, 56, -74, 127, -80, -45, 53, 106, -57, -26, 53, -68, 44, 55, -73, 47, 73, 64, -22, 69, 74, 30, -9, -99, 1, -80, 53, -67, 31, 33, 60, -76, 38, -74, 56, -74, -43, 45, 54, 54, 35, -125, -71, -87, 74, -76, -84, 45, -48, -94, -71, 48, -58, -21, 108, 66, 31, 62, -88, 47, 25, 34, 30, 78, -63, 20, -58, 77, 22, 51, 61, 127, 52, 58, 39, 64, 56, 44, 65, 45, 42, 67, 47, 37, 127, 14, -46, 49, 23, 51, 76, 62, -22, 122, 36, 48, 96, 52, -83, -56, 59, 30, -57, 52, -58, 50, 11, 26, -98, 39, 53, 69, -25, 106, 28, -73, 50, 75, 46, -59, -38, 47, 9, -63, -36, 49, -59, 94, 38, 52, 53, 66, 32, 54, 66, 40, -76, -68, -73, 60, 45, 49, 41, 71, -51, 35, 110, 69, 62, -57, 44, 30, 43, -87, 55, -63, 71, -87, 59, 41, 48, -74, -60, 44, -104, 45, 30, 43, 43, -18, 46, 38, 90, 50, -69, 66, -11, 40, -61, 43, 76, 73, -81, 62, 51, 80, -64, -82, -69, 81, 32, -79, -94, 55, 46, -76, 60, -64, 51, 39, 6, 19, 58, 109, 55, 35, 51, -73, 54, -94, 22, -51, 58, 55, 61, 52, -88, 42, 54, -8, 62, 50, 50, 39, 53, 126, 43, -56, 55, 79, -73, -56, -102, 52, 42, -101, -55, -92, -3, -69, 34, 38, -98, 94, 40, -36, 57, -50, 43, 127, -4, 72, 97, -106, 23, 53, 70, -98, 73, -61, 56, 62, 45, 78, 59, -71, 54, 62, 76, 62, 50, 59, 59, -39, 52, 41, 40, 34, 127, -23, 51, -83, 32, -38, -6, -95, 48, -74, 30, -89, 34, -29, -70, -71, 68, 55, 53, 45, -65, -89, 29, 66, -85, 53, 29, 58, 33, 44, 50, 51, 38, 127, 36, 74, 43, -69, 64, -99, -93, 59, 39, 97, 56, 88, 51, 45, 44, -84, 47, 44, 27, 46, 43, 56, 76, 31, -86, -98, 27, 19, -91, -52, 55, -81, 62, 45, -71, -16, -12, 74, -95, -32, 12, 62, 39, 55, -9, 12, 27, 63, -63, 57, -69, 67, 53, 49, -76, 59, 57, 27, 39, 127, 27, -67, 72, 13, 72, 60, 57, 39, 1, -1, 0, 33, 120, 47, 45, 39, 48, 57, 45, 49, -31, 65, 45, -109, 94, 60, 59, -88, 46, -88, 34, -10, 51, 16, 57, 44, -79, -69, -54, 43, 34, 110, 54, -64, 48, 63, 17, -11, 37, 68, 116, -83, 58, -61, 62, 14, 51, 69, 34, 33, 47, -89, 17, 52, -67, 46, -49, -92, -65, -52, 122, 127, -86, 55, 51, -105, 57, 19, 22, 42, 73, -95, -73, 44, -60, 58, 34, -52, 82, 47, 47, -78, -67, 73, -84, 26, 65, 40, -84, 45, -36, -67, 60, 63, -84, 46, 49, -94, 47, 37, -51, 29, 57, 54, -76, 43, 37, 84, 101, -2, 37, 43, -59, 35, 34, -2, 20, 40, -53, 59, -70, 6, -41, 45, 69, 127, 118, 88, 100, 59, 47, -35, 40, 69, 38, -54, 45, -74, 53, -80, 44, 59, 53, 48, -29, -42, -47, 37, 5, -32, 13, 5, 47, -46, -53, 20, 23, 4, 9, 37, 0, -28, -28, 36, -6, -20, -6, 8, 34, 36, 20, 10, -50, 22, 25, -36, -5, 28, -26, -52, 6, 20, -43, 21, -28, 27, 14, 22, 9, 8, 18, 21, 36, 11, 6, -44, -1, 10, 5, -13, -29, 19, 38, 13, 7, 18, 11, -22, 15, 15, -47, 14, 6, 21, 8, 12, 10, 3, 17, -22, 8, 2, -37, -26, -26, 21, 19, -17, 8, -2, 11, -23, 15, 12, -51, 46, -20, 6, -19, 24, 3, -8, 15, 9, 14, 14, 4, 15, -19, 46, -37, 12, 6, 10, 18, -5, 21, -13, -4, -46, -42, 15, 38, 33, -4, -16, 11, 42, 21, 19, 36, 18, -3, 13, 7, 19, 6, 13, 42, 7, -40, 53, -5, 26, -2, 3, -23, 29, 12, 43, 26, 13, -32, 52, -25, -65, 13, 27, -43, 0, 18, -22, 14, 23, -21, 6, 30, 17, 4, 20, 38, 1, -10, -41, -15, -30, 21, -29, 8, 11, 18, -29, 25, -17, 16, -15, -10, 14, 33, 27, -6, -48, -40, -18, 18, -63, -53, 36, -22, -31, -35, 16, -22, -7, 39, 19, 11, 20, -48, 10, -5, 7, 16, 48, -15, 12, -37, 31, 29, 3, 17, 53, 21, 9, -10, 26, 20, 7, 17, 16, 5, 22, 2, 6, 41, 19, -34, 11, -2, 5, 46, 20, 21, 44, 3, 9, 48, 28, -23, -18, 20, 11, -8, 10, -18, 14, 14, 0, -42, 5, 25, 33, -15, 33, 9, -26, 19, 21, 6, -16, -11, 21, -4, -18, 4, 7, -29, 44, 6, 23, 6, 29, 9, 21, 31, 4, -35, -19, -23, 3, -13, 24, 23, 13, -16, 8, 46, 39, 34, -13, 6, 59, 7, -14, 19, -18, 41, -16, 35, 1, 13, -28, -30, 12, -53, 30, 11, 10, 18, -7, 22, 24, 36, 12, -47, 29, 0, 10, -8, 35, 22, 48, -56, 22, 11, 23, -34, -26, -30, 41, 3, -22, -56, 22, 17, -32, 11, -22, 8, 4, 57, 23, 22, 50, 7, -1, 13, -49, 9, -36, 27, -20, 16, 11, 36, 11, -20, 7, 21, 22, -2, 13, 1, 13, 19, 47, 60, -13, 19, 48, -28, -16, -48, 10, 12, -43, -36, -39, -6, -12, 7, 14, -30, 31, 3, -19, 23, -27, 12, 54, -2, 14, 52, -52, -13, 19, 30, -39, 31, -22, 23, 17, 8, 30, 15, -32, 10, 25, 27, 25, 5, 19, 18, -5, 11, 11, 6, 7, 43, -3, -2, -48, 9, -72, 0, -36, 1, -36, 9, -29, -1, -5, -18, -19, 20, 14, 11, 6, -34, -50, 39, 23, -44, 14, -1, 26, 1, 10, 8, 20, 8, 49, 15, 24, 7, -33, 35, -51, -28, 5, 20, 29, 3, 51, 19, 5, 19, -33, 16, 12, 6, 19, 11, 30, 21, 6, -46, -41, 5, 51, -31, -13, 25, -32, 23, 21, -34, -3, -1, 30, -35, 14, 8, 24, 22, 24, -6, 8, 2, 26, -10, 14, -36, 12, 27, 11, -16, 25, 16, 0, 12, 39, 14, -23, 30, -9, 19, 25, 22, 9, 1, -9, 6, -3, 46, 10, 9, 10, -17, 15, 4, 10, -4, 10, 18, -36, 32, 23, 22, -38, 13, -18, 2, 5, 12, 1, 15, 16, -63, -28, -29, 20, -12, 43, 9, -28, 21, 13, -4, -49, -2, 30, 41, -32, 23, -8, 19, -36, 11, 19, 4, 26, 24, -29, 0, 19, -26, 22, -11, -54, -19, -17, 53, 48, -45, 59, 14, -85, 13, 4, 13, 9, 30, -40, -26, 15, -29, 11, 25, -14, 25, 5, 7, -38, -35, 21, -47, 0, 3, 11, -5, 10, -50, -24, 22, 8, -44, 15, 1, -50, 14, 4, -1, -4, 10, 6, -63, 18, 7, 30, 39, -14, -3, 12, -17, 11, 21, 1, 1, 8, -19, 22, -23, -33, -44, 17, 26, 48, 52, 43, 37, 18, 17, -11, 0, 23, 8, -37, 8, -29, 19, -25, -7, 12, 9, 1, 8, -12, -5, -9, -10, 4, -17, -5, -4, -19, -15, -5, -30, -12, -9, 12, -16, -1, -7, 4, -7, -5, 2, -8, 36, -5, -9, -8, 5, 9, 2, -13, 2, 8, -4, -17, -12, -7, -5, 22, 1, 1, -8, -6, -5, -17, -9, -3, 6, -2, -3, -2, 4, -17, -16, 4, -5, -1, -12, -6, -9, -5, -15, 5, -20, 5, -11, -2, -14, -4, -6, -8, -5, -11, -7, -5, -6, 11, 9, 9, -10, 0, -6, -8, -2, -9, -16, 8, -11, -2, -15, -6, 5, -2, 6, -3, -3, 2, -4, -12, -5, 4, -8, -4, 11, -2, -8, 0, -4, 0, 3, -2, 4, -5, -3, -18, -10, 0, -1, -4, -1, 1, -9, -8, -1, -20, 1, 1, 3, -7, -2, -10, -7, -7, -5, 0, 13, 61, -1, 25, 2, -6, 7, 0, -17, 1, 2, -14, -32, -4, -4, -31, -14, -11, -18, -4, -5, 0, -9, -23, 4, -9, -15, -12, 7, -10, 3, -7, -4, -8, -2, 0, -3, -10, -9, -1, -1, -11, 9, -7, -11, -2, 0, -6, 3, -5, -18, 2, -12, 5, -16, -28, -13, 17, -2, 7, -11, -6, 2, -4, -10, -10, 9, -11, -15, -6, -13, -8, -5, -5, 2, 7, 8, 3, 27, -6, -26, -5, -4, -7, -14, -7, 0, -7, 2, -9, -2, 2, -14, 2, -14, 17, -13, -11, -13, -8, 7, -6, 11, -13, -3, -6, 11, 6, -6, -6, -2, -6, 11, -13, 0, -6, 5, -8, 3, -3, 3, -6, -7, -10, 2, 1, -4, -1, -12, 0, 12, -3, -11, 5, 12, -7, 5, 2, -3, -7, -19, 4, -2, -14, -5, -14, 2, -22, 4, -26, -16, 2, 5, -6, 0, -4, -6, 11, -6, 9, -9, 35, 3, 18, -9, 3, 12, 7, 11, -8, -2, 1, 8, -12, -15, 13, -5, 1, 14, 9, 8, 5, -12, -6, -11, -26, 14, -6, 8, 11, -1, 9, -15, -13, -9, -22, 7, -19, 4, -9, -5, 0, -16, -4, 0, -3, -14, 2, -4, -5, 42, 15, -4, 4, -14, -15, -3, -19, -16, 5, 21, -5, -3, 0, 12, -14, -1, -5, -4, 20, -15, -17, -10, 1, 3, -8, 27, 21, -3, 32, -7, -2, 1, -8, -9, 6, -1, 1, -5, 8, -5, -1, 2, -17, -6, -6, -5, -1, 3, 3, 12, -21, 4, -2, -5, -5, -17, -11, 1, 10, -6, -2, -16, -3, -4, -9, -6, 0, 2, 1, -14, -1, 1, 10, -8, -3, -9, 5, -7, 7, -17, -11, -5, -43, 7, -1, -15, -14, 1, 1, -4, 11, 3, 7, -14, -3, -7, -6, -6, -8, 15, -3, -8, -8, -5, -2, -7, -9, -1, -1, -1, -17, -7, -11, -10, -5, -2, -17, 4, -9, 0, -4, -16, 13, -5, -8, -2, 2, 0, -10, -5, -6, -8, 4, -5, -5, -12, -8, -5, 22, 3, 6, 1, -7, -7, 2, -7, 12, 4, 2, 2, 20, -2, -3, 4, 1, 9, 9, -8, 3, 11, -6, -10, -11, 4, -18, 1, 2, -3, -6, 2, -9, 0, 0, 5, 2, -19, 4, 1, -8, 2, 0, 4, -7, -2, 4, -3, 0, 18, -17, -15, -15, 5, -16, -1, 2, -21, 3, 2, -8, -4, 20, -7, 12, -7, 1, -3, -4, -17, -5, -7, -1, -20, -1, -11, -4, 4, -18, -1, -27, -12, -17, -8, -5, -4, 12, -11, -46, -4, -33, -6, 5, 0, 4, -12, -1, -8, 2, -7, -13, 0, -3, -7, -1, -6, 21, -20, -42, -16, -2, 6, -7, -3, 3, 1, -5, -10, -11, 7, -3, -12, -9, -17, -2, -44, -4, -4, -8, -13, -9, 11, 2, -34, 2, -5, -10, -7, 0, -19, -1, -5, -8, 6, -6, -15, -13, -24, -4, -3, -5, -9, -16, -12, -10, 8, -2, 0, 6, 1, -3, 3, -1, -3, -22, -56, 5, -5, -11, 13, -1, -3, -9, -1, -17, -10, -6, -5, -16, -7, -1, -2, 5, -11, -3, -7, 25, -9, -13, -14, 10, -22, 2, -18, -11, 18, -2, -16, -18, -13, -8, -12, 2, -8, -1, -10, 9, 0, -7, -13, -20, 7, -6, -1, 4, -27, -33, 5, -14, -9, 8, -10, -11, -12, -1, -17, -13, -20, -5, -6, -3, -7, -16, -4, 7, 27, 0, -5, -19, 3, -8, 3, 8, -3, -34, 0, -5, -8, -11, -7, -9, -1, -3, -4, -14, -8, -13, -15, -4, -7, -10, 0, 11, -11, -11, 1, 0, -12, -7, -1, -18, 1, -17, -11, -3, -12, -6, -5, 22, 4, -4, 1, -4, -9, -5, 4, -7, -8, -5, -7, 1, 12, 17, -15, -11, 0, 0, -1, -7, 1, -9, -10, -27, -12, -3, 9, 1, -7, -3, -11, 9, -5, -2, 32, 4, -11, -12, -6, -14, -11, -5, 34, -8, -20, -62, 9, 59, -7, -17, 3, 6, -7, 16, 7, -8, -23, 32, 1, -106, -8, 5, -20, 10, 0, -3, -8, 32, -5, -11, 0, -9, 14, 1, -1, -11, -18, -19, -13, -10, -2, -11, -11, -9, -16, -4, 9, -12, -7, -4, 2, -16, -8, -6, -14, -40, -30, -3, -7, -41, -12, 31, -2, -8, -19, -5, -11, -17, 12, -6, -12, 3, -6, -10, -7, -7, -15, 21, -1, -20, 3, 7, 4, -7, -26, 22, -4, 5, -8, -2, -1, -4, -4, -16, -7, 4, -13, -4, 37, 19, -8, -2, -15, -15, 23, -1, 5, 18, -4, -10, 6, -2, -13, -7, 3, -8, 3, -3, -2, -6, 10, -10, -17, -8, 3, 3, -21, 6, -6, -21, -6, 1, -7, -1, -17, -4, -18, -2, 25, -6, 1, 29, -9, -12, -23, -1, -6, -5, -7, -13, -5, -13, 2, -31, -12, -5, -3, -16, -2, -8, 9, 27, 0, -5, -18, -19, -6, 2, 3, 4, 23, -3, 15, -15, -7, -4, -14, -8, -20, 6, -7, -2, 4, -13, 0, -17, 5, -3, -24, 9, -15, -8, 7, 28, 17, 3, -20, -5, -7, -4, -2, -10, 6, 6, -8, 1, -18, 2, -6, -9, -37, 0, -11, -17, -6, -11, 3, 34, -16, -20, -8, -21, -12, 7, 15, -2, -12, -16, 16, -8, 4, -7, -11, 11, -19, 5, -17, -1, 2, 23, -16, 15, -5, 31, -11, -13, 1, -13, -8, -3, -7, -6, -18, 3, -2, -9, -23, 1, -5, -3, -11, 0, 0, 45, -8, -15, 22, -21, -11, 0, -9, -12, 10, 7, 1, 0, -12, 6, 7, 0, -3, 2, 5, 5, -16, -10, -1, 14, 5, -6, -16, -3, 47, 16, -14, -10, -3, -88, -8, -21, -5, -9, 3, 8, -11, -10, -16, -19, 7, -6, -7, -5, -9, -28, 35, 0, -9, -4, -13, -3, -6, -3, -3, -3, -5, 3, -5, 2, -10, -2, -7, -11, 2, -19, -24, 2, -14, 36, -6, -3, 4, -6, 2, -10, -9, -1, -9, 8, -3, -7, -16, -11, -13, -36, -7, 5, -4, -5, -4, -5, -10, -13, -15, -1, -1, 14, -14, -19, -1, -7, -11, -7, -15, 17, 8, -3, -4, -5, -3, -34, 0, -6, -1, -10, 2, 10, -1, 2, 3, -13, -10, 3, 5, 0, -10, -1, -16, -9, 19, 3, 2, -6, -12, -28, -12, -22, 8, -31, 3, 12, -8, 4, -3, -1, -9, 10, -11, 18, -5, -5, -7, -2, -44, -4, -6, -1, -13, 14, -20, -16, 3, -18, -5, 23, -24, 7, 11, -10, -6, 8, -5, -91, -7, -36, -12, 22, 1, -2, -7, 3, 22, 1, 0, -16, -13, -8, 36, 21, -16, 27, -32, -42, -4, -9, -16, -10, 1, -2, 2, -6, -22, -13, 14, -11, -9, 0, -6, -7, 24, -7, -10, -5, -26, -6, 1, -6, 29, -1, -1, -14, -2, -12, -5, 10, -3, -6, -1, -10, -6, -23, -25, -13, -7, 3, 9, -44, -44, -8, -2, -4, -2, -14, -14, -9, -2, 2, 9, -1, -65, 0, -4, 22, 31, 13, 10, -7, -8, 23, -11, -7, -14, -21, -18, -28, -6, 0, -9, -15, -8, 40, -7, -29, -25, 16, -8, -18, -2, -22, 35, -13, -50, -21, 6, -16, -17, 73, 28, -29, -22, 6, -15, -17, -32, -20, -13, 10, 21, 18, -44, -32, 13, -34, -26, 12, -19, -52, -7, 8, -42, -42, -30, 4, 1, 10, -4, 4, -4, 4, 71, -7, -12, -42, 0, 10, -12, 20, -22, -29, 31, -16, -18, -3, 12, -19, 10, -9, -49, -3, -16, -4, -19, -7, 3, -11, -4, 8, -16, -21, -70, -15, -36, 7, -1, -17, -7, -28, -2, -6, -12, -3, -30, 108, -8, 2, 9, 1, -21, -25, -7, -4, -13, -9, -5, 1, -7, 63, -26, -20, -19, -5, -10, -21, 4, -10, -27, -49, -34, 0, 20, 10, -17, 13, -9, 21, -11, 24, 75, 5, -17, -7, -22, -4, -18, -6, 84, -15, -89, -50, 5, 60, -16, -10, -22, 22, 1, 33, 17, -9, -44, 66, -21, -78, -9, 32, -46, 25, 0, -16, -9, 41, -14, -10, 6, -10, 33, 15, 11, -17, -38, -39, -24, -32, -2, -34, -21, -10, 2, -31, 3, -30, 1, -20, -2, -14, 0, -3, -13, -68, -85, -14, 7, -49, -38, 49, -2, -41, -34, -4, -14, -40, 39, -5, -16, 0, -34, -9, -25, -16, -32, 24, -21, -42, -9, 31, -12, -14, -22, 60, -10, 10, -20, 1, 8, -9, 17, -6, -22, 17, -20, -9, 79, 61, -11, -9, -32, -19, 69, -4, -54, 45, -12, -7, 27, 7, -25, -31, -5, -16, 0, -6, -18, 2, 55, -18, -38, -3, 7, 6, -39, 25, -12, -33, -6, 14, -7, -14, -44, -4, -12, 0, 31, -15, -12, 101, -20, -3, -24, 19, -8, 13, 0, -30, -16, -43, -28, -17, 15, 8, 12, 14, -19, -13, 61, 18, 9, -14, -17, -6, -8, -18, 2, -22, 72, -24, 14, -25, 1, -10, -36, -15, -55, 2, -12, -27, 3, -25, 13, -7, 15, -10, -18, 12, -37, -17, -20, 60, 1, 8, -47, -1, -5, 16, -17, -32, -13, 13, -17, -13, -41, 1, -7, -40, 8, -21, -1, -18, -27, -35, 2, 101, 1, -22, 0, -32, -7, -47, 3, -21, 5, -11, 46, -17, -29, -9, -5, 42, -17, 2, -2, -2, 2, 68, -12, -27, -6, 21, -33, -7, -44, -3, -11, -38, -14, -20, -39, -12, -10, -10, -58, 21, -12, -7, 5, -2, -3, 85, -24, 10, 28, -64, -22, 2, 10, -48, 24, -1, 6, 7, -8, 14, 12, -18, -4, 4, 21, 24, -4, 2, 27, 24, -8, -11, -16, -19, 71, 28, -23, -29, -18, -92, -14, -27, -10, -31, -6, -18, -15, -37, -20, -17, 3, -9, -3, -11, -1, -50, 68, 7, -32, -2, -33, 8, -24, -3, 0, -4, -5, 50, -2, 11, -16, -15, 10, -58, -17, -3, -14, 35, -19, 93, -2, -11, -9, -23, 0, -29, -24, -9, -12, 7, 20, -15, -56, -56, -24, -16, -24, 3, 5, -25, 1, -3, -25, -27, -31, 7, -40, 25, -42, 3, -2, 10, -20, -22, -22, 17, -10, -3, -27, 4, 10, -36, -9, 10, 9, -17, -1, 60, -14, -17, 8, -20, 23, -1, 14, -26, -20, -22, -29, -23, 55, -5, 0, -18, 31, -3, -21, -10, 22, -18, 0, -50, 8, 7, 5, -40, -2, -23, -20, 32, -7, -34, 6, 0, -63, -26, -14, -5, -26, 42, -19, -27, 6, 7, -14, 15, -34, 19, 37, -25, -2, -15, -5, -111, -7, -2, -19, 46, -6, -24, -24, 4, 12, 5, -1, -51, -24, -8, 81, 54, -52, 82, -17, -92, -9, -25, -24, -16, 10, -22, -20, -12, -17, 2, 46, 0, 14, 5, -18, -20, 18, 20, -54, -20, -19, -6, -3, -4, 0, -16, 11, -4, -31, -11, -13, -49, -21, -18, 13, -23, -4, -12, -60, -26, -16, 7, 28, -4, -34, -15, -7, -20, -15, -34, -33, -9, -12, 11, -18, 12, -102, 1, 4, 51, 50, 14, 32, 3, 2, 13, -24, 17, -5, -30, -9, -64, 1, -22, 3, -2, -3, 38, -9, -25, -19, 11, -6, -15, 12, -18, 32, -17, -71, -8, 15, -12, -14, 73, 29, -21, -29, 6, -5, -6, -31, -26, -10, 6, 17, 13, -41, 27, 8, -32, -23, 9, -14, -46, 1, 7, -35, 25, -28, 5, 7, 5, 0, 4, -9, 5, 72, -15, -17, -34, 5, 7, -7, 20, -9, 26, 35, -12, -17, 1, 10, -13, 13, -9, -44, 0, -13, -3, -14, -12, 2, -7, -4, 15, -15, -22, -64, -14, -24, 7, 4, -23, -13, -26, 0, -16, -16, 1, -23, 103, -12, 2, 9, -5, -23, -31, -5, 1, -10, -14, -6, -4, -7, 62, -20, -26, -23, -9, -16, -20, 5, 1, -26, -31, -23, -12, 28, 10, -21, 12, -11, 21, -15, 20, 73, 4, -15, -1, -25, 1, -20, -4, 84, -12, -88, -86, 11, 62, -20, -9, -17, 25, 1, 36, 9, -9, -31, 61, -10, -55, -13, 31, -41, 22, 1, -9, -7, 34, -10, 1, 12, -9, 28, 7, 6, -13, -32, -37, -24, -17, 3, -26, -18, -5, 16, -15, 1, -16, 1, -12, -3, -8, 3, 1, -11, -66, -43, -4, 7, -26, -25, 47, 2, -33, -16, -7, -7, -36, 37, -3, -17, 0, -26, -15, -22, -20, -27, 11, -21, -38, -34, 25, -17, -11, -15, 57, -4, 7, -19, 4, 11, -7, 12, -3, -14, 14, -14, -19, 67, 57, 5, -10, -26, -12, 68, -1, -49, 51, -7, -7, 31, 6, -19, -27, -5, -16, 3, -4, -13, 7, 56, -17, -17, -1, 4, 5, -43, 20, -18, -36, -3, 6, -5, -12, -42, -1, -11, 3, 17, -17, -4, 96, -20, -5, -15, 15, -18, 24, 9, -23, -18, -32, -27, -18, 16, 10, 17, 18, -19, -17, 65, 9, 14, -10, -14, 3, -17, -14, -2, -20, 72, -18, 11, -18, -4, -4, -37, -16, -54, -3, -18, -39, -1, -23, 6, -21, 20, -11, -14, 7, -37, -12, -18, 53, 8, 19, -33, 0, -3, 25, -10, -45, -21, 18, -16, -15, -34, -4, -1, -35, 20, -19, -4, -14, -4, -31, -3, 100, 2, -19, 1, -26, -8, -35, 15, -15, 4, -10, 45, -21, -18, -9, -6, 38, -14, -6, -4, -4, -1, 70, 17, -25, -3, 4, -20, 1, -47, 0, -14, -34, -6, -19, -30, -7, -14, -16, -51, 23, -11, -9, 7, 3, -2, 84, -28, 17, 27, -59, -19, -3, 13, -32, 20, -6, 7, 8, -4, 12, 11, -12, -7, 1, 25, 16, -2, 4, 25, 17, -8, -14, -12, -22, 64, 27, -16, -33, -23, -32, -14, -22, -7, -22, -5, -17, -17, -36, -16, -8, 8, -8, -5, -3, 1, -43, 61, 12, -26, -4, -25, 8, -20, -2, -3, -4, -3, 55, -3, 14, -10, -10, 10, -45, -23, 5, -12, 38, -14, 91, 2, -10, -11, -20, 2, -23, -21, -5, -13, -5, 19, -16, -39, -31, -27, 36, -19, -3, 1, -27, 5, -1, -19, -28, -36, 8, -45, 14, -41, 7, -5, 15, -18, -24, -25, 19, -9, 0, -18, 2, 14, -25, -6, 17, 15, -17, -4, 63, -14, -17, 4, -22, 25, -2, 6, -26, -26, -23, -34, -25, 49, -1, -4, -18, 25, -2, -21, -11, 26, 1, -6, -45, 23, 3, 6, -30, -3, -38, -18, 32, -5, -35, 4, 6, -39, -18, -19, -7, -21, 47, -15, -26, 10, 10, -22, -4, -31, 19, 33, -15, 5, -15, -4, -26, -8, 0, -15, 43, -6, -18, -22, -1, -36, 1, 9, -35, -4, -4, 86, 49, -43, 72, -14, -76, -7, -22, -21, -23, 11, -29, -18, -11, -4, 5, 42, 8, 23, 12, -16, -19, -20, 16, -30, -22, -10, -10, 4, -1, -15, -8, 1, 4, -28, -14, -9, -51, -20, -18, 15, -21, -3, -6, -43, -26, -19, 10, 26, 11, -20, -19, -6, -26, -20, -28, -30, -12, -10, 13, -20, -5, -23, 0, 6, 52, 43, 10, 31, 5, 7, -12, -25, 20, 2, -31, -10, -65, -5, -26, -5, 3, -3, 17, -11, -14, -5, 14, -15, -3, -4, -9, 9, -6, -17, 6, 2, -12, -6, 7, -14, -2, -4, 10, 2, -5, -13, -16, 1, -3, 0, -2, -23, -34, 0, -20, -8, 2, -1, -9, -10, 3, -15, -8, -22, 4, -5, 0, -2, -17, -3, 1, 29, -5, -7, -9, 10, -10, 6, 8, -9, -22, 0, -7, -5, -7, 0, -11, 1, -2, -3, -13, -9, -26, -16, -6, -7, -10, -2, 12, -10, -17, 5, 0, -4, -5, -3, -14, -3, -11, -10, -3, -12, -5, -1, 23, 3, 3, 6, -2, -6, -8, 4, -3, -9, -9, -7, -5, 5, 20, -1, -8, -3, -5, -1, -9, 4, -2, -14, -18, -1, -7, 3, 1, -12, 1, -12, 17, -4, -12, 30, 4, -11, -2, -9, -9, -9, -4, 34, -9, -19, 54, 11, 30, -6, -8, 5, 12, -6, 10, 9, -6, 12, 20, -8, -59, -11, 9, -14, 7, 1, -1, -9, 21, -3, -6, 3, -8, 9, 6, -6, -11, -13, -26, -12, -2, 2, -12, -7, -6, -4, -6, 11, -13, -8, 0, 9, -9, -3, -3, -12, -37, -23, -4, -4, -24, -14, 24, -1, 1, -8, -6, -4, -19, 12, -5, -12, 4, -1, -4, -3, -7, -14, 10, 0, -20, 10, 5, -1, -4, -18, 25, -9, -4, -14, -2, 0, -5, -1, -21, -8, 0, -12, -10, 31, 14, -12, -6, -16, -6, 22, 2, 15, 22, -4, -9, 13, 2, -3, -7, 2, -5, 1, -1, -1, -9, 2, -10, -12, -7, 0, 9, -20, 5, -4, -25, -1, -3, -4, -2, -16, -6, -21, 1, 18, -6, 0, 32, -3, -4, -13, -4, -13, -2, 6, -8, -2, -8, 0, -29, -7, -1, -4, -9, 1, -9, 10, 16, 2, -2, -16, 10, -4, 0, -1, -3, 23, 0, 15, -15, -11, -3, -17, -9, -15, -2, -10, -5, 2, -10, 4, -7, 6, -4, -15, 1, -11, -8, 10, 24, 9, 7, -15, -2, -8, 4, -3, -14, -5, 4, -14, -8, -12, 7, -6, 0, -16, 6, -12, -17, 13, -14, 3, 31, -13, -13, -9, -20, -9, -1, -1, 5, -11, -7, 12, -11, 0, -6, -7, 7, -13, -3, -7, 3, 0, 26, 16, 12, -4, 21, -4, -9, 1, -10, -9, 4, -13, -9, -16, 9, -5, -6, -16, -1, -10, 0, -8, 1, 1, 45, -12, -9, 21, -19, -9, -5, -5, -6, 11, 2, 4, 2, -4, 8, 6, -6, -3, -8, 4, 0, -11, -10, 4, 11, -2, -3, -12, -6, 36, 7, -13, -4, -3, -53, -11, -20, -8, -11, -3, 5, -12, -12, -10, -5, 8, -6, -6, -4, -4, -10, 31, 0, 5, -8, -10, 0, -2, -2, -4, -4, -5, 6, 1, 4, -13, -3, -6, 2, -5, -5, -16, 6, -9, 35, -2, -6, -1, -10, -1, -5, -4, 3, -9, -5, -5, -6, -10, -5, -15, 36, 1, 1, -9, -2, 2, 3, 0, -10, -16, 0, -8, 8, -12, -13, 0, -6, -10, -9, -14, 20, 0, -11, -2, -7, -5, -19, -3, -6, -1, -8, -5, 12, -2, -3, -4, -10, -14, -3, 3, -2, -12, -3, -10, -12, 17, 0, -1, -9, -18, -16, -14, -13, 8, -32, 2, 0, 6, 0, -4, -7, -7, 4, -3, 20, -3, -14, -7, -7, -32, -8, 0, -2, -13, 16, -13, -14, 4, -12, -9, -16, -16, 10, 8, -10, 4, 6, -2, -51, 3, -19, -9, 26, 0, 0, -6, -2, -21, -4, 6, -18, 0, -9, 39, 19, -12, 27, -20, -49, -5, -10, -16, -13, 2, -13, 0, -7, -8, -13, 10, -13, -2, 16, -7, -8, -11, -7, 1, -8, -12, -5, 9, 0, -6, -2, -3, -13, -3, -9, -5, 3, -7, -9, -1, -5, -9, -14, -22, -14, -4, 7, 6, -27, -23, -11, -8, -4, -2, -8, -10, -9, 1, 2, 2, -29, -42, -4, -2, 24, 39, 15, 9, -6, -10, 18, -13, -5, -6, -17, -14, -29, -7, 1, -12, -9, -10, 13, -2, -7, -4, 7, -4, 3, 0, 2, 3, -12, 6, 5, -9, 4, 0, -10, 1, -5, 3, 8, -7, -11, 3, 5, 2, 3, 1, 5, -5, 1, 12, -3, 1, 9, -12, -11, -8, 5, -14, 25, 1, 3, -6, -4, 6, -1, 7, 5, 3, 9, 2, -9, -11, -24, 1, 4, -4, 33, -1, -3, 8, -6, -8, -4, -9, 3, -3, -4, 2, -2, -5, 7, 0, -7, 9, 6, 0, -3, 8, -5, -10, 0, -1, -4, 6, -1, -1, 3, -6, 4, -9, 2, 4, 5, 12, 1, -5, 2, 5, -4, 4, 11, 3, 4, -5, 8, -13, 13, 9, 5, 1, 2, 2, -16, 0, -12, -3, 6, 1, 1, 7, 3, 3, 4, 1, -4, 13, 7, -2, 4, 5, -13, 5, 6, 13, 1, -3, 59, -5, 18, 6, -1, 3, -2, -4, 5, 1, -4, -28, 13, -2, -19, -3, -2, -5, 11, 6, 0, -4, -35, -9, -5, -3, 1, 2, 6, 9, -2, -2, -15, 3, -17, 2, -7, 5, 2, -10, -11, 10, -21, 9, -8, -9, -6, 0, -6, -5, -20, -32, -10, -1, -25, -3, 7, 4, -8, -11, 4, -5, 3, -3, -5, 3, 3, 1, 1, -1, 7, 0, 7, 1, 4, 22, 4, 7, 1, -7, 4, -3, -2, -11, -7, 2, 2, 2, -13, 6, 2, -3, 7, 14, -1, -10, 10, 2, -1, 4, 1, -2, -8, 0, 2, 9, 4, -7, 2, 6, -2, -6, -1, -9, 1, 2, 0, -17, -1, 6, 3, 0, -3, 5, 0, -2, 8, 2, 0, 6, -10, -3, -2, 9, 9, -1, -5, 5, 1, -9, -9, -1, -7, -2, 2, 2, -17, 3, -4, -14, -2, -14, -4, -4, 4, -11, 13, -4, -10, 1, 12, 6, -14, 14, 4, -6, -7, 12, -2, 2, -9, 1, 1, -4, 8, 0, 12, 0, 2, -7, 2, -3, 3, -4, -16, 1, -1, 12, 5, 3, -6, -8, -4, -2, -17, -5, -10, 10, -5, 7, 5, -17, 2, -1, 2, -7, 1, -6, 0, 14, 0, 6, 0, -5, -7, -4, -13, -6, -3, 22, 2, -7, -1, 7, 0, -9, 0, 4, -1, 4, 3, -4, 16, 3, -2, 5, -7, -2, 19, -5, -9, 2, -1, 5, 5, -3, -7, -2, -14, 8, 7, -13, -8, 1, -5, -3, 3, 4, 13, 9, -17, 6, -7, 2, 12, -5, -10, 6, 3, 1, 2, -1, 2, 4, -8, 4, 5, -1, 4, 0, -11, 4, -3, 7, 1, -8, 8, 26, 6, -2, 0, 9, -79, -4, -20, 2, -6, 0, 9, 4, 2, -12, -10, -2, 6, -4, -1, -12, -8, 4, -3, -19, 4, 4, 2, 1, 3, 6, 1, 4, -11, 2, -1, -4, 6, -7, -6, 2, -6, -5, 3, 8, 2, -4, 6, 8, -2, 6, 0, 1, 8, -2, 12, -7, 5, 5, -9, 3, 21, -11, 1, 0, -5, 3, 5, 1, 3, 0, 3, -4, 7, 0, -5, 3, 0, -7, 4, 2, 0, 4, -7, -6, -8, 0, -17, -6, -10, -7, 3, 6, -5, 1, 2, 8, 3, -9, 10, 5, 1, 1, 7, 2, 9, -5, 2, 7, 10, 1, -4, -6, -6, -6, -29, 10, -1, -18, 7, -6, -2, -5, 10, -2, 7, 9, 6, -2, 6, -22, -3, -3, -5, -1, -10, 0, 2, 0, -6, 4, -36, 8, 1, -2, -1, -3, 9, 4, -72, 8, -12, 1, 4, 3, 1, 2, 3, -21, -6, 1, -8, -26, -4, 7, 6, -6, 4, -10, -10, 3, 4, -5, 1, 1, 0, 2, 0, -12, -5, 4, -12, -8, -10, 1, 0, -25, 4, -3, 3, 1, -1, -13, 3, -19, -10, 7, -7, 12, 4, -7, 17, 5, 4, -9, 4, -8, 2, -11, -6, 5, -1, -1, -34, -10, -1, -2, 7, 5, 0, 2, 5, 0, -1, -2, -29, -43, 3, -1, -2, 12, 9, 7, -4, 6, -8, 2, -3, -2, 4, -9, 1, 0, -9, 1, 5, -1};

float bias_raw[672]={2.220900058746338, 0.35891056060791016, 1.3634226322174072, 1.6535037755966187, 3.28731107711792, 4.5944623947143555, 0.6903148889541626, 4.381412506103516, 3.5435597896575928, 1.8252683877944946, 1.4416744709014893, 1.7958621978759766, 3.7102818489074707, 3.832476854324341, 2.202083110809326, 4.496452808380127, 2.7014904022216797, 1.8338942527770996, 1.1275869607925415, 1.087445855140686, 3.0334134101867676, 4.399112224578857, 2.0849058628082275, 2.876448154449463, 3.6427078247070312, -0.019989222288131714, 2.981121778488159, 3.7166476249694824, 2.333418369293213, 1.6937326192855835, -1.3668522834777832, 2.9923477172851562, 1.1396372318267822, 4.173748970031738, 4.711235046386719, 1.9360365867614746, 1.3161745071411133, 4.017810821533203, 1.4236106872558594, 1.4764257669448853, -0.4324204921722412, 2.6295313835144043, 3.1200103759765625, 2.229951858520508, 1.8117717504501343, 3.757354736328125, 4.709568977355957, 4.445226669311523, 4.3354034423828125, 2.8178365230560303, 3.94396710395813, 4.182710647583008, 0.7230315804481506, 0.7530076503753662, 1.4813904762268066, 2.8425254821777344, 2.2248902320861816, 0.296569287776947, -1.0768648386001587, 3.018134117126465, 3.184680223464966, 4.224884986877441, 4.830852508544922, 2.763533592224121, 1.0084969997406006, 4.3950700759887695, 2.866086959838867, 0.8647807836532593, 1.3783725500106812, 3.925854206085205, 1.79305899143219, 3.674020767211914, 3.274289608001709, 3.2658419609069824, 4.239038467407227, 4.066372871398926, 0.5255963206291199, 4.515268325805664, 3.118492603302002, 3.3262124061584473, 0.459998220205307, 1.3484628200531006, 1.5606811046600342, 2.4689760208129883, 3.3076908588409424, 3.4509387016296387, 3.673656940460205, 3.7786502838134766, 1.045599102973938, 3.8180088996887207, 3.5901389122009277, 1.0249450206756592, 2.095667600631714, 0.43361973762512207, 3.355013608932495, 1.2939848899841309, 3.5840141773223877, 1.7402925491333008, 3.1030540466308594, 4.629342555999756, 3.1112923622131348, 4.0129523277282715, 3.3396055698394775, 3.341599941253662, 3.9663047790527344, 2.930948257446289, 2.7207846641540527, 0.9246118068695068, 3.879152297973633, 3.1864585876464844, 3.806912899017334, 3.7766435146331787, 4.18110466003418, 4.05250358581543, 1.8953180313110352, 3.491705894470215, 1.3967432975769043, 1.3182183504104614, 1.8240058422088623, 3.9853687286376953, 3.3066065311431885, 3.9513816833496094, 5.291994094848633, 3.809579372406006, 2.7039103507995605, 3.9437928199768066, 2.758888006210327, 2.1585769653320312, 2.67887544631958, 3.3568601608276367, 3.7815427780151367, 2.500621795654297, 1.4897353649139404, 4.256035327911377, 3.6937637329101562, 2.0988810062408447, 4.315346717834473, 2.5998494625091553, -7.020045280456543, 2.141838312149048, 21.18221664428711, 4.036380767822266, 2.2547826766967773, 1.404624581336975, -0.4613058865070343, 3.1656970977783203, 0.22922132909297943, 3.248556137084961, 4.457516670227051, 1.7799116373062134, 2.1662466526031494, 0.19444739818572998, -7.799754619598389, 3.9054620265960693, 2.420226812362671, 1.7768718004226685, 1.400085687637329, 3.867121696472168, 1.9124877452850342, 2.9210493564605713, 0.7211713790893555, 1.922731637954712, 5.314520835876465, 3.851569175720215, 4.771193981170654, 1.9441494941711426, 2.748359203338623, -0.8951623439788818, 4.274680137634277, 2.8448100090026855, 0.9859539270401001, 2.129946231842041, 2.9944722652435303, 3.077451705932617, 1.6057467460632324, 2.8615059852600098, 3.374436855316162, 0.8117755651473999, 1.8134050369262695, 1.4538979530334473, 1.7102954387664795, 2.6899147033691406, 1.8704079389572144, 2.8138484954833984, 3.240851402282715, 3.160273790359497, 3.5602283477783203, 3.0260181427001953, 2.944629192352295, 1.359093427658081, 1.5634859800338745, 4.082635879516602, 0.5623874664306641, 1.670807123184204, 2.3605644702911377, 3.4995083808898926, 1.6182773113250732, 0.8291388750076294, 3.681835174560547, 0.7375450134277344, 2.4931116104125977, 2.821678638458252, 3.9283154010772705, 3.448697090148926, 4.52716064453125, 1.517984390258789, 3.307971239089966, 3.2486777305603027, 4.334171772003174, 3.1739413738250732, 1.425703525543213, 0.7894489765167236, 3.372424602508545, 4.811606407165527, 3.0375490188598633, 1.7218859195709229, 4.833106517791748, 4.382934093475342, 2.4631552696228027, 3.3486344814300537, 3.7272162437438965, 3.6578149795532227, 4.500196933746338, 1.922051191329956, 4.059147357940674, 3.6372246742248535, 4.898678779602051, 3.7699832916259766, 3.803654432296753, 3.738131046295166, 3.8145439624786377, 1.347141981124878, 2.442434310913086, 1.126164197921753, 3.9247522354125977, 3.184718608856201, 4.29293966293335, 2.422342300415039, 3.9583168029785156, 3.066071033477783, 2.4312524795532227, 4.200652122497559, 3.5263047218322754, 2.83082914352417, 4.0222015380859375, 2.2142436504364014, 2.3970603942871094, 1.8631682395935059, 3.9320220947265625, 0.48022058606147766, 2.886664867401123, 1.0882954597473145, 3.1856274604797363, 2.564152240753174, 2.7090604305267334, 1.060418963432312, 3.694603443145752, 3.729854106903076, 4.6504058837890625, 2.934136390686035, 2.9917654991149902, 3.447299003601074, 1.6349817514419556, 3.4515433311462402, 3.7975025177001953, 2.7017552852630615, 1.9718177318572998, 2.7596826553344727, 3.3480212688446045, 2.298454999923706, 2.6545138359069824, 1.9145169258117676, 4.226149082183838, 3.152395725250244, 2.58564829826355, 4.217028617858887, 3.4070491790771484, 4.033877849578857, 2.97365140914917, 3.9196829795837402, 1.501694917678833, 3.363572597503662, 3.9355416297912598, 3.0132486820220947, 1.5789086818695068, -0.3337942361831665, 5.082015037536621, 6.071766376495361, 1.6756134033203125, 0.7869178056716919, 3.8998754024505615, 3.9958741664886475, 3.940824270248413, 2.475069999694824, 1.6691200733184814, -0.1265850067138672, 3.350386142730713, 4.459068775177002, 2.872931718826294, 1.568260669708252, 1.8904266357421875, 4.139236927032471, 0.3797408938407898, 3.0604007244110107, 1.2800748348236084, -0.7904899716377258, 3.6628024578094482, 1.5149610042572021, 1.7589011192321777, 2.0269899368286133, 3.383883476257324, 1.0329142808914185, 3.2928080558776855, 4.017506122589111, 3.704573154449463, 2.6693263053894043, 2.532588481903076, 1.3472400903701782, 2.306579113006592, 3.1747288703918457, 3.882526397705078, 1.0264713764190674, 2.49873423576355, 2.9442782402038574, 2.9496076107025146, 0.6671783924102783, 2.888439416885376, 0.9291803240776062, 2.9501702785491943, 1.3150274753570557, 3.7717676162719727, 3.7514266967773438, 3.293206214904785, 0.5811110734939575, 2.218029260635376, 1.0798319578170776, 2.7172293663024902, 3.129218578338623, 1.9426822662353516, 0.9774206876754761, 3.5150718688964844, 3.786625385284424, 1.6159021854400635, 2.996785879135132, 0.350199818611145, 2.5418267250061035, 4.048981666564941, 3.658137083053589, 2.8073787689208984, 2.465178966522217, 2.496025562286377, 3.6421799659729004, 3.6062803268432617, 5.232437610626221, 0.5514136552810669, 4.832781791687012, 1.8154759407043457, -0.8600484728813171, 0.47127604484558105, 3.59861159324646, 4.7001519203186035, 1.775797963142395, 4.970957279205322, 0.9668025970458984, 2.3836517333984375, 3.8016552925109863, 0.7993564605712891, 3.6449990272521973, 3.4941656589508057, 3.6357600688934326, 2.179260492324829, 3.209414482116699, 1.694044828414917, 3.3485465049743652, 3.222170829772949, 4.803157806396484, -2.009211301803589, 0.8781348466873169, 2.065882444381714, 1.86069917678833, 4.988104820251465, 3.4011240005493164, 1.5580090284347534, 0.9348137378692627, 1.2099370956420898, 3.220850944519043, 1.5953667163848877, 3.0500311851501465, 3.049409866333008, 1.302722454071045, 3.4613261222839355, 5.032344818115234, 0.8831084966659546, 2.385913848876953, 1.8610100746154785, 3.807948589324951, 0.5898030996322632, 3.6487104892730713, 4.68641471862793, 2.603598117828369, 1.9925988912582397, 2.601670026779175, 2.551837921142578, 3.5817508697509766, 0.8584060072898865, 3.1737709045410156, 2.0787265300750732, 2.9188284873962402, 3.709787368774414, 2.97866153717041, 4.430797576904297, 3.9985218048095703, 1.1828699111938477, 4.024178504943848, 1.4553778171539307, 3.850253105163574, 3.3476548194885254, 4.022489547729492, 2.9048655033111572, 3.1541919708251953, 2.055929660797119, 3.8924074172973633, 4.351434230804443, 4.196568489074707, 2.8674063682556152, 1.8694071769714355, 2.660125970840454, 2.3951616287231445, 1.4808443784713745, 2.102623224258423, 1.2273634672164917, 3.280177116394043, 1.2251440286636353, 1.8354072570800781, 1.3614174127578735, 3.2997353076934814, 1.8947246074676514, 3.2056374549865723, 3.0623621940612793, 2.7889914512634277, 2.861189126968384, 1.625708818435669, 3.932366132736206, 4.0860795974731445, 3.734837532043457, 1.8488647937774658, 0.7980079650878906, 2.892043113708496, 2.4650018215179443, 2.0463616847991943, 3.792731285095215, 3.251805067062378, 3.700944185256958, 3.284496307373047, 5.18110466003418, 3.061389446258545, 3.7118566036224365, 3.8468236923217773, 2.0885257720947266, 3.2635228633880615, 2.898029327392578, 3.3560354709625244, 1.7901164293289185, 2.582883596420288, 1.5014727115631104, 1.510909080505371, 4.983767986297607, 4.02759313583374, 2.6290664672851562, 3.022723913192749, 2.8618857860565186, 3.6653685569763184, 2.349611282348633, 3.749640941619873, 0.5913934707641602, 2.872598648071289, 2.593590021133423, 3.555154323577881, 3.325587749481201, 3.6230554580688477, 3.853320360183716, 1.9385929107666016, 2.9052505493164062, 0.2573810815811157, 1.4147621393203735, 3.8065261840820312, -0.6975103616714478, 1.9687790870666504, 1.8838427066802979, 3.3901593685150146, 1.244551658630371, 4.042811393737793, 2.868523120880127, 0.839942216873169, 4.036240100860596, 3.72263765335083, 2.995171070098877, 1.9149572849273682, 2.522304058074951, 2.8688671588897705, 4.618068218231201, 1.6410143375396729, 2.698791742324829, 2.388617753982544, 3.7945780754089355, 3.094430446624756, 1.8843955993652344, 1.2869924306869507, 4.452766418457031, 1.2284210920333862, 4.3022990226745605, 1.1865113973617554, 3.1762847900390625, 1.6979091167449951, 1.9236210584640503, 2.3407981395721436, 3.8587300777435303, 4.732308387756348, 2.9820008277893066, 2.7781929969787598, 1.204914927482605, 2.177213668823242, 3.3650598526000977, 3.4566810131073, 2.284581184387207, 3.89615535736084, 4.484259605407715, 3.103710174560547, 2.909654140472412, 2.783761978149414, 2.938748598098755, 2.3577516078948975, 4.1263628005981445, 3.1010522842407227, 3.4557137489318848, 2.4194655418395996, 3.9386329650878906, 4.467278957366943, 4.701035976409912, 2.3644227981567383, 4.281810283660889, 3.443253993988037, 1.7444989681243896, 2.8980038166046143, 3.7214667797088623, 3.635200023651123, 1.7079410552978516, 4.599856853485107, 0.6457078456878662, 2.761850357055664, 0.35845255851745605, 2.8806400299072266, 3.580188751220703, 3.5480337142944336, 3.242072820663452, 1.753206729888916, 0.35742688179016113, 1.315704584121704, 5.398439407348633, 1.6833083629608154, 2.6436307430267334, 5.039120197296143, 0.7682332992553711, 2.0971853733062744, 4.821445941925049, 4.7719197273254395, -0.7377142906188965, 4.5329694747924805, 2.377048969268799, 2.9843428134918213, 1.6505811214447021, 2.070744514465332, -0.07479608058929443, 4.194083213806152, 1.582761287689209, 3.897184371948242, 3.698391914367676, 4.225325584411621, 2.543564796447754, 3.9288694858551025, 2.2985708713531494, 4.053831577301025, 4.209059238433838, -0.20870620012283325, 2.4997754096984863, 0.3425443172454834, 0.8450592756271362, 1.9011088609695435, 1.7180805206298828, 0.35386842489242554, 2.966433525085449, 1.5874053239822388, 2.518345594406128, 3.523801326751709, 1.3951267004013062, 3.421312093734741, 4.191125392913818, 2.290879726409912, 4.422405242919922, 1.3775863647460938, 0.634174108505249, 2.2015037536621094, 3.6689510345458984, 1.6349835395812988, 4.46918249130249, 2.726877212524414, -0.9693971276283264, 3.640477180480957, 5.0757951736450195, 3.896829843521118, 1.9034297466278076, -0.6198441386222839, 2.543252468109131, 1.7441563606262207, 3.4898409843444824, 4.666159629821777, 2.9295437335968018, 1.6685798168182373, 4.164209365844727, -1.198122262954712, 1.0289406776428223, 3.6419949531555176, 3.7276668548583984, 1.5607595443725586, 4.064070701599121, 3.6009702682495117, 1.180366039276123, 3.5747387409210205, 3.0011587142944336, 2.1240146160125732, 4.9480156898498535, 3.2301883697509766, 4.304853439331055, 0.09085756540298462, 0.8488318920135498, 2.0619144439697266, 3.461169719696045, 3.0473642349243164, -3.697279930114746, 2.995781421661377, 2.6711621284484863, 1.3200114965438843, 4.850164413452148, 3.2373099327087402, 3.4479422569274902, 3.68082332611084, 3.10263729095459, 1.0525639057159424, 2.6962924003601074, 0.8653267621994019, 0.48179328441619873, 3.230727195739746, 3.6229357719421387, 3.613619804382324, 2.3561954498291016, 2.1269288063049316, 4.173882484436035, 2.874267101287842, 5.1436357498168945, 3.146235942840576, -1.4838227033615112, 4.750480651855469, 3.6113266944885254, 2.3449153900146484, 1.3040753602981567, 2.910892963409424, 2.580357789993286, 4.2675461769104, 2.25465726852417, 2.9278316497802734, 3.9363484382629395, 2.2704100608825684};

int8_t* filter_tensor_data=filter_raw;
float* bias_tensor_data=bias_raw;

bool has_conv_bias=true;
int stride_width=2;
int stride_height=2;
TfLiteFusedActivation activation=kTfLiteActNone;
int dilation_width_factor=1;
int dilation_height_factor=1;
const int filter_dims_size=4;
const int filter_dims_raw[4]={1,5,5,672};
const int bias_dims_size=1;
const int32_t bias_dims_raw[1]={672};
TfLitePadding paddings=kTfLitePaddingSame;
TfLiteType filter_type=kTfLiteInt8;
TfLiteType bias_type=kTfLiteFloat32;
const float scale_filter=0.0;
const int32_t zero_point_filter=0;
const float scale_bias=0.0;
const int32_t zero_point_bias=0;

struct OpData {
  TfLitePaddingValues padding;
  // The scaling factor from input to output (aka the 'real multiplier') can
  // be represented as a fixed point multiplier plus a left shift.
  int32_t output_multiplier;
  int output_shift;
  // The range of the fused activation layer. For example for kNone and
  // uint8_t these would be 0 and 255.
  int32_t output_activation_min;
  int32_t output_activation_max;

  // Per channel output multiplier and shift.
  std::vector<int32_t> per_channel_output_multiplier;
  std::vector<int> per_channel_output_shift;

  // Hybrid per channel temporary tensors.
  int input_quantized_id = kTensorNotAllocated;
  int scaling_factors_id = kTensorNotAllocated;
  int input_offset_id = kTensorNotAllocated;
  int32_t input_quantized_index;
  int32_t scaling_factors_index;
  int32_t input_offset_index;
};

void ExtractDepthConvParams(TfLitePadding padding, int stride_width, int stride_height,
                               int dilation_width_factor, int dilation_height_factor,
                               TfLiteFusedActivation activation,
                               TfLiteDepthwiseConvParams* data_params) {
  // TfLiteDepthwiseConvParams data_params;
  data_params->padding = padding;
  data_params->stride_width = stride_width;
  data_params->stride_height = stride_height;
  data_params->dilation_width_factor = dilation_width_factor;
  data_params->dilation_height_factor = dilation_height_factor;
  data_params->activation = activation;
  // return data_params;
}

void GetDepthConvTensor(TfLiteType type, const char* name, TfLiteIntArray* tensor_dims_data, 
                       TfLiteQuantizationParams quant_params, char* tensor_data,
                       TfLiteAffineQuantization* quant_struct, size_t bytes_size,
                       TfLiteTensor* tensor) {
  tensor->type = type;
  tensor->name = name;
  tensor->dims = tensor_dims_data;
  tensor->params = quant_params;
  // tensor->data.raw = reinterpret_cast<char*>(tensor_data);
  tensor->data.raw = tensor_data;
  tensor->bytes = bytes_size;
  tensor->allocation_type = kTfLiteMemNone;
  // data_0.allocation = allocation;
  tensor->is_variable = false;
  if (type != kTfLiteFloat32) {
    tensor->quantization.type = kTfLiteAffineQuantization;
    tensor->quantization.params = quant_struct;
  } else {
    tensor->quantization.type = kTfLiteNoQuantization;
  }
  tensor->sparsity = nullptr;
}
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  // This is a builtin op, so we don't use the contents in 'buffer', if any.
  // Instead, we allocate a new object to carry information from Prepare() to
  // Eval().
  return new OpData;
}

void Free(TfLiteContext* context, void* buffer) {
  delete reinterpret_cast<OpData*>(buffer);
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  // auto* params =
  //     reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data);
  TfLiteDepthwiseConvParams data_params;
  ExtractDepthConvParams(paddings, stride_width, stride_height, dilation_width_factor, dilation_height_factor, activation, &data_params);
  TfLiteDepthwiseConvParams* params = &data_params;

  OpData* data = reinterpret_cast<OpData*>(node->user_data);

  bool has_bias = false;

  // TF_LITE_ENSURE(context, has_bias || NumInputs(node) == 2);
  const TfLiteTensor* input;
  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));
  TfLiteTensor filter_tensor;
  TfLiteIntArray* filter_dims_data = TfLiteIntArrayCreate(filter_dims_size);
  int size_filter = 1;
  for (int i = 0; i < filter_dims_size; i++) {
    // std::cout << "dims_raw: " << dims_raw[i] << std::endl;
    filter_dims_data->data[i] = filter_dims_raw[i];
    size_filter *= filter_dims_raw[i];
  }
  size_t bytes_size_filter = sizeof(float) * size_filter;
  TfLiteQuantizationParams filter_params;
  filter_params.scale=scale_filter;
  filter_params.zero_point=zero_point_filter;
  TfLiteFloatArray* scale_array_filter = TfLiteFloatArrayCreate(1);
  scale_array_filter->data[0] = scale_filter;
  TfLiteIntArray* zero_point_array_filter = TfLiteIntArrayCreate(1);
  zero_point_array_filter->data[0] = zero_point_filter;

  TfLiteAffineQuantization quant_struct_filter;
  quant_struct_filter.scale = scale_array_filter;
  quant_struct_filter.zero_point = zero_point_array_filter;
  quant_struct_filter.quantized_dimension = 0;
  // float* filter_data;
  // filter_tensor_data = filter_raw;
  GetDepthConvTensor(filter_type, "filter", filter_dims_data, filter_params,
                       reinterpret_cast<char*>(filter_tensor_data),
                       &quant_struct_filter, bytes_size_filter, &filter_tensor);
  const TfLiteTensor* filter = &filter_tensor;
  // TF_LITE_ENSURE_OK(context,
  //                   GetInputSafe(context, node, kFilterTensor, &filter));
  const TfLiteTensor* bias = nullptr;

  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TfLiteTensor* output;
  TF_LITE_ENSURE_OK(context,
                    GetOutputSafe(context, node, kOutputTensor, &output));

  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);
  TF_LITE_ENSURE_EQ(context, NumDimensions(filter), 4);
  TF_LITE_ENSURE(context, params->dilation_height_factor > 0);
  TF_LITE_ENSURE(context, params->dilation_width_factor > 0);

  const TfLiteType data_type = input->type;

  const TfLiteType filter_type = filter->type;
  const bool is_hybrid =
      data_type == kTfLiteFloat32 && filter_type == kTfLiteInt8;
  TF_LITE_ENSURE(context,
                 data_type == kTfLiteFloat32 || data_type == kTfLiteUInt8 ||
                     data_type == kTfLiteInt8 || data_type == kTfLiteInt16);
  TF_LITE_ENSURE_TYPES_EQ(context, output->type, data_type);
  if (!is_hybrid) {
    TF_LITE_ENSURE(context,
                   filter->type == data_type || data_type == kTfLiteInt16);
  }

  if (data_type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
  }

  // Filter in DepthwiseConv is expected to be [1, H, W, O].
  TF_LITE_ENSURE_EQ(context, SizeOfDimension(filter, 0), 1);

  if (has_bias) {
    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kBiasTensor, &bias));
    if (data_type == kTfLiteUInt8 || data_type == kTfLiteInt8) {
      TF_LITE_ENSURE_TYPES_EQ(context, bias->type, kTfLiteInt32);
      TF_LITE_ENSURE_EQ(context, bias->params.zero_point, 0);
    } else if (data_type == kTfLiteInt16) {
      TF_LITE_ENSURE_TYPES_EQ(context, bias->type, kTfLiteInt64);
      TF_LITE_ENSURE_EQ(context, bias->params.zero_point, 0);
    } else {
      TF_LITE_ENSURE_TYPES_EQ(context, bias->type, data_type);
    }
    TF_LITE_ENSURE_EQ(context, NumDimensions(bias), 1);
    TF_LITE_ENSURE_EQ(context, SizeOfDimension(filter, 3),
                      SizeOfDimension(bias, 0));
  }

  int channels_out = SizeOfDimension(filter, 3);
  int width = SizeOfDimension(input, 2);
  int height = SizeOfDimension(input, 1);
  int filter_width = SizeOfDimension(filter, 2);
  int filter_height = SizeOfDimension(filter, 1);
  int batches = SizeOfDimension(input, 0);

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params->padding;
  int out_width, out_height;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
      params->dilation_height_factor, params->dilation_width_factor, height,
      width, filter_height, filter_width, padding, &out_height, &out_width);

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training or
  // calibration.
  if (data_type != kTfLiteFloat32) {
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
                      kTfLiteAffineQuantization);
    TF_LITE_ENSURE(context, filter->quantization.type != kTfLiteNoQuantization);
    const auto* affine_quantization =
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
    TF_LITE_ENSURE(context, affine_quantization->scale);
    TF_LITE_ENSURE(context, (affine_quantization->scale->size == 1 ||
                             affine_quantization->scale->size == channels_out));

    data->per_channel_output_multiplier.resize(channels_out);
    data->per_channel_output_shift.resize(channels_out);
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
        context, input, filter, bias, output, params->activation,
        &data->output_multiplier, &data->output_shift,
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier.data(),
        data->per_channel_output_shift.data(), channels_out));
  }

  if (is_hybrid) {
    TF_LITE_ENSURE(context, filter->quantization.type != kTfLiteNoQuantization);
    const auto* affine_quantization =
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
    TF_LITE_ENSURE(context, affine_quantization->scale);
    TF_LITE_ENSURE_EQ(
        context, affine_quantization->scale->size,
        filter->dims->data[affine_quantization->quantized_dimension]);

    int temporaries_count = 0;
    data->input_quantized_index = temporaries_count;
    if (data->input_quantized_id == kTensorNotAllocated) {
      TF_LITE_ENSURE_OK(
          context, context->AddTensors(context, 1, &data->input_quantized_id));
    }
    ++temporaries_count;
    data->scaling_factors_index = temporaries_count;
    if (data->scaling_factors_id == kTensorNotAllocated) {
      TF_LITE_ENSURE_OK(
          context, context->AddTensors(context, 1, &data->scaling_factors_id));
    }
    ++temporaries_count;
    data->input_offset_index = temporaries_count;
    if (data->input_offset_id == kTensorNotAllocated) {
      TF_LITE_ENSURE_OK(
          context, context->AddTensors(context, 1, &data->input_offset_id));
    }
    ++temporaries_count;

    TfLiteIntArrayFree(node->temporaries);
    node->temporaries = TfLiteIntArrayCreate(temporaries_count);

    node->temporaries->data[data->input_quantized_index] =
        data->input_quantized_id;
    TfLiteTensor* input_quantized;
    TF_LITE_ENSURE_OK(
        context, GetTemporarySafe(context, node, data->input_quantized_index,
                                  &input_quantized));
    input_quantized->type = kTfLiteInt8;
    input_quantized->allocation_type = kTfLiteArenaRw;
    if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {
      TfLiteIntArray* input_quantized_size = TfLiteIntArrayCopy(input->dims);
      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_quantized,
                                                       input_quantized_size));
    }
    node->temporaries->data[data->scaling_factors_index] =
        data->scaling_factors_id;
    TfLiteTensor* scaling_factors;
    TF_LITE_ENSURE_OK(
        context, GetTemporarySafe(context, node, data->scaling_factors_index,
                                  &scaling_factors));
    scaling_factors->type = kTfLiteFloat32;
    scaling_factors->allocation_type = kTfLiteArenaRw;
    const int batch_size = SizeOfDimension(input, 0);
    int scaling_dims[1] = {batch_size};
    if (!TfLiteIntArrayEqualsArray(scaling_factors->dims, 1, scaling_dims)) {
      TfLiteIntArray* scaling_factors_size = TfLiteIntArrayCreate(1);
      scaling_factors_size->data[0] = batch_size;
      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, scaling_factors,
                                                       scaling_factors_size));
    }
    node->temporaries->data[data->input_offset_index] = data->input_offset_id;
    TfLiteTensor* input_offsets;
    TF_LITE_ENSURE_OK(context,
                      GetTemporarySafe(context, node, data->input_offset_index,
                                       &input_offsets));
    input_offsets->type = kTfLiteInt32;
    input_offsets->allocation_type = kTfLiteArenaRw;
    if (!TfLiteIntArrayEqualsArray(input_offsets->dims, 1, scaling_dims)) {
      TfLiteIntArray* input_offsets_size = TfLiteIntArrayCreate(1);
      input_offsets_size->data[0] = batch_size;
      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_offsets,
                                                       input_offsets_size));
    }
  }

  TfLiteIntArray* outputSize = TfLiteIntArrayCreate(4);
  outputSize->data[0] = batches;
  outputSize->data[1] = out_height;
  outputSize->data[2] = out_width;
  outputSize->data[3] = channels_out;
  return context->ResizeTensor(context, output, outputSize);
}

TfLiteStatus ComputeDepthMultiplier(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    const TfLiteTensor* filter,
                                    int16* depth_multiplier) {
  int num_filter_channels = SizeOfDimension(filter, 3);
  int num_input_channels = SizeOfDimension(input, 3);
  TF_LITE_ENSURE(context, num_input_channels != 0);
  TF_LITE_ENSURE_EQ(context, num_filter_channels % num_input_channels, 0);
  *depth_multiplier = num_filter_channels / num_input_channels;
  return kTfLiteOk;
}

template <KernelType kernel_type>
TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteDepthwiseConvParams* params, OpData* data,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
                           &output_activation_max);

  DepthwiseParams op_params;
  op_params.padding_type = PaddingType::kSame;
  op_params.padding_values.width = data->padding.width;
  op_params.padding_values.height = data->padding.height;
  op_params.stride_width = params->stride_width;
  op_params.stride_height = params->stride_height;
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.float_activation_min = output_activation_min;
  op_params.float_activation_max = output_activation_max;
  TF_LITE_ENSURE_STATUS(ComputeDepthMultiplier(context, input, filter,
                                               &op_params.depth_multiplier));
  if (kernel_type == kReference) {
    reference_ops::DepthwiseConv(
        op_params, GetTensorShape(input), GetTensorData<float>(input),
        GetTensorShape(filter), GetTensorData<float>(filter),
        GetTensorShape(bias), GetTensorData<float>(bias),
        GetTensorShape(output), GetTensorData<float>(output));
  } else {
    optimized_ops::DepthwiseConv<float, float>(
        op_params, GetTensorShape(input), GetTensorData<float>(input),
        GetTensorShape(filter), GetTensorData<float>(filter),
        GetTensorShape(bias), GetTensorData<float>(bias),
        GetTensorShape(output), GetTensorData<float>(output),
        CpuBackendContext::GetFromContext(context));
  }
  return kTfLiteOk;
}

template <KernelType kernel_type>
TfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                           TfLiteDepthwiseConvParams* params, OpData* data,
                           const TfLiteTensor* input,
                           const TfLiteTensor* filter, const TfLiteTensor* bias,
                           TfLiteTensor* output) {
  auto input_offset = -input->params.zero_point;
  auto filter_offset = -filter->params.zero_point;
  auto output_offset = output->params.zero_point;

  DepthwiseParams op_params;
  op_params.padding_type = PaddingType::kSame;
  op_params.padding_values.width = data->padding.width;
  op_params.padding_values.height = data->padding.height;
  op_params.stride_width = params->stride_width;
  op_params.stride_height = params->stride_height;
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.input_offset = input_offset;
  op_params.weights_offset = filter_offset;
  op_params.output_offset = output_offset;
  op_params.output_multiplier = data->output_multiplier;
  op_params.output_shift = -data->output_shift;
  op_params.quantized_activation_min = data->output_activation_min;
  op_params.quantized_activation_max = data->output_activation_max;
  TF_LITE_ENSURE_STATUS(ComputeDepthMultiplier(context, input, filter,
                                               &op_params.depth_multiplier));
  if (kernel_type == kReference) {
    reference_ops::DepthwiseConv(
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
        GetTensorShape(filter), GetTensorData<uint8_t>(filter),
        GetTensorShape(bias), GetTensorData<int32_t>(bias),
        GetTensorShape(output), GetTensorData<uint8_t>(output));
  } else {
    optimized_ops::DepthwiseConv<uint8, int32>(
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
        GetTensorShape(filter), GetTensorData<uint8_t>(filter),
        GetTensorShape(bias), GetTensorData<int32_t>(bias),
        GetTensorShape(output), GetTensorData<uint8_t>(output),
        CpuBackendContext::GetFromContext(context));
  }
  return kTfLiteOk;
}

template <KernelType kernel_type>
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
                                     TfLiteDepthwiseConvParams* params,
                                     OpData* data, const TfLiteTensor* input,
                                     const TfLiteTensor* filter,
                                     const TfLiteTensor* bias,
                                     TfLiteTensor* output) {
  DepthwiseParams op_params;
  op_params.padding_type = PaddingType::kSame;
  op_params.padding_values.width = data->padding.width;
  op_params.padding_values.height = data->padding.height;
  op_params.stride_width = params->stride_width;
  op_params.stride_height = params->stride_height;
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.input_offset = -input->params.zero_point;
  op_params.weights_offset = 0;
  op_params.output_offset = output->params.zero_point;
  op_params.quantized_activation_min = data->output_activation_min;
  op_params.quantized_activation_max = data->output_activation_max;
  TF_LITE_ENSURE_STATUS(ComputeDepthMultiplier(context, input, filter,
                                               &op_params.depth_multiplier));

  if (kernel_type == kReference) {
    reference_integer_ops::DepthwiseConvPerChannel(
        op_params, data->per_channel_output_multiplier.data(),
        data->per_channel_output_shift.data(), GetTensorShape(input),
        GetTensorData<int8>(input), GetTensorShape(filter),
        GetTensorData<int8>(filter), GetTensorShape(bias),
        GetTensorData<int32>(bias), GetTensorShape(output),
        GetTensorData<int8>(output));
  } else {
    optimized_integer_ops::DepthwiseConvPerChannel(
        op_params, data->per_channel_output_multiplier.data(),
        data->per_channel_output_shift.data(), GetTensorShape(input),
        GetTensorData<int8>(input), GetTensorShape(filter),
        GetTensorData<int8>(filter), GetTensorShape(bias),
        GetTensorData<int32>(bias), GetTensorShape(output),
        GetTensorData<int8>(output),
        CpuBackendContext::GetFromContext(context));
  }
  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedPerChannel16x8(
    const TfLiteDepthwiseConvParams* params, const OpData* data,
    const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output) {
  DepthwiseParams op_params;
  op_params.padding_type = PaddingType::kSame;
  op_params.padding_values.width = data->padding.width;
  op_params.padding_values.height = data->padding.height;
  op_params.stride_width = params->stride_width;
  op_params.stride_height = params->stride_height;
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.depth_multiplier = params->depth_multiplier;
  op_params.weights_offset = 0;
  op_params.quantized_activation_min = data->output_activation_min;
  op_params.quantized_activation_max = data->output_activation_max;

  reference_integer_ops::DepthwiseConvPerChannel(
      op_params, data->per_channel_output_multiplier.data(),
      data->per_channel_output_shift.data(), GetTensorShape(input),
      GetTensorData<int16>(input), GetTensorShape(filter),
      GetTensorData<int8>(filter), GetTensorShape(bias),
      GetTensorData<std::int64_t>(bias), GetTensorShape(output),
      GetTensorData<int16>(output));

  return kTfLiteOk;
}

template <KernelType kernel_type>
TfLiteStatus EvalHybridPerChannel(TfLiteContext* context, TfLiteNode* node,
                                  TfLiteDepthwiseConvParams* params,
                                  OpData* data, const TfLiteTensor* input,
                                  const TfLiteTensor* filter,
                                  const TfLiteTensor* bias,
                                  TfLiteTensor* output) {
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
                           &output_activation_max);
  const int batch_size = SizeOfDimension(input, 0);
  TF_LITE_ENSURE(context, batch_size != 0);
  const int input_size = NumElements(input) / batch_size;
  TfLiteTensor* input_quantized;
  TF_LITE_ENSURE_OK(context,
                    GetTemporarySafe(context, node, data->input_quantized_index,
                                     &input_quantized));
  int8_t* quantized_input_ptr_batch = input_quantized->data.int8;
  TfLiteTensor* scaling_factors_tensor;
  TF_LITE_ENSURE_OK(context,
                    GetTemporarySafe(context, node, data->scaling_factors_index,
                                     &scaling_factors_tensor));
  float* scaling_factors_ptr = GetTensorData<float>(scaling_factors_tensor);
  TfLiteTensor* input_offset_tensor;
  TF_LITE_ENSURE_OK(context,
                    GetTemporarySafe(context, node, data->input_offset_index,
                                     &input_offset_tensor));
  int32_t* input_offset_ptr = GetTensorData<int32_t>(input_offset_tensor);

  for (int b = 0; b < batch_size; ++b) {
    const int offset = b * input_size;
    tensor_utils::AsymmetricQuantizeFloats(
        GetTensorData<float>(input) + offset, input_size,
        quantized_input_ptr_batch + offset, &scaling_factors_ptr[b],
        &input_offset_ptr[b]);
  }

  DepthwiseParams op_params;
  op_params.padding_type = PaddingType::kSame;
  op_params.padding_values.width = data->padding.width;
  op_params.padding_values.height = data->padding.height;
  op_params.stride_width = params->stride_width;
  op_params.stride_height = params->stride_height;
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.depth_multiplier = params->depth_multiplier;

  op_params.weights_offset = 0;
  op_params.float_activation_min = output_activation_min;
  op_params.float_activation_max = output_activation_max;
  TF_LITE_ENSURE(context, filter->quantization.type != kTfLiteNoQuantization);
  const auto* affine_quantization =
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  if (kernel_type == kReference) {
    reference_integer_ops::DepthwiseConvHybridPerChannel(
        op_params, scaling_factors_ptr, GetTensorShape(input),
        quantized_input_ptr_batch, GetTensorShape(filter),
        GetTensorData<int8>(filter), GetTensorShape(bias),
        GetTensorData<float>(bias), GetTensorShape(output),
        GetTensorData<float>(output), affine_quantization->scale->data,
        input_offset_ptr);
  } else {
    optimized_integer_ops::DepthwiseConvHybridPerChannel(
        op_params, scaling_factors_ptr, GetTensorShape(input),
        quantized_input_ptr_batch, GetTensorShape(filter),
        GetTensorData<int8>(filter), GetTensorShape(bias),
        GetTensorData<float>(bias), GetTensorShape(output),
        GetTensorData<float>(output), affine_quantization->scale->data,
        input_offset_ptr, CpuBackendContext::GetFromContext(context));
  }

  return kTfLiteOk;
}

template <KernelType kernel_type, TfLiteType input_type>
TfLiteStatus EvalImpl(TfLiteContext* context, TfLiteNode* node) {
  // auto* params =
  //     reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data);
  TfLiteDepthwiseConvParams data_params;
  ExtractDepthConvParams(paddings, stride_width, stride_height, dilation_width_factor, dilation_height_factor, activation, &data_params);
  TfLiteDepthwiseConvParams* params = &data_params;

  OpData* data = reinterpret_cast<OpData*>(node->user_data);

  TfLiteTensor* output;
  TF_LITE_ENSURE_OK(context,
                    GetOutputSafe(context, node, kOutputTensor, &output));
  const TfLiteTensor* input;
  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));
  // const TfLiteTensor* filter;
  // TF_LITE_ENSURE_OK(context,
  //                   GetInputSafe(context, node, kFilterTensor, &filter));
  TfLiteTensor filter_tensor;
  TfLiteIntArray* filter_dims_data = TfLiteIntArrayCreate(filter_dims_size);
  int size_filter = 1;
  for (int i = 0; i < filter_dims_size; i++) {
    // std::cout << "dims_raw: " << dims_raw[i] << std::endl;
    filter_dims_data->data[i] = filter_dims_raw[i];
    size_filter *= filter_dims_raw[i];
  }
  size_t bytes_size_filter = sizeof(float) * size_filter;
  TfLiteQuantizationParams filter_params;
  filter_params.scale=scale_filter;
  filter_params.zero_point=zero_point_filter;

  TfLiteFloatArray* scale_array_filter = TfLiteFloatArrayCreate(1);
  scale_array_filter->data[0] = scale_filter;
  TfLiteIntArray* zero_point_array_filter = TfLiteIntArrayCreate(1);
  zero_point_array_filter->data[0] = zero_point_filter;

  TfLiteAffineQuantization quant_struct_filter;
  quant_struct_filter.scale = scale_array_filter;
  quant_struct_filter.zero_point = zero_point_array_filter;
  quant_struct_filter.quantized_dimension = 0;
  // float* filter_data;
  // filter_tensor_data = filter_raw;
  GetDepthConvTensor(filter_type, "filter", filter_dims_data, filter_params,
                       reinterpret_cast<char*>(filter_tensor_data),
                       &quant_struct_filter, bytes_size_filter, &filter_tensor);
  const TfLiteTensor* filter = &filter_tensor;
  // const TfLiteTensor* bias =
  //     (NumInputs(node) == 3) ? GetInput(context, node, kBiasTensor) : nullptr;
  TfLiteTensor bias_tensor;
  const TfLiteTensor* bias;
  if (has_conv_bias) {
    TfLiteIntArray* bias_dims_data = TfLiteIntArrayCreate(bias_dims_size);
    int size_bias = 1;
    for (int i = 0; i < bias_dims_size; i++) {
      // std::cout << "dims_raw: " << dims_raw[i] << std::endl;
      bias_dims_data->data[i] = bias_dims_raw[i];
      size_bias *= bias_dims_raw[i];
    }
    size_t bytes_size_bias = sizeof(float) * size_bias;
    TfLiteQuantizationParams bias_params;
    bias_params.scale=scale_bias;
    bias_params.zero_point=zero_point_bias;

    TfLiteFloatArray* scale_array_bias = TfLiteFloatArrayCreate(1);
    scale_array_bias->data[0] = scale_bias;
    TfLiteIntArray* zero_point_array_bias = TfLiteIntArrayCreate(1);
    zero_point_array_bias->data[0] = zero_point_bias;

    TfLiteAffineQuantization quant_struct_bias;
    quant_struct_bias.scale = scale_array_bias;
    quant_struct_bias.zero_point = zero_point_array_bias;
    quant_struct_bias.quantized_dimension = 0;
    
    // float* bias_data;
    // bias_tensor_data = bias_raw;
    GetDepthConvTensor(bias_type, "bias", bias_dims_data, bias_params,
                        reinterpret_cast<char*>(bias_tensor_data), 
                        &quant_struct_bias, bytes_size_bias, &bias_tensor);
    bias = &bias_tensor;
  } else {
    bias = nullptr;
  }

  TFLITE_DCHECK_EQ(input_type, input->type);

  switch (input_type) {  // Already know in/out types are same.
    case kTfLiteFloat32:
      if (filter->type == kTfLiteFloat32) {
        return EvalFloat<kernel_type>(context, node, params, data, input,
                                      filter, bias, output);
      } else if (filter->type == kTfLiteInt8) {
        return EvalHybridPerChannel<kernel_type>(context, node, params, data,
                                                 input, filter, bias, output);
      } else {
        TF_LITE_KERNEL_LOG(
            context, "Type %s with filter type %s not currently supported.",
            TfLiteTypeGetName(input->type), TfLiteTypeGetName(filter->type));
        return kTfLiteError;
      }
      break;
    case kTfLiteUInt8:
      return EvalQuantized<kernel_type>(context, node, params, data, input,
                                        filter, bias, output);
      break;
    case kTfLiteInt8:
      return EvalQuantizedPerChannel<kernel_type>(context, node, params, data,
                                                  input, filter, bias, output);
      break;
    case kTfLiteInt16:
      return EvalQuantizedPerChannel16x8(params, data, input, filter, bias,
                                         output);
      break;
    default:
      context->ReportError(context, "Type %d not currently supported.",
                           input->type);
      return kTfLiteError;
  }
}

template <KernelType kernel_type>
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
  const TfLiteTensor* input;
  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));

  switch (input->type) {  // Already know in/out types are same.
    case kTfLiteFloat32:
      return EvalImpl<kernel_type, kTfLiteFloat32>(context, node);
    case kTfLiteUInt8:
      return EvalImpl<kernel_type, kTfLiteUInt8>(context, node);
    case kTfLiteInt8:
      return EvalImpl<kernel_type, kTfLiteInt8>(context, node);
    case kTfLiteInt16:
      return EvalImpl<kernel_type, kTfLiteInt16>(context, node);
    default:
      context->ReportError(context, "Type %d not currently supported.",
                           input->type);
      return kTfLiteError;
  }
}

}  // namespace ixnywu

TfLiteRegistration* Register_ixnywu_REF() {
  static TfLiteRegistration r = {
      ixnywu::Init, ixnywu::Free, ixnywu::Prepare,
      ixnywu::Eval<ixnywu::kReference>};
  return &r;
}

TfLiteRegistration* Register_ixnywu_GENERIC_OPT() {
  static TfLiteRegistration r = {
      ixnywu::Init, ixnywu::Free, ixnywu::Prepare,
      ixnywu::Eval<ixnywu::kGenericOptimized>};
  return &r;
}

TfLiteRegistration* Register_ixnywu_NEON_OPT() {
  static TfLiteRegistration r = {
      ixnywu::Init, ixnywu::Free, ixnywu::Prepare,
      ixnywu::Eval<ixnywu::kNeonOptimized>};
  return &r;
}

TfLiteRegistration* Register_ixnywu_NEON_OPT_UINT8() {
  static TfLiteRegistration r = {
      ixnywu::Init, ixnywu::Free, ixnywu::Prepare,
      ixnywu::EvalImpl<ixnywu::kNeonOptimized, kTfLiteUInt8>};
  return &r;
}

TfLiteRegistration* Register_ixnywu() {
#ifdef USE_NEON
  return Register_ixnywu_NEON_OPT();
#else
  return Register_ixnywu_GENERIC_OPT();
#endif
}

// Warning: Clients using this variant are responsible for ensuring that their
// models only need the UINT8 type. TFLite's op registration mechanism doesn't
// yet allow for more nuanced registration mechanisms.
TfLiteRegistration* Register_ixnywu_UINT8() {
#ifdef USE_NEON
  return Register_ixnywu_NEON_OPT_UINT8();
#else
  return Register_ixnywu();
#endif
}

}  // namespace builtin
}  // namespace ops
}  // namespace tflite
