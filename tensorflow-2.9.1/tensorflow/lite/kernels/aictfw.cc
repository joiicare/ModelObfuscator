/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

#include "tensorflow/lite/kernels/internal/optimized/integer_ops/depthwise_conv.h"

#include <stddef.h>
#include <stdint.h>
#include <vector>

#include "tensorflow/lite/c/builtin_op_data.h"
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/kernels/cpu_backend_context.h"
#include "tensorflow/lite/kernels/internal/compatibility.h"
#include "tensorflow/lite/kernels/internal/optimized/cpu_check.h"
#include "tensorflow/lite/kernels/internal/optimized/depthwiseconv_multithread.h"
#include "tensorflow/lite/kernels/internal/optimized/integer_ops/depthwise_conv_hybrid.h"
#include "tensorflow/lite/kernels/internal/optimized/neon_check.h"
#include "tensorflow/lite/kernels/internal/quantization_util.h"
#include "tensorflow/lite/kernels/internal/reference/depthwiseconv_float.h"
#include "tensorflow/lite/kernels/internal/reference/depthwiseconv_uint8.h"
#include "tensorflow/lite/kernels/internal/reference/integer_ops/depthwise_conv.h"
#include "tensorflow/lite/kernels/internal/tensor.h"
#include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
#include "tensorflow/lite/kernels/internal/tensor_utils.h"
#include "tensorflow/lite/kernels/internal/types.h"
#include "tensorflow/lite/kernels/kernel_util.h"
#include "tensorflow/lite/kernels/padding.h"

namespace tflite {
namespace ops {
namespace custom {
namespace aictfw {

constexpr int kInputTensor = 0;
constexpr int kFilterTensor = 1;
constexpr int kBiasTensor = 2;
constexpr int kOutputTensor = 0;

// This file has three implementation of DepthwiseConv.
enum KernelType {
  kReference,
  kGenericOptimized,  // Neon-free
  kNeonOptimized,
};

const int kTensorNotAllocated = -1;

int8_t filter_r   aw[16800]={-2, 8, 14, 23, 17, 6, -9, -3, -1, -8, -3, -13, -58, 4, 3, -6, 7, 4, 3, 19, -11, -19, 9, 2, 5, -4, -11, 17, 1, 3, 9, 3, -14, -9, -26, -2, 9, -20, -4, 0, -63, -1, 10, -1, 6, 9, 23, 5, -51, -4, 2, -8, 8, 45, 9, 2, 3, -8, -5, 10, 7, -22, 11, -39, -9, -25, 36, -6, -6, -12, 4, 2, 9, -8, -1, -1, -44, -31, -41, -2, -12, 44, 5, 21, 11, 6, 8, -4, 13, -4, -4, -5, 3, -10, 0, 12, 14, 10, 10, -11, 16, -25, -4, 17, 2, 14, -9, 1, -30, -5, 67, 2, 33, 2, -13, 8, 25, 3, -5, -3, 2, -2, -15, 15, 5, -26, -3, 6, 9, 46, 5, 56, -1, -7, 4, -4, -7, 11, 1, 7, 4, 62, -6, 4, -3, 8, -19, 2, 9, -10, 31, -5, -1, 9, 3, 28, -8, 5, 22, 14, -2, -11, 7, 31, 6, 22, -5, -11, 6, 19, -1, -2, 0, 8, 7, -14, -5, -10, 8, 4, -10, 8, -41, 25, 11, 0, 10, 52, -1, 1, -13, 8, -34, 14, 49, 6, -5, 5, -4, 13, 26, -9, -1, -12, 18, -11, -5, 4, -18, -5, 69, 0, -1, -7, 45, 9, -35, 1, 15, -8, -24, 5, 8, 57, -4, 25, 0, 6, 10, -4, -68, 7, -2, 2, -2, -4, -67, 21, -2, -51, 7, -21, 9, 12, -7, 29, -18, 10, -2, 27, 13, -3, 46, -20, 1, -37, 16, -10, -4, 12, -2, -50, -24, 12, 5, -7, -2, 11, -22, -1, -2, -3, -3, 16, -1, -15, 14, -3, -7, -10, -6, 9, 10, 2, 16, -10, -10, 1, 38, 10, 4, -63, -19, 41, 9, 1, 26, 18, 21, 10, 13, -6, 2, -38, -12, 19, -15, 10, -32, 12, -14, 1, 5, -62, -11, 8, -3, 40, 32, 10, 10, 8, 4, 19, 1, -5, 7, -10, -34, 1, -33, -10, 4, -4, -11, 9, 0, -9, 19, -15, -9, 6, -19, -5, -12, 3, 13, 3, -22, 12, -2, -18, -42, -20, 7, 22, -4, 12, -3, -13, 11, -25, 5, 4, 8, 31, 1, 4, 0, 43, 3, 7, 11, -8, -7, 13, -1, -3, -18, 12, 3, -34, -10, -12, 27, 8, 8, -1, 2, 7, -3, 10, 8, 5, -6, 23, 2, -12, 9, -28, -8, -17, 11, 9, -7, -15, 10, -6, -6, 0, 11, 2, -1, 4, 6, -5, -27, 2, -3, -32, 24, -3, -20, -9, 15, 30, 19, -20, -13, 2, -9, 10, 11, -36, 9, -21, 38, -4, 25, 28, 4, -18, 3, -3, 5, 17, -16, -9, 22, -10, -8, 7, -24, -27, 4, -20, -5, 9, 15, -3, -12, -5, 7, 5, 16, -50, -12, 0, -4, -12, -3, -6, 6, 12, 3, 86, 31, -39, 28, 6, 4, 5, -17, 1, -21, 3, -10, 6, 1, 0, -2, -4, -3, -21, 13, 49, 2, 26, -1, -19, 31, -6, 32, 18, 19, 3, 14, -2, -11, 39, 3, -2, 20, 23, -5, -1, 30, 3, -13, 20, 73, 3, 18, -4, -15, 7, -18, 4, 1, 24, 1, -22, 1, 20, -5, 29, 14, -28, 23, 6, -4, 2, -1, 7, 0, 5, -2, 14, -2, -3, 1, 1, 8, -6, -9, -7, 0, -62, -7, 6, -4, 7, -13, 2, 14, 8, 34, 10, 34, -1, 12, 3, 0, 21, 0, 16, 12, 38, -23, -24, 1, 8, 2, -2, -3, 26, -21, -4, 5, -8, -4, -2, -14, -18, -1, 3, 4, -18, -1, 3, -9, 1, -4, -3, -64, 2, 29, 0, 47, -2, -17, 5, 2, -37, 3, 14, -37, 33, -2, -26, -3, -10, 15, 3, 4, -6, 2, 1, 19, -3, 8, -3, -5, 16, -5, 7, 18, -38, 14, 1, -7, -5, -25, 36, -7, -56, 7, 5, 24, 1, 7, 4, -6, -50, -5, 2, 9, 0, -13, -8, -3, -21, -3, -17, 27, 11, -6, -2, 2, -6, 0, 1, 6, 22, -21, 34, 0, -6, -4, -1, 3, -9, 2, -7, 79, 19, 9, 10, 7, 7, 9, 23, -15, -25, -3, 12, 11, -9, 12, 24, -4, 6, -19, 14, -31, -9, -10, 3, 6, -6, 4, -4, -29, 1, 41, 0, -7, 2, -33, 2, 1, 5, -1, -5, 1, 67, 0, 28, -4, -32, 1, -19, 4, -13, -1, -32, 18, -16, 34, -2, -3, -3, 5, 1, 11, 18, -6, 0, 7, 15, -21, -1, 0, 20, -13, 51, 10, 3, -5, 11, -4, -3, -3, -2, -3, 6, 2, 3, 29, -27, 12, 6, 20, -18, -4, -2, 0, 9, -8, -3, -24, -3, 46, -2, 32, 1, -2, 13, 61, -8, -1, -2, 15, -3, -11, 24, -3, 20, -2, -20, 21, 22, -4, 30, 3, -26, 26, -21, -22, 12, 5, 9, 0, 35, -5, -6, -4, -9, -21, -3, 0, 12, 17, 2, 23, -18, -7, 0, -1, 7, 7, -10, 12, -10, 5, 40, 4, -9, 25, -16, 4, 29, 11, 4, -2, 10, -31, -2, -17, 11, 0, -12, 4, -2, 61, 9, 8, 2, 13, 18, -3, 11, -31, 6, -16, 9, 40, 12, -24, -5, 4, 0, 3, 61, 3, -19, -3, -1, -14, 1, -62, 1, 27, 0, 24, -2, 72, 1, 18, -15, 15, 10, -26, -4, 12, 25, 10, 10, -3, 8, 16, 8, -67, 2, 29, -2, -12, 13, -21, 5, -14, -25, -4, 23, -1, 7, -86, 16, 18, 7, 7, 3, 3, -4, 43, -11, 0, -42, 22, -19, -2, 13, -3, 38, -18, -1, 7, -8, -14, 0, 6, -30, 3, 6, -5, 5, 4, -13, 4, -15, 2, -31, 8, 7, 7, 24, -8, 55, -13, -32, -7, 19, 4, -57, 9, -36, 0, 3, 73, 26, -2, 23, 6, 18, 7, 86, 6, -1, -31, 2, 5, 2, 1, 2, -14, -54, -3, 14, -9, 35, 4, 10, 4, -7, 12, 29, 0, 9, 9, -7, -43, 8, -7, -27, 7, 6, -7, -35, 1, 0, 5, 13, 23, 22, -11, 10, 10, -7, 4, 5, -19, 10, 6, -5, 20, -41, 5, 6, 8, 21, -5, 11, -17, 9, 7, -6, -5, 39, -10, 9, 3, 18, 15, 15, -4, -7, -17, 21, 2, -24, -5, 21, 3, 5, -4, -8, 46, -6, 10, 5, -14, 3, -5, 9, 28, 8, -13, 22, 24, -68, 7, -10, 1, -8, -10, -7, -4, -8, 6, -33, 3, 1, 27, 2, -4, 5, -21, -5, -6, 86, -31, -50, 32, -18, -11, 11, 27, 52, -4, -28, -36, 3, -22, -1, 41, 18, 6, 0, -24, 0, -1, -8, 16, -14, -3, 7, 7, -9, -5, -24, -3, 20, -9, -10, -12, -9, -1, 10, -6, 39, 15, -1, -9, 19, 0, 3, 8, -61, 27, 1, -5, -13, 2, 4, 11, 9, 11, 65, 20, -77, 38, 6, -5, -31, -29, 1, -21, -1, 17, 25, 19, -1, -1, -5, -3, -15, 23, 14, 3, 4, 5, -23, 29, -4, -1, 11, 33, 6, 11, -24, -74, 11, -3, -6, 6, 14, -5, -2, 46, 24, -16, 15, -11, 7, 6, 0, -7, 0, -12, 8, 2, 30, -12, -18, 4, -6, -5, 37, 13, -49, 24, 6, 22, 0, -15, 10, 3, 1, 7, 3, 7, 2, -14, -7, 0, 4, -10, -12, 0, -81, 28, 8, 15, 4, 7, 3, 45, 2, -2, -1, 60, -4, 28, -15, -10, 17, 4, 18, 11, 7, -1, -2, 25, 13, 8, 1, -13, 13, 35, 5, 9, -5, 1, 0, 8, -37, -12, 4, 14, -20, -5, 4, -19, -1, -7, 7, -60, 4, 21, -6, 9, -8, 9, 43, -12, -26, 6, -6, -6, 26, 15, -35, 7, 1, 32, 6, 6, 5, 19, -6, 6, 5, -4, 15, -5, 18, -2, -11, -15, -16, 36, 11, -1, 4, -27, 14, 0, -39, 10, -8, 24, 4, 30, -2, -10, -29, -3, 2, 1, 3, -20, 0, -7, -7, -12, -14, 59, -13, 34, 3, -4, -13, -2, 14, 8, 31, -2, 29, 26, -8, -6, 12, -4, 6, -5, -35, 87, 27, 21, 35, -7, 20, 8, 21, 2, -29, 2, 32, -10, -12, 28, 31, 0, -2, 11, 17, -54, -25, 17, 13, 6, -54, 6, 10, -37, 14, 66, 2, 14, 11, -69, 0, 10, -14, -4, 49, -15, 127, -6, 5, -19, 37, -13, -34, 26, -59, -31, 31, 40, -35, 44, -2, 2, 3, 18, -8, 24, 25, -2, -22, 22, 127, -54, 2, 6, 23, -51, 127, 2, -26, 5, -4, 7, 1, -4, 8, -2, -2, 4, -1, 45, -17, 16, -2, -5, -23, -24, -21, 30, 6, -22, 8, -25, 31, 90, -14, 57, 1, -1, 21, 86, 38, -2, 3, 35, -10, 3, 22, -1, 43, 5, -15, 21, -7, 4, 62, 0, -35, -25, -24, 3, 24, 4, 12, -7, 47, -4, -11, -6, -24, 0, -13, 7, -4, 13, 10, 50, -23, -21, -16, -26, 22, -11, 18, 25, 17, -5, 57, -10, -46, 17, -14, 10, 67, 6, 1, -15, 0, -2, 7, -20, 4, -17, -5, 15, -22, 127, -4, 10, 6, 44, -74, -7, 8, 108, 3, 37, 21, 28, 59, -40, 1, 9, 14, 3, -82, 1, -14, 1, -11, -21, 47, -71, -1, 2, -55, 3, -13, 78, 1, 112, -44, 16, -5, 8, -3, -4, 1, 11, 69, 12, 16, 47, 34, -90, -7, 42, -1, -8, 32, 15, -15, 5, 14, -16, 67, 1, 9, 12, -5, 31, 10, 9, -35, -7, -13, -23, -13, 1, -71, 10, -9, -7, 43, -6, -74, -19, 15, -3, 16, -21, 9, -12, -38, -12, 20, -3, 15, 7, 105, -17, -21, -4, 23, 4, 3, 9, 0, -20, 107, -8, -53, 15, 14, -6, -76, -10, 52, -12, 14, 127, 58, -11, 19, 5, 1, 4, 48, -3, -4, -66, -7, -17, 14, -4, 11, 5, -122, 4, 27, -3, 41, -22, 19, 2, -3, 3, 57, -8, 20, 29, -5, -56, 9, -37, -31, 18, -5, -22, -24, -5, -31, 51, -8, 24, 42, -50, 16, -26, 4, -31, -3, -31, 11, -1, -45, 115, -35, 32, 70, 13, 14, -1, -2, -19, 4, -3, -32, -5, 88, -18, 25, 0, 36, 31, 6, -23, -10, -35, 41, 52, -35, -18, 38, -10, -49, -28, 2, 69, 33, 41, 15, -30, -15, -5, 12, 23, 2, -27, 36, 50, -76, 19, -9, 20, -17, 7, 7, 12, -12, -127, -77, 9, -4, 127, 19, -7, 8, -96, -11, -28, 93, -36, -46, 102, -45, -6, -16, 3, 35, 6, -42, -50, 2, -59, -7, 3, 24, 19, -11, -30, -5, 17, -20, 1, -10, -7, 17, 11, 4, 23, -38, 14, 18, -14, -4, 9, -30, 0, -13, 66, 37, -15, -19, -6, -15, 10, 16, -8, -75, 73, 11, -25, -11, -1, 6, -4, -15, 22, 84, 39, -93, 48, 52, -6, -50, -28, -5, -62, 0, -1, 44, -1, -1, 3, 12, -9, 85, 48, -21, 17, -6, -7, -11, 36, -7, -20, 127, 35, 5, -36, -36, -127, 38, 5, 6, -5, 18, -1, 1, 85, 57, -27, 24, -16, 14, 3, -4, -61, 0, -29, 13, 16, -4, 2, 5, 3, -74, -3, 85, 54, -74, 34, -3, 16, 1, -60, 4, 19, -6, -1, -20, -18, 6, 17, -2, 0, -41, 3, -12, 23, -117, 36, 19, 27, 18, -5, -13, 91, -6, 13, 16, 97, -1, 30, 4, -53, 16, 2, 25, 83, 44, 11, 13, 81, 14, 12, 3, 23, -25, 56, 71, 32, -11, 13, -2, 18, 11, 3, 5, 25, -27, -2, -6, 18, -1, -7, 5, -54, -7, 63, -18, -16, -4, 38, 61, -1, -28, 13, 31, 34, 13, 15, -30, 7, 4, 48, -2, 7, -14, 22, -3, -32, 12, 9, 67, 13, 8, 3, -35, -13, -9, 39, 7, -4, 0, 0, 16, -3, -46, 2, -10, -25, -12, 87, -3, -16, 7, -6, -4, -1, -5, 13, 59, -6, -3, -23, -21, 127, -24, 28, -15, -9, -1, 1, 8, 6, 21, -16, 28, 1, -9, -3, 2, -3, -14, 0, -2, 75, 22, 12, 3, 5, 5, 6, 24, 11, -18, 2, 14, 11, -8, 9, 22, -3, 2, -14, 15, -22, -12, -18, 2, 7, -17, 2, 2, 8, 4, 33, 3, -14, 7, -25, 0, -7, 3, 0, -5, -3, 80, -4, -31, 1, -18, 1, -16, 2, -17, 0, -7, 23, -26, 43, -8, -3, -2, 6, -2, 6, 15, -5, -2, 4, 13, -22, -2, 4, 26, -13, 59, 13, -5, 0, 7, -2, 1, -1, -4, -4, 36, 0, 5, 26, -34, 12, 1, 21, -5, -6, -1, 2, 9, 1, -1, -20, -8, 30, 7, 20, 0, 0, 13, 55, -15, -1, -3, 21, 0, -6, 23, -1, 33, -2, -13, 16, -23, -5, 17, -2, -24, -15, -13, -21, 14, 3, 6, 0, 37, -4, -6, -9, -5, -26, 1, 2, -6, 21, 4, 25, 0, -7, 8, -13, 8, 15, -33, 18, -11, -1, 39, 8, -12, 18, -15, 3, 33, 8, 0, -6, 5, -25, 4, -19, 10, 1, -9, 3, -1, 80, 2, 3, 2, 19, 23, -2, 13, -29, 8, -2, 3, -16, 27, -28, -8, 8, -3, 5, 35, 0, -10, 0, -15, -8, -4, -67, -3, -29, 5, 18, -2, 80, 3, -14, -12, 16, 3, -32, -4, 20, 37, 8, 7, -2, 11, 18, 11, -61, -5, 32, 0, 8, 12, 34, -10, 4, 13, -2, 38, 2, 6, -78, -7, 14, 11, -12, 19, 10, -5, -43, -1, 4, -42, 9, -26, -3, 14, -5, 35, -17, 7, 6, -18, -12, 6, 13, -4, -1, -3, -5, -14, -1, -15, 2, -14, 3, 37, 6, 9, 2, 17, -16, 94, -12, -46, -12, 23, 7, -45, 4, -27, 11, 3, 76, 24, -2, 15, 8, 16, -9, 51, -12, -4, -39, 5, 7, -4, 3, 2, -9, -59, 5, 16, -5, 44, 1, 13, 6, -11, 8, 35, -2, 7, 11, -7, -46, 1, -16, -23, 10, 6, -6, -24, -4, -13, 7, 19, 20, 20, -13, 6, -4, -9, 1, 9, -23, 14, -2, -1, 32, 31, -1, -3, 3, 19, 2, 8, -19, 12, -8, -7, -1, 45, -9, 9, 3, 2, 17, 14, -9, -14, -17, 27, 2, -5, -10, 16, 7, -6, -7, -9, 47, -4, 9, 8, -15, 7, -6, 13, 25, -2, -6, 7, 22, -67, 11, -9, -5, -10, -15, -1, -3, -8, 6, -36, 2, 1, 13, -3, -7, 3, -20, -4, 13, 89, -34, 51, 30, -16, -10, 16, 30, 32, 4, -27, -22, 1, -25, -5, 38, -9, 5, 4, -9, -1, -1, -4, 22, -9, -4, 5, 4, 6, -12, -14, 1, 15, -14, -6, -14, -16, -4, -6, -29, 42, 22, -4, -8, 17, -1, 2, -27, -58, 23, 2, -11, 17, 1, 9, -4, -16, 14, 77, 17, -62, 30, 14, -6, -35, -25, 3, -20, -1, 19, 16, 14, 2, 1, -7, -2, -18, 21, 3, 8, -7, 7, 33, 35, -1, 5, 15, 28, 6, 10, -27, -78, 12, 3, -8, -10, 13, -8, 4, 40, 16, -18, 28, -5, 9, -1, -3, -1, 2, -18, 9, 5, 28, -8, 6, 3, 0, -1, 32, 16, -50, 27, 9, 13, -1, -22, 12, -2, 6, -4, 7, 8, -1, -11, -6, -5, -4, -2, -3, -5, -85, 36, 11, 23, -2, 4, 9, 47, 6, 9, 4, 49, -1, 27, -17, -19, -2, 3, 25, 5, 16, -2, -2, 23, 10, 6, 1, -11, -31, 40, 3, 9, -6, -2, 0, -9, -9, -2, 3, 16, -15, -3, 0, -10, -3, -6, -1, -58, 1, 19, -3, -16, -4, 11, 37, -11, -27, 3, 5, -6, -19, 11, -34, 9, 4, 34, -1, 4, 7, 20, -4, 2, 5, 4, 16, 1, -38, 4, -8, -17, -16, 48, 10, -4, 4, 21, 10, -2, 27, 11, -11, -5, -1, 15, 1, -3, 42, -5, 1, 4, -2, 21, 6, -9, 29, -14, 5, 58, -4, 19, 3, -2, -10, -2, 14, 1, 11, 5, 19, 14, 5, -14, 0, -4, -13, 0, -11, 13, 7, 4, 1, 7, 5, 0, 16, 29, -15, -3, 2, 5, -4, -15, 20, -5, 3, 7, 6, -5, -9, -30, -1, 7, -11, -3, 1, 58, 5, 18, 2, -2, 11, 13, 26, -51, 1, 0, 0, 10, 25, -10, -35, -2, -4, -2, -1, 1, -24, 10, -39, 0, -16, 34, -6, -7, -18, 4, 3, 8, 8, 0, 1, -47, -22, -26, -3, -8, 32, 2, 31, 10, 1, 3, -8, 12, -4, -3, -6, 6, -17, -1, 15, 20, 10, 0, -10, 22, 12, 1, -10, -20, 12, 42, 1, -26, -18, 74, 0, 34, 2, -13, 9, 54, -14, -3, -3, 8, -6, -12, 17, -2, -27, -4, 3, 23, -25, 5, 42, 4, -10, -13, -10, -9, 9, 2, 3, -1, 55, -8, 6, -3, 4, -6, 0, 5, 17, 29, -12, -1, 12, 8, 28, -7, 6, 17, 23, 9, -9, 3, 35, 4, 17, -7, -11, 4, 27, 2, 0, 4, 3, -4, -10, -8, -9, -1, -6, -9, 8, -74, 29, 22, 4, 10, 51, -2, -5, -13, 7, -35, 18, -29, 2, -4, 2, -1, 4, 14, 36, -1, 33, -17, 29, -9, 12, -16, 1, -70, 0, -2, -10, 23, 7, 45, 1, 18, 1, 0, -1, 6, 67, 7, 12, -3, 6, 9, 0, -45, 1, 2, 2, 20, 0, 26, -51, -11, 10, 5, -20, 10, 9, -13, -23, -14, 6, -2, 31, 5, -2, -24, 3, 0, -9, 27, -9, -3, 13, 1, -50, -18, 5, 4, -11, -1, 6, 14, -6, 3, 52, -6, 17, 9, -12, 16, -11, -6, -7, -6, 8, 7, 2, -13, -17, -12, 8, -30, 15, -9, -47, 14, -34, -14, 6, 30, 20, -5, 11, 11, -1, 10, -39, 16, -16, -6, 7, 28, 6, -14, 2, -6, -63, 16, 2, -5, 50, 35, 3, 12, 8, 6, 20, 2, -4, 11, -10, -31, 6, -33, -15, 5, -3, -15, 9, 3, -16, 14, -9, -11, 9, -25, -2, 12, -6, 14, 0, -13, 8, 3, -29, -38, 28, 3, 20, -2, 12, -1, -8, 16, -16, -9, 0, 2, 21, 0, 3, -2, -13, 1, 11, 4, -10, -7, 4, -2, -4, -4, 13, 4, -24, -7, -8, 29, 10, 7, -9, 4, 5, -3, 6, 13, -16, -5, 11, 7, -21, 4, -29, -3, -17, 8, 7, -7, -15, 7, -10, -5, 1, 16, 11, 1, 5, -8, -5, 9, -7, -4, 46, 26, -8, -12, -10, 7, 40, 16, -17, 2, 4, -8, 1, 15, -55, 14, 13, 30, -4, 19, 27, 9, -23, 0, -3, 11, -5, -15, -5, 14, -11, -10, -1, -34, -33, 5, 14, 42, 1, 31, -7, -10, 1, 9, 2, -25, -34, -12, 4, -7, 14, -4, 14, -18, -5, 5, 70, 25, -53, 25, 9, 6, 5, -17, -2, -12, 1, -5, 7, 8, 0, -3, -2, 2, -20, 12, 54, 5, -1, 3, 30, 23, -8, 28, 17, 28, 2, 11, -6, -15, 43, 3, -5, 2, 22, -2, -5, 30, 11, -11, 1, 0, -3, -9, -1, -14, 8, -14, 11, 0, 31, -1, 17, 3, 21, -4, 28, 6, -24, 20, 7, -4, 1, 9, 6, 1, -4, -1, 15, -5, -2, 6, -3, 5, -5, -8, -5, 4, -64, -6, 3, 7, 7, 0, 2, 11, 9, 23, 7, 50, -3, 14, -8, -5, 3, -1, 14, 24, 39, 27, -19, 5, 9, 2, 2, -7, -25, -5, 4, 8, -11, 0, -3, 30, -54, 2, 4, 5, -21, -2, 1, -3, 2, -4, -6, -63, -2, 27, -2, -20, 0, -21, 6, -2, -27, 5, 8, -37, -2, -5, -19, -5, -3, 13, 11, 4, -5, 4, -1, 23, -3, 10, -3, -7, -12, -14, 6, 14, -22, 6, 5, -9, -2, 3, 18, -4, 31, 7, 0, 0, 3, 7, 4, -2, 50, -14, 3, 7, 4, -2, -2, -6, 25, -6, -3, 28, 8, -2, -4, 3, -5, -2, 1, 6, 0, 21, -35, 2, 0, 18, 5, 6, 16, 0, -56, 18, -29, -4, -6, 3, 8, 10, 9, -42, -10, 12, -11, 2, -6, 5, 27, -2, 3, 44, 33, -13, -1, 13, -3, 4, -28, -6, 9, -51, -6, 13, -1, -8, 7, 49, 13, -58, 3, 2, -9, 10, 67, 16, 11, -4, -25, 1, 1, 11, -8, -4, -8, 32, -32, 37, 2, -2, 2, 7, 0, 1, -6, -3, 12, -26, -11, -20, -1, -20, 7, -20, 38, 10, 27, 1, -7, 9, 18, -4, -1, 9, 23, -1, 7, 16, 35, 24, -8, 57, -24, 8, 14, 14, 9, -6, -5, -31, 1, 21, -8, 15, 0, 3, 8, 103, -6, -2, 4, -9, -5, -10, -20, 3, 15, 1, -2, 0, 23, 18, 16, -3, -13, 12, 45, -15, 9, -34, 4, 2, 6, -5, 15, -10, 0, 13, -5, 23, -7, -2, 9, -25, 41, -4, 14, 2, 7, 11, 22, 18, -8, 5, 20, 8, 21, 18, -13, 8, 56, -2, 7, 5, 1, 29, 0, 20, 0, 6, -11, 4, 10, 35, 31, 19, 5, -5, 49, 3, -19, 5, 0, -42, -8, 58, 8, 3, 0, -1, 8, 5, 4, 10, -53, 17, -30, -11, 10, -51, 1, 78, -10, 0, 0, 86, 8, 107, -19, 24, -19, 104, -15, 8, 75, -13, 19, 23, 1, 9, 14, -86, 1, -8, 1, 4, 7, -46, 19, 19, -47, 15, 41, 11, 2, -25, 38, -42, 2, 5, 7, -8, 1, 51, -13, -5, -13, 2, -4, -2, -12, 0, 50, -15, 0, 6, -82, -19, 14, -31, -8, 0, -9, -1, -4, -7, 3, -35, -19, -7, 23, 9, 7, 6, -29, -24, 59, -2, -48, 50, 4, 12, -43, -38, 9, 18, 10, 71, 24, 20, 5, 4, 1, 27, -37, -19, 38, -35, -3, -63, -9, 2, 9, 7, -82, -9, -3, -6, 24, 26, -8, 5, 14, 5, -12, -1, 6, -1, -3, -40, 6, -39, -7, 1, 3, -19, 37, 13, -2, 42, -54, -13, -2, -8, 7, -5, 7, 3, 5, 20, 1, -14, -17, 24, -63, -6, -8, -1, -11, -13, -17, -14, 5, 2, 25, 6, 44, -3, 8, 1, 59, 10, 19, 9, 0, -10, -15, -14, -3, -4, -6, -4, -36, 14, -52, 14, -2, -10, -2, -9, 10, -6, 4, -1, 10, -11, -3, 21, -87, 2, 29, -12, -9, 9, -2, 5, 6, -11, -9, -6, 4, 14, 11, -3, 6, -26, -4, -29, -22, -16, -35, -3, -10, -2, -3, 25, 11, 21, -13, -6, 3, -14, 9, -15, 17, 5, -29, 48, -7, 9, 35, 9, -21, -4, 0, 19, 42, -7, -35, -9, -11, -7, -2, 24, -12, 4, -37, 7, -30, 25, 0, 6, 29, 7, -3, 29, -57, -5, 6, -1, -9, -2, -5, 32, -2, 1, 52, 18, -65, 32, 8, 21, -7, -23, 7, -21, 0, -36, 10, -21, -14, 0, -12, 5, -21, -12, 33, 8, 30, 13, -34, 14, -6, 38, -19, 31, 4, -12, -11, -66, 1, 4, 1, 23, -7, 2, 6, 42, 2, -17, 1, 67, 19, 29, -7, -26, 3, -29, 15, 6, 39, -2, -19, 0, -9, -5, 11, 28, 34, 34, 8, -14, 1, 13, 5, 15, 7, -3, 3, 10, 5, -17, 1, 19, -9, 19, 6, -6, -34, 16, -9, -3, 1, 12, 0, -2, 9, 6, 8, 64, -1, 27, 38, 25, 47, 3, -1, 7, 27, -57, -25, -3, 7, 4, -2, 4, 18, -34, -11, 16, -3, -18, -1, -11, 51, -22, -2, 0, 3, 12, 15, -14, -1, -1, 8, -49, 1, -1, -1, 38, 6, -46, 46, 0, -33, 4, 8, 17, 22, -4, 46, -2, 10, 13, 8, -2, 3, -7, -6, 26, 3, 3, -2, 2, 29, -29, -13, 42, -19, 48, 4, -2, 12, -34, 14, 4, -49, -6, -7, 42, 1, 3, 1, -14, -57, -3, 4, -2, 2, -27, -24, -2, -11, -21, 12, 47, 2, 71, 6, 6, -8, -2, 10, 1, -10, -28, -13, -16, -15, 26, 5, -31, 1, 3, -25, 77, -20, 21, 2, 15, 18, 15, 34, -67, -34, 15, 13, 20, -9, 33, 18, 0, 3, 8, 60, -8, -17, 25, 9, 17, -46, -1, 12, -40, -7, 60, 6, 21, 0, 17, 16, -41, 2, -2, 23, 6, 110, 32, 41, -5, 24, 2, -17, 11, 4, 16, 76, 40, -90, -44, -2, -4, 16, 20, 4, 1, 28, -5, 9, 31, -16, -68, -4, -29, 2, -87, 64, 8, 67, 10, -12, 12, 0, -10, -1, 11, 38, 4, 16, 38, -38, 8, -1, 50, -73, 10, 19, 60, 5, -50, -12, -61, 8, 26, -8, 48, 1, -16, 25, 53, 21, 4, 1, 11, -1, 7, 27, 0, 66, 11, -40, 11, 97, 12, 37, -12, -41, -12, -4, -32, 15, -6, 15, 7, -18, -4, 16, -13, -6, 24, -12, -11, -24, 39, 2, 8, 48, -16, 62, 0, -37, 19, 22, 27, 6, 4, 120, 9, 23, 30, -26, 8, 61, 9, 9, -4, -2, 43, 1, -9, -13, 3, -22, 0, 13, 73, 13, 0, 4, 10, 127, -11, 8, -49, 13, 19, 16, 89, 58, -11, -2, 32, -17, 25, 15, 5, -51, 24, -35, -39, 53, -15, 5, 51, -82, 12, 14, 111, 10, -43, -47, 35, -23, -11, -29, -43, 107, -8, 81, 0, 3, 25, 68, -83, 3, 2, -20, -6, 37, -11, 11, 21, -6, 12, -28, -1, 7, -58, 72, -3, 5, 9, -6, 33, -6, 116, -28, 11, -29, 0, 3, 2, 11, -3, 106, -24, -1, 3, -52, 23, 10, -35, -23, -4, -12, -3, 12, -2, 41, 49, -20, 5, -40, -11, 10, 6, 2, 23, 69, -29, -85, 75, 41, 38, -60, -46, 31, 35, 1, 64, 57, 55, 21, 9, 4, -15, 52, -33, 48, -34, 24, -77, -35, 6, 17, -39, -46, -34, 77, 7, 10, 38, 19, 22, 11, -37, -12, 5, 9, 30, -6, -87, 10, -34, -104, 3, 9, -11, 26, 17, -17, 84, -67, -2, 46, -67, 21, -35, 36, 15, 6, 39, 27, 19, -41, 127, -108, 31, 46, 2, 46, 0, -5, -22, 51, 18, -4, 15, 90, 0, 41, 3, 43, 27, 4, -32, -30, -24, 40, -1, -60, -7, 9, -1, -62, 11, -29, 54, 16, 4, 14, -23, 12, -22, 19, 11, 1, 4, 39, 27, -46, 19, 20, -28, -7, 4, 8, -9, 2, 12, -71, -14, -1, 13, 2, 0, 5, -47, -4, -19, 15, 41, -106, 1, -39, 31, -8, 48, 47, 3, -30, -42, -17, -49, 67, 35, 52, 11, -54, 66, -4, -2, 14, 20, 19, 6, 53, 22, 17, 0, -127, -31, 10, 27, -15, 26, -49, 5, -28, 54, 25, 41, -16, -6, 21, 3, -4, 74, -65, -20, -3, -7, -53, 1, -13, 31, -1, 31, 66, 30, -62, 60, 59, 2, -46, -23, 1, -62, 0, 4, 41, 9, -15, 4, -7, -7, -32, -1, 17, 33, 24, -67, -85, 42, -1, -22, -76, 64, 1, 37, -66, -60, 37, 16, -12, 18, 25, -6, 1, 38, 38, -36, 29, 50, 17, 23, -4, -86, 8, -37, 16, 6, -2, 21, -55, -2, -10, 5, 51, 59, -2, -2, 2, -6, -3, 25, 4, 11, 18, 5, -39, 5, 9, 17, 3, -19, -66, 25, 2, 8, -60, 54, 3, 54, 8, 24, 47, 8, 17, 10, 56, 55, -3, 0, 19, -47, 74, 6, 40, 7, 38, -23, -11, 12, 14, 10, -7, 23, 56, 15, 4, 38, -5, 34, -4, -12, -73, -41, 14, 11, -17, 23, 23, 35, -1, -5, 14, -65, 8, 36, 7, 26, -10, -13, 75, -9, -40, 10, 2, 12, 23, 12, -98, 14, -13, 65, 2, 10, -22, 4, 13, 39, 0, 10, 7, 24, 39, 11, 36, 13, -43, 59, 0, -1, 3, -83, 23, -3, -51, 10, -10, 0, 8, 14, -1, -15, -127, 1, 13, 1, 7, -25, 15, -2, -127, -13, 44, 27, -61, 127, 14, -7, -21, -1, 1, 17, -27, -29, 127, -10, -21, -44, 1, -47, 16, 16, 5, 106, 12, 61, 72, 24, 1, 49, 120, 16, -56, 55, 127, 127, -2, 81, -29, 8, 16, -104, 84, 26, -4, 82, 0, 34, -29, 23, 20, -54, 24, 127, 15, 127, 19, -114, -59, -18, 16, -3, 63, -6, 73, -29, -1, -53, 44, 56, -42, 56, -14, 127, 124, -12, -107, -109, 14, 4, 7, 7, 0, 41, 50, 11, -53, 127, 123, -86, -2, 127, 2, -74, -5, 20, -120, 3, -37, -6, -7, -30, 12, -36, 35, 5, 56, 127, -11, 49, 4, -71, -16, 12, -41, 23, 27, -100, 4, -76, 62, 51, 18, 102, 10, -50, 22, 39, 88, 9, -29, 127, 1, 40, 127, -15, 127, 27, -84, 20, 37, -55, 127, -16, -56, -24, -90, -8, -10, 48, 19, 13, 44, 15, -45, -3, 11, 120, 7, -1, -39, 117, -27, 127, -56, -65, 127, 4, -92, 46, 39, 16, 75, 20, 89, -59, -91, 27, -12, 37, 86, 48, 26, -58, -20, -48, 34, -71, -16, -38, -20, -14, 11, 52, 65, 0, 13, 107, -74, 9, 74, 63, 31, 46, 22, 36, 127, -32, 21, 127, -30, 31, 61, 15, -61, -23, -11, -94, 98, 90, 14, 41, -127, 74, 5, 6, 3, 42, -88, 42, 2, -109, -40, -119, -46, 10, 125, -43, 19, 127, 24, -85, 6, 20, -37, -40, 25, -94, -1, -5, 91, -1, 44, -7, 26, -16, -8, 127, 32, 70, -29, 88, 16, -3, 14, 43, -96, -3, -10, 12, 98, 5, 63, -46, 30, 22, 39, 127, 37, -22, -37, -9, 0, 17, 48, 44, 72, 127, -51, -32, -1, -75, 20, 13, 46, -9, 101, -51, -127, -15, 127, 18, -92, -30, 105, -31, 46, -13, 12, -21, 52, 21, -34, -15, 74, -3, -31, -5, 127, -59, -17, 16, 14, 55, -90, -19, 127, 23, 65, 88, 44, 10, -72, -47, 55, 6, 46, 127, 3, -53, 33, -42, -127, 26, -13, -31, 45, 32, -31, 127, -76, 127, 64, -108, 34, -56, 11, -20, 22, 37, 23, 75, -88, 53, -51, 70, 110, 71, 127, -24, 42, -13, 127, -2, -127, -48, 120, 2, 127, 4, -111, 9, -43, -127, -20, -63, 127, 50, 27, -53, 127, -20, -119, -5, 39, 127, 127, 43, 38, -11, -62, -8, 53, 127, 9, 68, 65, 27, -26, 23, -47, 39, 23, -27, -29, -18, 17, -53, -91, -54, -1, 29, 29, -7, 24, -70, 8, -23, 127, 127, -12, -33, -30, 127, -122, 127, 78, -52, -63, -75, -18, -16, 100, 127, 75, 27, -32, -66, 12, -21, 0, 127, 31, 13, 70, -49, -30, 39, -125, -56, 23, 127, -27, 74, -38, -1, -12, 68, 99, 73, -29, -38, 10, 21, 39, -49, -46, 83, 7, -32, -16, 17, 7, 6, 12, 127, 23, 127, -27, 100, 127, -38, -62, -17, -6, -112, -5, 34, 67, 73, 1, 16, 127, 17, 127, 127, 47, 127, -35, -101, 34, 127, 12, -28, 88, 23, 13, 69, -50, -32, 52, 52, -56, -40, 127, 34, 9, -45, 127, -23, 35, -31, 39, -22, 34, -127, 23, -60, 28, 31, -10, 127, -34, -16, -119, 12, 127, 127, -97, -115, 18, 24, 17, 78, -18, 23, 7, 28, -44, -21, 21, 26, -19, -57, -127, 52, 40, 10, -91, 78, -33, 127, 47, 85, 127, 127, 43, 16, 127, -3, 0, -115, -40, -24, 75, 18, 127, -14, 127, 4, -40, 127, 36, 21, -5, 127, -62, 127, 127, 27, 13, 127, 9, -13, 0, 47, 50, 57, -35, 127, -51, 127, 13, 1, 43, -64, -9, 127, 82, -90, -59, 127, 103, 1, -76, 22, 67, 61, -31, 20, -57, 32, 7, 127, 29, 30, -63, 62, 19, -68, 11, 6, 127, 127, 26, 67, 7, -29, -108, -4, 15, 20, 19, 7, 29, 1, -59, 36, 30, -59, 11, 50, -1, -2, 27, -15, 20, 22, 20, 4, 118, 4, -10, 8, 102, -110, -13, 58, 42, 0, -51, -7, -19, 1, -11, -28, -5, -19, -9, 41, 6, -28, 3, 2, -27, 82, -14, 15, -3, 16, 18, 21, 40, 49, -31, 47, 11, 18, -8, 22, 19, -2, 0, 13, 68, -6, -16, 34, 11, 12, -54, 1, 11, 115, 3, 69, 5, 22, -4, 10, 12, -45, 2, 1, 30, 8, 90, -24, -47, -3, 17, 7, -22, 9, -1, 15, 79, 37, -87, -45, -1, -6, 18, 17, 1, 7, 35, -5, 8, 31, -21, -75, 0, -25, 3, -85, 63, 9, 67, 4, -7, 8, -4, -7, 3, 12, 32, -2, 13, 37, -50, 7, 2, 51, 76, 12, -37, -102, 4, 62, -12, -58, 14, 17, -13, 65, 5, -13, 26, 64, 19, 1, 0, 12, -3, -1, 23, 3, 63, 15, -41, 9, -91, 9, 58, -8, -38, -4, -4, -33, 18, 1, 10, 6, -14, -2, 17, -12, -4, 36, -14, -9, 24, 36, -1, -2, -10, -13, 52, -49, -39, 18, 15, 31, 5, 12, 127, 4, 19, 35, -21, 10, 67, 12, 13, -5, -2, 37, 1, -19, -11, 2, -26, -1, 12, 61, 8, -4, 5, 9, 114, -10, 3, -48, 13, 20, 15, -82, 53, -9, -1, 33, -11, 20, 41, 4, 57, -24, 25, -53, 52, -17, 3, -48, -81, 6, 15, 127, 11, -4, -61, 35, 10, 11, -24, -42, 76, -9, 78, 2, 4, 23, 69, -87, 5, -4, -17, 21, 34, 44, -29, -21, 64, 11, -58, 6, 11, -42, -127, 4, 7, 4, -5, 43, -9, -113, 9, 11, -29, -9, 4, 2, 12, 0, 102, -22, 0, 5, -48, 20, 11, 27, -30, -5, 127, -3, 9, 3, 39, 51, -22, 3, 43, -4, 13, 4, -8, 25, 58, -22, -78, -63, 38, -55, -66, 38, 27, -43, 2, 56, 60, -65, 18, 11, 6, 7, 82, 25, -75, -29, 24, 99, -29, 6, 14, -34, -65, 25, 74, 6, -6, 42, 13, 17, 7, -40, -4, 5, 7, 25, -7, -79, 2, -41, -95, 2, 9, -18, 31, 14, -15, 86, -67, -3, 47, -67, 25, 22, 25, 22, 5, 48, 26, 16, -40, 119, 88, 31, 46, 18, 53, -1, 6, -23, 46, -27, -4, 12, 85, 4, 44, 1, -38, 26, 3, -28, -25, -16, 35, 0, 14, -5, 17, -1, -63, 11, -31, 58, 18, 2, 16, -15, 13, -20, 16, 10, -26, 8, 19, 30, -40, 17, 17, -17, -5, 1, 5, -7, 2, 18, -71, -14, 0, 39, 2, 3, 9, -48, -6, -6, 15, 42, 122, 7, -35, 31, -18, 41, 43, 3, -23, -41, -10, -45, 68, 45, 61, 13, 38, 57, -3, -2, 21, 23, 17, 1, 51, 23, -17, 11, -115, -20, 0, 26, -12, 42, -56, 15, 25, 14, 19, 40, -21, -10, 8, 1, -1, -103, -70, -23, -2, -15, 36, 2, 13, -24, -25, 29, 56, 28, -54, 64, 57, 7, -35, -20, -10, -70, 4, -4, 26, 9, -15, 3, -8, -5, -27, 1, 27, 42, -43, -61, 87, 48, -2, -18, -77, 62, 1, 32, -59, -48, 32, 16, -14, -10, 20, -1, 0, 48, 33, -33, 32, 9, 14, -49, -3, -105, 5, -31, 13, 13, 1, 26, 36, -2, -17, -1, 52, 53, 3, 6, 5, -9, -2, 37, 2, 6, -29, 10, -43, 5, 11, 23, 3, -16, -51, 14, 5, 3, -56, 39, -1, 51, 9, 19, 51, 21, 16, 17, 51, 62, -3, -12, 14, -37, 88, 5, 41, -1, 37, -5, -14, 16, 15, -1, -10, 26, -84, 22, 10, 38, -1, 35, -3, 35, -75, -42, 15, 7, -12, 22, 25, 35, 3, -7, 15, -65, 10, 40, 12, -30, -8, 0, 80, -8, -42, 11, -4, 13, -26, 15, -99, 14, -11, 67, 7, 7, -25, 4, 11, 36, 3, 2, 7, 20, -50, 12, 41, 14, -49, 60, -1, 0, 9, 40, 30, -6, 71, 11, -11, -23, 7, 3, -2, -15, 103, 2, 14, 1, 8, 22, 3, -2, 65, -14, 34, 33, -57, 124, 10, -8, -23, -3, 0, -3, -2, 19, -12, 7, -4, 7, 1, 6, 13, 0, -55, 11, -38, -6, 0, 4, 10, -1, 6, 38, -18, -4, -10, -5, -5, 8, 28, -2, 0, 41, 20, -6, 0, -9, 0, 5, -30, -6, 13, 57, -3, 14, 1, -11, 6, 70, 20, -61, 1, 6, -3, 13, 88, -32, -24, -6, -46, 3, 0, 10, -10, -8, -32, 33, -32, 36, 2, -3, -2, 10, 2, 1, -9, -1, 18, -19, -19, -28, 0, -28, 9, -16, 37, 3, 21, 8, -2, 9, 19, -3, -1, 10, 20, 0, 2, 11, 45, 20, -5, 49, 65, 5, -7, -38, 5, 51, -4, -28, -2, 34, -8, 7, -2, 5, 8, 91, 10, 0, 2, -9, -1, -9, -23, 2, 10, -3, -13, 1, -47, 15, 16, -3, -18, -25, 47, -13, 7, -32, 9, 6, 18, -5, 15, -4, -4, 10, -5, 23, 13, 8, 9, -21, -15, -6, 20, 6, 9, 8, 29, 20, -4, 2, 20, 7, 17, 17, -17, 12, 46, -3, 4, 6, -2, 40, -4, 19, 7, 1, -9, -4, 11, 59, 30, 11, 2, 1, 42, 1, -10, 2, 1, -51, -5, -29, 2, 8, -4, -1, 13, 5, -43, 11, 22, -13, 28, -15, 9, -50, 2, -29, -6, 1, 4, 81, 11, 52, -18, 23, 4, 99, -11, 10, 54, -16, 15, 25, 6, 14, 15, -97, 2, -11, 3, 30, 6, 38, -47, -17, 62, 15, 45, -4, 4, -12, -15, -42, 8, 19, -8, -13, 2, -42, 7, -6, -27, 7, -7, -2, -6, -1, 53, -21, 0, 11, -66, -22, 11, 32, -14, -3, 53, 0, 2, -11, 10, -32, -11, -2, -34, 10, 4, 10, -26, 27, 56, -7, -68, -49, 0, -17, -47, 25, 24, -22, 5, 61, 23, -33, 9, 1, 6, -20, -51, 24, -75, -41, -3, 49, 1, 3, 8, 18, -86, 11, 11, -4, 5, 26, -6, -2, 18, -2, -17, 1, 4, 1, -1, -40, 7, -36, -15, -2, 4, -15, 38, 9, 2, 46, -47, -15, -3, -5, 6, 18, 8, 3, 3, 14, 4, -16, -17, 30, 45, -3, -16, -13, -11, -8, -14, -15, -12, 5, 27, 12, 47, -2, 19, 0, -21, 10, 19, 8, 1, -16, -10, -8, 11, -9, -8, 1, -21, 9, -65, 1, 2, -4, 9, -16, 10, -5, 5, 7, -16, -10, 15, 25, -88, 6, 29, -15, -11, 14, -7, 5, -1, -7, -14, -3, 3, -3, 7, -5, 5, -27, -4, 14, -24, -15, 35, -4, -13, -2, -4, 37, 8, 16, -11, -9, 0, -13, 5, -22, 12, 6, 19, 40, -6, 11, 29, 6, -11, -2, -6, 23, -22, -11, -34, -5, -5, -9, -2, -2, -8, 6, 37, 13, -39, 14, -3, 3, 33, 3, 0, -55, -49, -16, 5, -8, 13, -1, 9, -21, 17, -2, 49, 18, -64, 30, 2, 21, -8, -28, -12, -36, 2, -34, -7, -24, -8, 1, -12, 0, -24, -13, 24, 12, -36, 2, 20, 13, -5, 24, -19, 35, 4, -1, -9, -67, 16, 6, 7, 0, -7, 2, 7, 43, 4, -19, 1, 13, 29, -40, -9, -26, 4, -20, 15, 7, 30, 3, 21, -1, -2, -5, 2, 38, 35, 28, 5, -8, -2, 16, 6, 13, -15, -8, -1, 6, 7, -30, 1, 21, -17, 18, 4, 1, -37, 16, -7, 2, 4, 11, 0, -4, 4, 7, 15, 45, 0, 23, 39, 21, 25, 4, -4, -7, 19, 41, -26, -3, 9, 2, -1, 1, -65, -37, -15, 15, -4, -18, -1, 20, 60, -21, -1, 2, -1, 7, 14, -12, 0, -1, 7, -46, 7, 11, -1, -17, 3, -47, 31, 0, -32, 5, 11, 13, -20, -1, 36, -8, 5, 14, 4, -4, -2, -8, -6, 24, 1, -2, -4, 4, -22, -13, -5, 50, -17, 29, 4, -3, 9, 14, 19, 8, 35, -7, -6, -42, 3, 0, 0, -12, 47, -3, 8, -1, 1, 11, -22, 1, 25, -20, -3, 54, -1, 54, 5, 3, -9, 1, 9, 4, 2, 48, -42, -1, -16, 71, 5, -21, 13, -1, -93, 99, -80, 11, 10, -8, 16, -17, -8, -75, -30, 23, 1, 1, -9, 17, 28, -1, 8, 61, 22, -22, -3, 51, -24, -7, -53, 5, 5, -85, 15, -18, 3, 0, 25, 87, 22, -62, -7, 2, 13, 14, 97, 45, 46, 8, 28, -14, 27, 26, -88, -21, 80, 41, -40, 30, -1, 0, 50, 13, -1, -4, 14, -7, 44, 5, 7, -49, -1, -8, 40, -47, 48, 7, 47, 29, -11, 11, 37, -4, 0, 17, 26, -9, 30, -6, 127, 13, -2, 122, -84, 6, 23, 29, 9, -15, 22, -33, 34, 45, -10, 20, 4, 31, 10, 120, 11, -2, -1, -9, -9, 5, -14, 2, 42, 5, -10, -6, -25, 13, 32, 13, -21, 44, 60, -5, 25, -56, 1, -9, 42, -2, 21, -16, -5, 64, -16, 44, -25, -23, 25, -17, 45, 0, -38, 25, 9, -7, 49, 28, -3, 5, 34, 50, 27, 42, -14, 7, 70, 6, -2, 0, -29, 55, 4, 32, 6, -8, -18, -11, -2, 92, 64, 21, 1, -11, -16, -10, 20, 26, -13, -12, -12, -30, 26, 14, 5, -5, 4, 11, 58, 2, -89, 25, -44, 11, 18, -53, 3, 85, -26, -1, -6, 88, 2, 57, -28, 24, -35, 124, -9, 8, 91, -4, 42, 45, -9, 25, 46, -127, 2, 8, 2, -18, 17, -73, 71, 32, -54, 2, 24, 48, 1, -66, -20, -21, 10, 16, 52, 3, -1, -119, -24, 1, -113, 35, 11, -6, 11, -5, -10, 19, 13, -2, -102, -4, 5, -49, 3, -20, -17, -9, 27, 16, 92, -58, -7, 4, 51, 7, 3, -5, -127, 18, 112, -6, -77, 43, 3, 51, -66, -38, 77, 40, 6, 89, 24, 40, 14, 9, 11, 70, 61, -34, 55, -72, -4, -72, 81, -12, 7, -10, -127, -17, 55, 11, 56, 39, -4, 1, 28, -13, -13, -2, 10, 1, -10, -28, 7, -86, -1, 4, 1, -20, 112, 12, 42, 46, -107, 7, 15, -18, 2, -19, 39, 26, 14, 56, 3, -21, -19, 65, -83, 17, 73, -31, -6, -14, -23, -17, 48, -12, 20, 31, 88, -2, 4, 5, 127, 23, 33, -31, 28, -13, -15, -15, -27, -18, -4, 4, 127, 57, 16, -13, -3, -5, 16, 2, 15, 11, -9, -2, 20, -8, 22, 37, -106, 1, 61, -32, -17, 64, 6, 2, 12, -6, -25, -14, 0, 11, 11, -4, 8, -121, -11, -71, -2, -1, -117, -23, -25, 3, -39, 0, 26, 40, -1, 3, 0, -36, -15, -43, 36, 10, -38, 76, -8, 70, 20, 21, -5, -6, 21, 32, 14, -6, -22, 16, -3, -1, 7, 40, 17, 0, -47, 66, -44, -24, -2, 3, 127, 3, 4, 39, -54, 50, 6, 10, -16, -3, -22, 28, 12, -5, 87, 3, -127, 55, 36, 27, -18, -21, 23, -61, 0, -107, -7, -38, -42, -2, 5, 0, -17, 2, 82, 16, 25, -33, -43, 1, -8, 62, 25, 45, 6, -4, 0, -48, 22, 4, -9, 45, -15, 0, -4, 72, 18, -36, 17, 127, 22, 65, -7, -27, -3, -29, 17, 13, 38, 5, -53, 2, -58, -4, 41, -33, 21, 34, 22, -46, 1, 126, 10, 20, 30, -1, -2, 8, 6, 36, -8, 18, -31, 78, 10, 2, -52, 24, -8, -2, 7, 2, -3, -9, 0, 20, 21, 68, -3, 43, 38, 45, 68, 4, -4, -10, 25, -73, 0, -19, 3, -19, -3, 22, 66, -22, -3, 34, -12, -20, 0, -29, 106, -26, -3, -8, 29, 16, 26, 16, 2, -5, 13, -68, 3, -10, 5, 127, 3, -42, 68, -11, -38, 10, 24, 19, 84, 6, 76, -8, -5, 18, 18, 5, 32, 3, 1, -4, -4, 3, 9, -11, -54, -8, -28, 74, -77, 69, -5, 1, 5, -60, 3, -13, -62, 1, -16, 91, -4, 27, 4, -20, -36, -18, 6, -5, -5, -42, -41, -5, -19, -31, 23, 44, -29, 72, -1, -5, -6, -1, 8, 15, -15, 14, 13, 21, -37, 127, 7, 18, 11, -2, 11, 95, -127, 46, -23, 21, 0, 20, 5, -127, -24, 60, -25, 15, 6, 9, -45, 2, -4, 54, 103, 26, -13, 82, 8, 29, -38, 14, 37, -106, -5, -30, 27, 74, 21, 127, 91, -84, 15, -14, 44, 28, 62, 127, 115, 77, 71, 72, 5, 60, 7, 54, 117, -21, -39, -126, 12, 0, 127, 0, -8, 48, 65, -5, 50, 68, -37, -67, 1, 65, 47, -71, 5, 20, 126, 81, -36, 34, 53, -17, 13, 44, 59, 19, 38, 0, -60, 40, -3, 127, -127, 32, 127, 48, 21, -31, 45, -78, 75, 89, -33, 124, 15, 31, 8, 29, 58, -3, -17, -3, 3, 38, -8, 30, 77, 46, -84, 11, -19, 65, 97, 6, -19, 127, 86, 114, -7, -28, 18, 11, 53, 2, 47, 2, 41, 12, 0, -24, -123, 22, 77, -39, 127, 1, -65, 127, -106, 35, 55, 58, 37, 21, 112, 32, 68, 127, -3, 32, 123, -51, 23, 20, -42, 117, 29, 43, 7, -11, -1, 29, 28, 81, 52, 11, 2, -32, 32, 7, 41, -57, 4, 57, -15, -4, 78, 83, 14, -19, 30, 61, 124, 14, -60, 127, -120, 42, 37, -9, 21, 126, -55, 8, 5, 25, 23, 55, -88, 55, -85, 114, -23, -127, 90, -10, 110, 73, 34, -10, 21, -100, 2, -62, -39, -11, 21, -32, 127, 127, -5, 18, 63, 62, 29, -124, -77, -24, 14, 72, -16, 36, 5, 21, -71, 28, -95, 44, 127, 2, -19, 5, 73, 24, 20, 15, 5, 47, 31, -80, -34, -12, -13, 17, 41, 27, 77, -16, -17, -39, -126, 18, 33, 32, -77, 41, 88, 15, -55, 115, 6, 85, -116, -80, 118, 127, 40, 20, 0, 127, 29, 25, -1, 125, 84, -96, 127, 27, 19, -118, -30, 17, 36, 61, -75, -127, 75, 78, 40, 66, -23, 24, 52, 61, -28, 9, 39, 16, 5, -54, 33, -11, 40, -9, -45, -32, 76, 41, 28, 65, -121, -25, 9, -111, 69, -102, 127, 83, 46, 127, 24, -3, -91, 36, -90, 58, 127, 58, -45, -55, 127, 7, 106, -116, 119, 46, 97, 8, 4, 18, -51, 23, -127, -114, 38, -8, -38, -48, -94, -38, -13, 3, 95, 127, 127, 3, -11, -45, 60, 43, 56, -8, 12, -35, 74, 26, 74, 16, 6, 27, 124, -29, 5, 97, 24, 37, 15, -11, -25, -15, -7, 7, 38, -4, 21, -46, -10, -127, -43, 14, -6, -18, -16, 55, -112, -1, 66, 36, 0, -20, 11, 2, 126, -14, 45, 17, -98, 97, -3, -62, 50, 10, 127, 25, 70, 40, 127, 29, -123, -77, -42, 17, -18, 101, 42, 19, -119, 72, -126, 82, 0, 42, 31, 27, 11, 127, -38, 98, -60, 27, -95, -2, -23, 85, 127, -31, 71, -39, -33, 120, 36, 56, 1, -12, 127, -103, 2, -88, 25, -78, -27, 16, 5, 23, 0, -18, 84, 63, 118, -90, 71, 35, 17, -28, -52, 35, 16, 20, 33, -24, 113, 35, -10, 19, -24, 0, 9, 14, -5, -26, 85, -64, 40, 127, 14, -83, 19, -67, 34, 50, 58, 32, -99, -10, -79, 9, 48, -45, 74, -127, 14, -37, 11, 101, -17, 45, 114, 13, -119, -14, 16, 38, -15, 36, -17, 127, 28, 5, -65, 82, -41, -4, 35, 57, 113, -29, 37, 39, 58, -16, 3, -127, 123, -127, 93, 22, -28, -42, 28, -92, 5, -20, 45, 5, -2, 22, 127, -17, -5, 18, 12, 16, 6, -81, 28, -3, 17, -71, 122, 8, 46, -1, 26, -8, 39, -96, 56, -25, 19, -70, -65, -24, 127, 21, -74, 7, 64, 55, 127, 13, 39, 34, -85, -31, 23, 16, 42, -69, 20, 127, 22, 23, -5, -15, -127, 38, 36, 127, -75, 127, 21, 14, 34, -127, 72, 6, -78, 16, 32, 125, 8, 81, -9, -1, -18, 20, 25, 20, 21, -50, -72, 18, 7, -4, 126, -57, -67, 101, 55, 4, -6, -3, 14, 127, -4, -127, 127, 13, -127, -4, 127, 127, 127, 127, 127, -35, -59, 127, -127, 127, -127, 127, 127, 12, -115, 127, -103, 50, 127, 127, -127, 127, 127, -127, -127, 127, -127, 127, 127, 127, 127, 127, 127, -71, 127, -70, 127, 87, 127, -125, 79, -127, 127, 127, 127, 127, -123, -6, 7, -27, 127, 127, -127, 127, 127, 54, 127, -127, -34, 1, 127, 127, 38, -127, 127, 127, 127, 127, -127, -55, -69, -127, 127, 117, -114, 127, -90, 127, -34, 127, -85, 127, -127, -127, 127, -127, 127, 127, 127, -13, -27, 127, 127, 28, 35, 127, -4, 61, 127, -82, -53, -53, 127, 127, 127, 26, 127, -127, -127, -88, 127, 127, -127, -21, 127, 127, -59, -49, 44, -127, -127, 127, 50, -127, 88, 26, 127, -56, -127, 72, -127, 127, 127, 127, 127, 127, -127, 127, 127, -3, 127, -127, 22, 127, 127, 15, -57, 58, -11, 85, 35, 127, 127, -127, 127, 127, 30, -127, 59, -76, 127, 127, 38, -127, 127, 127, 0, -60, 127, -127, 52, 48, 25, 127, 127, -20, 89, 29, 127, -127, -12, 127, 21, 100, 127, 127, 127, -11, -39, 127, 127, -101, 49, 127, 127, 127, -127, -13, -23, 6, -127, 127, 127, -107, 74, 127, 127, 12, 127, 47, -127, 127, -15, -88, 66, 61, -52, -77, -26, -127, 127, -46, -127, -66, 57, -127, -127, -127, -127, -127, -23, -82, 127, 127, 127, 127, 127, -109, 1, 39, 127, 127, -127, 127, 127, 33, 127, 127, -127, 29, 63, 127, -127, 127, -127, 127, 127, 127, 127, -1, 127, -27, -62, 127, -44, 127, 127, 127, 127, 122, -61, -127, -10, 15, 127, 127, 88, 127, -127, 127, -15, -19, -90, 23, -127, -44, 46, -21, 127, -4, -127, -32, 127, 127, -4, -42, -42, -65, -38, 127, -43, -27, -127, 127, 127, 127, -123, -5, -78, -127, 127, 127, 127, 127, -127, 53, -127, 127, 127, -28, 127, -127, 127, -38, 120, -60, -60, -127, 127, 127, -87, -72, -27, -37, -127, -113, -127, -3, 102, -127, 127, 106, 127, 127, -127, -47, -68, 127, -58, 127, 27, -84, 60, 56, 114, 23, -69, -127, -60, 127, -6, 127, -57, -127, -22, 51, -60, 65, -12, -89, 53, -127, -45, 127, -20, -72, 26, -19, 0, -127, 127, 82, -127, -73, 127, -11, 46, 127, 127, -127, 87, 127, -87, 127, 127, -120, 127, 65, 127, -55, 69, -19, 127, 66, 127, -127, 127, 50, 127, -15, 6, 4, 42, -127, 127, 25, -127, -10, 127, 127, 127, -96, 127, 127, 31, 45, 127, 127, -75, -127, 127, -127, 127, 102, -44, 127, -127, -127, 9, 127, 42, -127, -127, 122, -34, 127, 127, 127, -2, 127, -127, 127, 25, 127, 36, 127, 127, -57, 127, -67, 82, -127, -22, 127, -127, 7, -23, -77, -127, -22, 2, -127, -47, -127, 107, 127, -24, -127, 127, 127, 81, 32, 127, 127, 108, 127, 54, -80, 127, -64, -127, 58, 53, -37, 127, -127, -101, -127, 127, 118, -25, 116, 127, 127, -61, -127, -71, 127, 127, -127, -101, 127, 127, -32, 127, -18, 127, -19, 127, -127, 127, 127, 48, 19, -25, -127, -127, 127, 25, -55, 127, -61, 127, 127, 127, 122, -127, 127, 13, 127, 6, -74, 127, 127, -127, -21, 97, -30, 127, 127, -10, 127, -17, -10, 127, 127, 49, -102, 127, 127, 12, -15, 127, -69, -4, -78, 127, 127, 119, -91, 17, -36, -13, -47, 127, 127, 127, -80, -16, 35, -29, -127, 127, 6, 127, -127, -126, 127, 127, -127, -27, 51, -127, 0, 127, 127, 127, -127, 127, -123, 127, -54, -127, 116, 107, 127, -127, -127, 127, 127, -64, 127, -108, 127, 127, -27, 127, 127, 68, -127, 127, -10, 127, 127, -21, 12, -38, 127, 127, 19, -127, -108, 127, 127, 127, 47, 127, 127, -64, 127, 127, -70, 127, 127, 127, 127, 14, 127, 127, 127, 127, -72, -78, 127, 10, 127, 127, 13, 127, -56, 127, 127, 1, 127, 24, 14, -11, 8, 19, 27, -39, 114, 8, 15, 15, -2, 5, 87, -122, 45, -22, 20, 2, 16, -2, 109, -33, 34, -30, 10, 8, 13, -52, 1, -4, 49, 104, 34, -13, 90, 6, 24, -34, 18, 44, 127, 13, -39, 31, 76, 21, 119, 98, -60, 15, -14, 51, 27, 75, -96, -127, 80, 76, 61, 8, 73, 16, 57, 94, -13, -40, -127, 9, 1, 121, 6, -12, 42, 69, -3, 50, 71, -22, -60, -2, 64, 50, -70, -14, 21, 127, 53, -34, 29, 48, -18, 13, 47, 58, 23, 45, 1, -65, 37, -4, 111, 125, 34, -95, -127, 14, 26, 46, -83, 68, 110, -36, 127, 14, 24, 9, 38, 47, 1, -14, -12, 4, 30, -13, 31, 80, 44, -69, 10, 78, 65, 122, 6, -15, -96, 76, 127, 0, -12, 13, 13, 46, 1, 45, -1, 42, 28, 0, -27, 127, 20, 74, -41, -49, -3, -68, -111, -118, 33, 58, 53, 31, 19, 106, 27, 65, 126, 1, 37, 123, -50, 23, 18, -42, 127, 30, 43, 6, -9, -6, 26, 32, 84, 60, 3, 5, -26, 11, 9, 44, -52, 8, 72, -8, 29, 74, 87, 18, -19, 24, 61, 126, 18, 103, -73, 127, 42, 29, -9, 22, -127, -55, 5, 10, 14, 22, 54, -104, 52, 127, 108, -15, -124, 84, -11, 120, 86, 39, -15, 23, -90, 2, -70, -39, 10, 19, 76, -102, -116, 80, 19, 74, 86, 25, -127, 45, -16, 15, 71, -18, 44, 6, -7, 44, 33, -111, 48, 120, -3, -17, 3, 78, 20, 15, 12, 9, 49, 34, 127, -31, -12, 6, 15, 37, 36, 71, -23, -17, -36, 127, 19, 27, 33, -77, 40, 52, 17, -62, -127, 5, -127, -91, 127, 127, -93, 37, 16, 1, -89, 30, 25, 4, -127, 74, 127, -105, 28, 18, 127, -31, 19, 29, 52, -110, 102, 85, 77, 57, 62, -25, 27, 56, 62, -28, 8, 41, 19, 5, -49, 34, -18, 39, -11, -47, -26, 77, 38, 21, 68, -127, -26, 10, -127, 66, 127, 118, 80, 45, 114, 33, -8, -73, 44, 127, 64, 113, 51, -51, -59, 119, 12, 112, 127, 117, 48, 97, 7, 3, 14, -37, 22, -126, -96, 37, -6, -37, -54, 127, -31, -17, 4, 86, 122, 122, -8, -9, -37, 47, 55, 56, -11, 10, -32, -127, 27, 68, 10, 23, 26, 127, -31, 11, 127, 26, 37, 16, -10, -19, -14, -4, -3, 46, -10, 19, -55, -11, 127, -39, 5, 17, -19, -15, 55, -106, -5, 59, 39, 8, -20, 10, -4, 126, -10, 58, 14, 127, 97, -8, -51, 46, 15, 125, 21, 81, 34, -113, 23, -105, -82, -49, 10, -15, 95, 42, 24, 127, 89, -119, 89, 7, 49, 44, 27, 9, -103, -35, 97, -71, 17, 127, -6, 30, -127, -45, -19, 56, -40, -38, 122, 37, 60, 9, -16, -74, -101, 0, -89, 25, -78, -30, 16, 2, 13, -10, -18, 82, 56, -69, -98, -25, 27, 19, -32, -56, 37, 11, 22, 30, -28, 103, 36, -11, -12, -20, 3, 9, -3, -6, -23, 73, -4, 31, -74, 12, -115, 20, -63, 35, 47, 71, 31, 127, -11, -74, 8, 51, -59, 80, -117, 16, -40, 8, 96, -21, 45, -127, 9, -112, -11, 17, 36, -17, 35, -15, 116, 34, 9, -49, 92, -38, -14, 33, 61, 113, -25, 30, 33, 53, -7, 6, -113, 127, -122, 94, 24, -30, -27, 23, 127, -6, -17, 39, 9, -3, 25, -80, -7, -5, 21, 6, 25, 8, 100, 40, 1, 14, -71, 127, 9, 38, 1, 33, -6, 42, -88, 55, -27, 27, -13, -59, -19, 109, 23, -68, 6, 68, 60, -54, 12, 49, 36, -76, -31, 24, 17, 46, -68, 20, 123, 19, 28, -9, -14, 111, 41, 30, 121, -80, 119, 19, 14, 31, 104, 68, 7, 127, 19, 35, -64, 7, 69, -9, -2, 37, 6, 24, 20, 12, 127, -70, 18, -49, -1, 110, -60, -63, 74, 51, 5, -4, 2, 15, 11, -7, 42, -48, 1, -19, 86, 4, -17, 18, -4, -93, 96, -82, -2, 3, -9, 16, -7, -11, 56, -27, 39, 0, -1, -12, 13, 27, -2, 12, 58, 28, -23, -7, 62, -23, -2, -54, 2, 3, 35, -5, -16, 0, 6, 21, 86, 14, -73, -5, 2, 6, 10, 103, -72, -83, 0, 29, -6, 24, 10, -91, -17, 79, 52, -48, 26, 4, 5, 53, 12, -5, 0, 3, -9, 42, 8, 7, -48, -1, 2, 38, -52, 45, 11, 49, 40, -9, 9, 42, -7, 2, 20, 32, -7, 29, 0, 119, 21, 1, 113, 78, 6, -7, -76, 16, 127, 16, -41, 39, 46, -12, 18, 3, 31, 10, 127, 22, -3, -1, -3, -9, 1, -5, 4, 34, 5, -12, -9, -43, 10, 55, 13, -13, -66, 61, -5, 22, -60, -4, -8, 37, -1, 22, -15, -8, 59, -15, 44, 11, -26, 33, -13, -27, 2, -39, -31, 15, -9, 45, 31, 2, 7, 37, 52, 28, 40, -14, 10, 80, 4, -2, -2, -28, 57, 8, 31, 4, -11, -16, -12, 2, 40, 71, 23, 2, -15, -22, -7, 15, 28, -16, -13, -15, -18, 29, 19, 9, -5, 4, 5, 79, 3, 42, -17, 36, 10, 18, -62, -3, -94, -27, 4, -12, 73, 1, 90, -36, 29, 22, 127, -8, 10, 107, -8, 49, 46, -7, 23, 45, -113, 1, 11, -2, 54, 18, 66, -87, -64, 79, 4, 33, 25, 4, -75, 7, -25, 13, 10, 62, -20, -3, -108, 18, 0, -105, 26, 6, -3, 15, -4, -24, 17, 15, -2, -112, -5, 7, 65, 3, -18, 7, -9, 25, 13, 101, -55, -8, 0, -106, 9, 4, -8, -103, -25, 99, 0, -67, -63, 5, -62, -60, 22, 57, -39, 18, 96, 40, -51, 8, 10, 14, -81, 82, 40, -90, -67, -5, 36, 80, -1, 10, -9, -104, 16, 43, 12, 46, 37, -5, 2, 25, -17, -19, -3, 9, -8, -9, -35, 3, -89, 0, 10, 3, -25, 107, 11, 50, 45, -108, 5, 17, -15, 7, 34, 34, 32, 14, 63, 6, -17, -16, 55, 67, 16, 69, -30, -6, -9, -18, -19, 45, 8, 16, 21, 56, -4, 0, 7, -56, 24, 30, -25, 30, -10, -4, -15, 28, -22, -5, 4, 108, 50, 11, -13, -4, -10, 13, 1, 12, 13, -4, -7, -20, -7, 26, 40, -127, 1, 60, -24, -20, 73, 7, 2, 10, -14, -28, -11, 1, 24, 9, -4, 7, -127, -10, 36, -3, 2, -115, -25, -21, 12, -44, 1, 36, 37, -9, 0, -5, -30, -12, -36, 29, 2, 25, 75, -5, 68, 28, 22, 0, -9, 21, 33, -40, 3, -24, 7, 1, 1, 5, 34, 20, 2, 34, 53, -45, -12, 0, 5, 118, 9, 2, -87, -42, 59, 10, 12, 31, -7, 21, -44, 11, -9, 102, -4, -125, 48, 44, 25, -15, -20, -27, -46, -2, -112, -1, -35, -47, 1, -1, 3, -22, 3, 70, 15, -56, -28, -23, 3, -7, 60, 23, 37, 5, -21, -5, -46, 24, 6, -3, -14, -16, 2, -1, 82, 16, -29, 29, -14, 15, -52, -9, -4, -1, -32, 17, 8, 41, 8, 51, 1, -56, -2, 43, -32, 17, 42, 22, -46, 2, 127, 10, 14, -19, 6, -6, 4, 10, 26, -7, 16, -29, 93, 13, 2, -52, 18, -6, 13, 10, 8, -9, -13, 3, 30, 20, 72, -7, 50, 36, 41, 78, 5, -3, -8, 32, 75, 9, -16, 6, -9, -3, 17, -61, -28, -3, 32, -10, -18, 0, 46, 117, -24, 0, -5, 24, 10, 30, 11, 0, -4, 12, -70, 5, -16, 5, -3, -2, -49, 61, -11, -38, 11, 13, 20, -56, 5, 72, -4, -10, 17, 15, 4, 32, 1, -1, -1, -2, 1, 15, -7, 40, -14, -43, 72, -73, 56, -7, -4, 2, 19, 7, -8, 41, 4, -13, -80, -6, 37, 4, -19, 2, -28, 8, -5, -4, 81, -46, -7, -2, -32, 23, 41, -27, 57, -2, -4, 1, 1, 12, -2, 4, 28, 29, 7, 12, 54, 4, 10, -9, -3, -22, 74, -41, 2, -10, 0, 8, 6, -6, -30, 12, 8, -2, 10, -2, 7, 25, 2, 6, 35, 28, -22, 5, 41, -25, 8, -20, -8, 5, -32, -4, -14, -2, 0, 12, 38, 21, 9, 0, 1, -2, 16, 80, 33, -2, -21, -14, 0, -8, 10, -31, -5, 15, 49, 13, 35, -1, 0, -7, 10, -1, 6, -7, -2, 13, -11, 0, -29, -2, 7, 30, -16, 50, 10, 2, -2, 1, 22, 35, -5, -1, 9, -42, 2, 24, -1, 39, 17, 1, 49, -51, -3, 17, 14, 10, -19, -3, -28, -19, 18, -17, 23, 1, 9, 4, 47, -20, -4, 2, -14, -1, -4, -2, 8, 18, -2, -11, 3, -27, 15, 4, 4, -4, 25, 45, -19, 13, -28, 7, 1, 25, -6, 11, -10, 3, 73, -4, 28, -27, -2, -5, 11, 50, -2, -18, -5, 12, 9, 24, 5, -5, 4, 8, 20, -9, 11, -13, 21, 52, -4, 5, 8, -55, 29, 7, 15, 17, -10, -13, -5, 19, 27, 0, 25, 2, -8, -58, 1, 18, 21, 3, -23, -7, -35, 7, -9, -1, 3, -8, 4, 30, 7, -62, 15, -24, -4, 10, -23, -1, 33, -1, -6, -2, 66, 8, 4, -15, 33, -9, 17, -33, 23, 77, -1, 25, 18, -2, 1, 16, -98, 7, -10, 0, -5, 0, -26, 8, 15, -46, 3, -5, 6, 2, 7, -18, -6, 14, 5, 47, 17, 3, -81, -15, 2, -31, -4, -5, -1, 8, -1, 35, 3, 3, 11, -75, -10, 11, -25, 4, 0, -19, 0, 5, -2, 5, -25, 1, 1, 22, 12, 13, 1, -42, -24, 69, -1, -29, -14, -9, 22, -87, -40, -42, 26, 5, 5, 32, 24, 21, 7, 7, 48, 26, -21, 49, -36, -4, 32, 66, 4, -5, 0, -100, -4, 7, 4, 27, 15, 3, 1, 6, -26, -3, 0, 5, -14, -3, -14, 6, 0, 3, -5, 3, -10, 34, 5, 21, 9, -26, 12, -6, -2, 1, -14, -11, 9, 1, 12, 6, -17, -31, 16, -61, 0, 30, -15, -1, 0, 39, -13, 14, 29, 19, 5, 56, -6, -6, 1, 52, 14, 12, -8, 14, 1, -6, -13, -7, -13, -2, 4, -48, 16, 52, -19, -9, -1, -1, 16, 7, 12, 9, -6, 14, -2, 20, 23, -57, 9, 10, -13, -11, 3, 11, 5, -8, -2, 4, 4, 4, 16, -5, 0, 10, -11, -6, -41, -7, 1, 59, -2, -11, 10, -4, -10, 27, 27, 0, 7, 8, -7, -13, 9, 4, 7, -20, 8, -2, 26, 16, 6, 23, -1, 1, 17, 26, 21, -10, 5, -6, 7, -3, 18, 16, 1, -22, -15, -9, 18, 19, 13, 34, 9, 5, 52, -46, 80, 21, 6, -16, -2, -7, 19, -2, 1, 39, -6, -52, 21, -11, 36, -6, -10, 9, -27, -4, -34, 2, -33, -14, 0, -9, 0, -11, -8, 33, 1, 20, 15, 36, -1, -12, 49, 10, 20, 1, -59, 11, -19, 21, 6, -3, 10, -18, 3, 0, 44, -2, -12, 2, 13, 14, 31, 3, -7, 1, -30, 18, 2, 22, 5, -19, 0, -12, -3, 7, -28, 30, 29, 0, -25, -1, 16, 9, 4, 6, -6, 28, -25, 7, -17, -1, 9, -20, 65, 13, 0, 19, -2, -33, 8, 10, -3, -16, -35, 11, 20, 18, 59, 0, 33, -39, 43, 44, 4, -16, -7, 15, -28, 31, -21, 4, -10, 1, -2, 48, -26, 5, 17, -4, -14, -2, -11, 79, -10, 0, -6, 2, 6, 5, 16, -7, -3, 12, -55, 3, -19, 4, 53, 12, -37, 33, -9, -39, 5, 8, 8, 43, -4, 40, 13, 1, -6, 2, 6, 26, -7, -6, -21, 13, 1, 1, -6, -43, 3, 15, 23, -53, -17, 6, 2, 5, -28, 7, 1, -50, 5, -1, 51, 1, 4, 2, -3, 51, -17, 5, 3, 6, -24, -60, -3, 31, -21, 10, 5, 12, 10, 6, -2, 12, -3, 3, -2, 28, 56, 74, 28, 8, 70, -9, 38, 6, 12, 12, -113, -13, 10, 0, 9, 18, 19, 19, -55, 75, 24, 8, 13, -2, -1, 22, -1, 6, -17, 31, -31, 24, 31, -57, 12, -46, 6, 13, -15, -6, -64, 9, 20, -2, -1, 37, 27, -1, -5, 25, 20, 51, 31, 27, 1, 4, 7, 40, 8, 16, 19, 26, 47, 80, -57, -3, 1, 17, 20, -6, 6, 12, -3, 20, 19, -6, -60, 0, 12, 63, -75, 46, 10, -19, 9, 9, 13, 9, -2, 1, 12, 40, 1, 9, -12, -30, 22, 5, 56, -46, -30, 8, 33, 0, -39, 75, -52, 21, 30, -15, 54, 2, -3, -16, 27, 1, -9, 2, -19, -1, 6, -23, 32, 62, 16, -40, 20, -82, 18, 31, 29, -7, 91, 1, -19, 17, -6, 9, -1, 23, -2, 11, -1, 2, 75, -7, 58, -11, 77, 11, -7, 41, -2, -38, -12, -51, 13, 34, 47, 18, 5, -9, 8, 11, 105, -4, 17, 25, 8, 8, -8, 34, 19, 9, 75, 30, 2, 32, 21, 10, 56, 39, 37, 0, -23, -79, -11, -22, -42, 11, 16, 8, -85, -7, -17, -1, -11, 42, 7, -23, 11, -53, 28, -25, 33, -24, -106, 5, 48, 13, 1, 7, 83, 15, 82, -56, 17, 6, -1, 18, -56, 124, 51, 73, -2, 8, -35, -4, -103, 18, -7, -14, -12, 39, -26, 38, 11, -11, 3, 28, 13, 5, -74, -111, -10, 11, 9, 82, 20, -5, -127, -33, 8, -49, 38, -32, -2, 12, -2, 94, 4, 5, -2, -45, 5, 9, -37, 40, -8, -8, 1, 12, 3, 22, -67, 16, -3, -49, 23, 12, -7, 4, 13, 53, -10, -51, -28, -20, 24, -76, -44, 13, 21, 8, 89, 15, 38, 19, 11, 27, 92, 43, -38, 71, -27, -20, 66, -23, 6, 7, 29, -70, -32, -49, 4, 17, 1, 18, -4, -10, 99, 5, 4, 10, -16, -6, 8, 12, 125, 35, 11, -11, -30, 35, 11, 61, -29, -35, -7, -19, -44, 23, -37, 31, 16, 7, 0, 11, -81, -45, 20, -96, 19, 47, -48, -17, 27, 66, 25, 45, 85, -3, 8, 99, -6, -12, 2, 28, 25, -6, -43, 27, 24, -9, -13, -35, -11, -9, 6, -75, 4, 36, -55, -6, 9, 17, 82, 11, 55, 14, -13, 7, 3, 1, 27, -39, 7, 24, 6, 2, 31, 3, 14, -3, 1, 47, 43, 2, 16, 12, -8, 15, -68, -7, -38, -32, -4, 112, -1, -6, -2, -1, -4, 51, -15, 6, 51, 24, 15, 48, -16, 38, 16, -50, -44, -2, -10, 19, 5, 29, -9, 36, 21, 12, 11, -99, -38, 15, 23, 10, 27, 27, 1, -62, 74, 7, 58, 39, -12, 8, 7, 6, 66, -46, 127, -44, 39, -52, -2, -11, 30, 23, -9, 84, -27, -32, 43, -39, 7, 49, -24, 24, -36, -3, -9, 23, -4, -11, 3, -2, 0, 13, -1, -6, -28, 17, -81, 127, -3, -4, 74, 49, 35, 6, -127, 55, -3, 19, 5, 13, 11, -19, -11, 0, 50, -16, -26, 14, -27, 7, 16, 2, -75, 8, -30, 15, 0, 65, -9, -32, -2, 22, 5, 19, -54, 6, -1, 2, 5, 4, -23, 1, 26, 8, 2, -48, -30, 9, 20, -4, 35, 9, 42, 3, -35, 74, 37, 0, -7, 11, 54, 34, -30, 9, 13, 48, 46, -4, -21, -59, 11, 75, 6, 0, -18, -37, -61, 45, 3, 14, 13, -14, -15, 70, -29, 3, 30, -4, -34, -6, -10, 116, -14, 18, 8, -20, 2, 16, -2, 3, -3, 17, -62, 12, -12, -2, 7, -17, -10, 60, 5, -45, 15, 29, 34, 41, 10, 79, 26, -18, -40, 2, 15, 10, 13, 5, -2, 17, 5, -21, -10, -6, -1, 34, 19, -76, 70, 8, 3, 5, -72, 29, 5, -60, 2, 3, 127, 1, 30, -5, -13, 100, 6, 9, 8, 5, -39, -127, -4, 101, -26, 28, 8, -82, 50, 14, -5, 31, 7, 32, 13, 127, 57, -38, 127, 26, -53, -1, 66, 22, 35, 27, 2, 27, 19, 76, 27, -13, 26, -39, 14, 127, 77, 78, -31, 21, 16, -16, 11, 4, -56, 126, -8, 24, 87, 5, 8, -20, 23, -14, -27, 29, -81, 22, 74, 33, -111, 127, -20, 12, -16, 76, -12, 126, -17, 21, 127, 82, 25, 125, 66, 1, 45, 64, -5, 127, -62, 11, 11, -23, 18, -31, 53, 43, 9, -66, 96, -22, -60, 15, -56, 127, -56, 18, 26, 8, 11, 127, -14, -102, -16, 10, -32, 82, 6, 44, -26, -23, 37, 12, -102, -17, -43, -40, 33, 36, -99, 127, -127, 66, 37, 31, 119, 14, -47, -26, 51, 40, -22, -16, -36, 5, 38, -77, 127, 37, 42, -61, 34, -24, -67, 117, 127, -24, -66, -96, 0, -22, 41, 10, 12, 16, 19, -33, 8, 21, -71, 3, 14, -24, -21, 74, -68, -80, 127, -80, -26, -127, 31, 27, 76, 35, 18, -5, -59, 127, 38, 19, 37, 127, 33, 28, -45, 127, -52, 35, 107, 127, 96, 127, 122, 36, 93, 127, 127, 18, -43, 65, 15, -127, 59, 16, 44, 22, -16, -24, 3, 3, -31, 127, 26, 84, 24, -14, -17, -13, 127, -82, -84, 28, 32, 56, 94, 4, -3, 23, 127, -92, 64, -10, -9, 127, -106, 19, 127, 127, -52, 47, -35, -35, -94, 127, 24, -48, -14, 28, -34, 21, 9, 33, 77, 56, -2, 22, 7, -44, -49, 24, 96, 24, 54, 16, 13, -30, 33, -72, 127, -39, 14, 92, 2, -21, -11, 17, 21, 59, -19, 44, -25, 127, -4, 1, 22, 49, 34, 86, -41, 127, -11, 15, 127, 32, 14, 51, 36, 46, -14, -49, -2, -43, -5, -89, -36, 103, -9, 59, 64, -35, -26, 25, 30, 127, -24, 127, -8, 1, 21, -30, -2, -15, 26, 25, -41, -99, 30, -89, 2, 31, 3, 71, 40, -43, 127, -3, -1, 57, -33, 9, 66, 40, 30, 94, 127, 127, -26, 41, 51, 127, -46, -107, -55, -25, -91, 66, -53, 22, -49, 5, 4, 30, -70, -94, 19, -59, 70, 18, 37, -97, 127, -120, 127, 101, -11, -70, -41, 127, -10, -27, 13, -80, 24, -26, -106, 127, 127, -48, 127, -30, -55, -52, 10, -96, -4, -103, -68, -46, 62, 50, 127, -47, 127, 20, -46, 11, 27, 71, 14, 8, 11, -31, 65, -11, -14, 20, 127, 5, -50, 127, 127, -10, 28, 34, -33, 48, -101, -12, -18, -11, -7, 4, -8, -7, -53, -89, -7, 70, -68, 53, 127, 50, 1, 127, -56, 63, 26, -18, 1, 7, -46, -29, -9, -24, 4, 11, -14, -29, 18, -78, -71, 33, -7, 127, 83, 40, 11, -1, 43, 63, 109, 127, -50, -5, 32, 43, -73, -28, -120, -127, 44, -34, 0, 11, 17, -58, -76, 73, -36, -14, 23, -98, -42, 127, -15, -10, -104, 4, 32, 127, 127, 13, 12, 97, 6, -31, -36, 33, -56, -30, -127, -28, -14, 23, 38, 31, 7, 23, -121, 127, 35, 103, 34, 127, -14, -36, 5, 8, 25, -12, -38, 52, 1, 10, -8, 18, -110, 10, -78, 45, 33, 127, -5, -21, -3, -78, 20, -1, -79, -58, -106, 23, 45, 5, -23, -23, 56, 3, 16, -127, 75, 38, 33, -14, 127, 127, -115, 34, -45, 115, 70, 127, -16, 45, 48, 76, -41, 35, 56, 19, 9, 5, -104, -21, -124, 112, 18, -31, 67, -34, -31, 127, 110, 55, 17, 2, 4, -49, -69, 27, -3, 10, -35, 4, -18, -127, 8, -4, 90, -88, -26, -43, -5, 27, -7, 53, -92, 34, -17, 3, -79, -35, 106, 81, 8, -64, 20, 45, 50, -23, 5, 127, 12, 16, -25, 50, 84, 127, 55, 15, 19, 12, 50, -42, -14, -21, 14, 23, 6, -113, 67, 21, 15, 11, 17, 75, 4, -60, 45, 28, -59, 22, 124, -1, -9, 0, 93, 12, 17, 8, -29, -109, 15, -30, 2, 76, 22, -111, 82, 51, 0, 127, 12, 127, 0, 28, 61, 64, 33, 11, 67, -8, 34, 3, 14, 6, -105, -8, 10, 3, 14, 15, 29, 21, 36, 77, 10, 7, 15, -3, 1, 26, -2, 3, -17, 31, -35, 22, 39, -53, 15, -43, 6, 21, 6, 3, -57, 11, 25, 4, 0, 45, 22, 4, -3, 29, 19, 54, -26, -67, 4, -2, 8, 37, 4, 11, 20, 35, 48, 75, -50, -3, 2, 15, 18, -3, 5, 22, -3, 13, 20, -14, -65, 3, 11, 65, -65, 30, 12, -14, 20, 9, 12, 13, -2, -3, 14, 44, -1, 16, -12, -39, 24, 7, 60, 39, -26, -38, -71, 4, 11, 75, -55, 26, -3, -13, 59, 4, -2, -18, 37, 4, -10, 2, -15, 3, 6, -22, 33, 58, 16, -40, 8, 127, 20, 38, 30, -8, -63, 8, -16, 15, -3, 8, 3, 28, -2, 7, -6, 15, 70, -11, 63, 12, 76, 12, -5, -3, -6, -41, -38, -46, 15, 31, 50, 15, 9, 7, 3, 15, 117, -6, 9, 43, 7, 5, -9, 42, 13, 8, 77, 33, -13, 35, 28, 4, 54, 33, 36, 1, -22, -76, -7, -20, -36, 10, 21, 12, 127, -12, -16, -5, -16, 43, 12, -34, -1, 14, -21, 4, 26, -21, -104, 2, -71, 12, 1, 8, 91, 15, 86, -49, 25, 9, -5, 15, -52, 127, 53, 84, 4, 4, -36, -6, -118, 17, -9, -11, 14, 38, 63, -41, 4, 50, 5, 31, 2, 6, -52, 112, -15, 15, -6, 89, 23, -6, 118, 8, 7, -46, 34, -33, 1, 10, -3, 91, 5, 6, 1, -32, 3, 11, 32, 36, -8, 8, 2, 16, 2, 30, -54, 6, -8, 37, 25, 13, -4, 1, 0, 78, -8, -41, -30, -20, -20, -82, 35, 21, -32, 8, 84, 21, -70, 16, 12, 26, -76, 53, 37, -70, -15, -16, -55, -12, 8, 2, 26, -85, 1, -42, 5, 32, 8, 15, -5, -5, 99, 2, 4, 11, -10, -4, 6, 6, 127, 33, 9, -6, -37, 28, 15, 61, -22, -36, -4, -23, -45, 19, 8, 25, 14, 6, -17, 11, -82, -46, 18, 73, 13, 69, -44, -27, 26, 57, 23, 37, -117, 3, 9, 107, -4, -15, 7, -46, 24, -6, -37, 23, 24, -15, -6, -19, -14, -10, 10, -82, 6, 44, -55, -3, 12, 20, 91, 10, 55, 12, -20, -14, 3, 10, 34, -44, 3, 24, 10, -1, 22, 6, 3, -3, 7, 48, 41, 1, 24, 19, -3, 18, -67, -7, 75, -35, -5, -127, -1, -5, -4, -3, 2, 56, -9, 6, 45, 23, 6, 51, -5, 47, 16, 44, -41, 1, -10, 13, 3, 36, -9, 33, 22, -34, 6, -85, -33, 1, 19, 10, 24, 28, 2, 41, 74, 4, 63, 43, -16, 13, 6, 4, -68, -37, 122, -41, 41, 39, -3, 20, -51, -8, -9, 83, -19, -18, 44, -55, 2, 44, -20, -1, -47, -3, -11, 37, -9, -8, 0, -2, 0, 7, -6, 9, -30, -39, -82, -84, -10, -4, 70, 48, 39, 11, -124, 50, -1, 13, 7, 20, -11, -24, -4, 1, 60, -7, -27, 15, 9, 3, -29, 0, -80, 12, -36, 18, 1, 56, -10, 29, -2, 14, 3, 16, -67, 4, -7, -9, 7, 2, -31, 4, 21, -25, 5, -54, -23, 9, 18, -1, 32, 12, 43, 2, -26, 64, 24, -4, -8, 8, 40, 38, -22, 14, 14, 43, 51, -2, -19, -63, 10, 71, 7, 7, -20, -30, 44, 47, 12, 14, 14, -10, -16, -84, -26, 2, 31, -6, -29, -3, 18, 111, -10, 15, 10, -11, -3, 17, -6, 7, -3, 16, -74, 10, -8, -1, -38, -19, -10, 71, 6, -37, 13, 25, 35, -31, 15, 92, 22, -20, -41, -1, 16, 14, 13, 3, -4, 21, 11, -16, -16, 25, -5, 36, 29, -62, 66, 7, 4, 6, 23, 23, 6, 58, 4, 5, -28, 4, 30, -3, -15, -117, 14, 11, 13, 8, 55, -125, -5, -117, -26, 53, 2, -82, 47, 11, -6, 34, 5, 31, -6, 6, 22, 32, 4, 15, 53, 6, 7, -4, -6, -15, 82, -45, 10, -5, -1, 12, -5, -11, 50, 7, -8, -2, 5, 1, 1, 27, 0, 6, 35, 7, -15, 2, 12, -22, 6, -18, -8, 9, 4, -8, -15, -1, 7, 7, 48, 23, 19, 0, 3, -7, 19, 70, -38, -23, -17, -6, 11, 1, 21, -33, -6, 14, 39, 13, 40, -1, -1, 0, 11, 0, 7, -13, -1, 16, -21, -2, -16, -3, 6, 29, -23, 52, 7, 12, -3, -1, 25, 34, -8, 1, 10, -20, -2, 22, -2, 37, 7, 0, 35, 26, -1, -14, -48, 5, 50, 3, -19, -18, 20, -12, 17, 4, 14, 1, 55, -24, -3, 1, -13, -1, -4, 1, 9, 23, -1, -5, 15, 43, 16, 5, 2, -5, -19, 42, -18, 12, -28, 7, 4, 13, -5, 11, -8, 3, 67, -1, 25, 31, 10, 0, 7, -7, -1, -14, -2, 11, 16, 42, 1, -3, 2, 6, 21, -7, -7, -11, 22, 47, -7, 4, 8, -56, 21, 8, 21, 12, 2, -16, -8, 19, 60, 3, 27, 4, -11, -48, -1, 25, 12, 7, -31, -8, 35, 11, -8, -4, 2, -9, 1, 30, 3, 32, -13, 22, -1, 10, -13, 6, -42, 0, -12, -3, 67, 12, -45, -13, 20, 18, 26, -24, 18, 72, -2, 20, 16, -1, 4, 22, -72, 4, -12, 1, 8, -1, 14, -17, -5, 21, 8, -21, 12, -3, -17, 33, -8, 10, -8, 41, 23, 7, 69, -3, 1, -33, 13, -3, -2, 13, -2, 32, 7, -1, 10, -78, -4, 5, 34, 7, 1, -1, -4, 4, 2, 3, -25, 5, 4, -29, 0, 10, -4, -34, 20, 60, 3, -39, 4, -7, -25, -71, 29, -33, -17, 0, 19, 28, -30, 21, 6, 7, -67, 24, 29, -51, -40, -6, -28, 71, -5, 7, -1, -92, 13, 16, -2, 26, 20, 1, -3, 8, -41, -2, 3, 5, -15, -6, -14, 11, 1, 5, -10, 2, -14, 39, 5, 15, 4, -30, 10, -3, -5, -1, 22, -3, 14, 5, 3, 0, -16, -42, 10, 58, -3, 38, -14, -7, 1, 46, -17, 24, -28, 14, 10, 28, -3, -15, 2, -29, 12, 8, -6, 18, -1, -9, -11, -3, -9, -4, 6, -34, 19, 41, -19, -8, -4, 1, 14, 12, 7, 8, 5, -16, -1, 18, 30, -56, 7, 20, -8, -10, 1, 9, 6, -4, -6, 1, 4, 4, 9, -8, -1, 11, -8, -4, 27, -8, 2, -60, -3, -13, 11, -10, -3, 11, 19, 3, 16, 10, -8, 3, 8, -14, 10, 15, 11, -5, 27, 20, 17, 24, -1, 2, 16, -22, 17, -19, 6, -3, 3, -4, 9, 4, 4, 20, 15, -14, -7, 25, 6, 32, 4, 10, -64, -53, 73, 28, 8, 14, -2, 10, -25, -11, 0, 39, -5, -50, 27, -5, 33, -14, -18, -6, -27, 0, -38, 17, -35, -9, 3, -10, 0, -5, -9, 38, -6, -27, 6, -23, 0, -9, 50, 12, 22, 1, -58, 11, -19, 8, 8, -5, 2, -19, 1, 0, 39, -6, -15, 1, -8, 20, -33, -3, -2, 0, -27, 12, 3, 9, 9, 28, 0, -16, -4, 4, -29, 31, 27, 4, -21, 1, 10, 13, 10, -7, -1, 22, -26, 6, -16, 1, 12, -19, 60, 10, 1, 22, -1, -26, 2, 6, 8, -13, -29, 6, 17, 22, 46, 1, 22, -37, 38, 62, 3, -18, -7, 10, 39, 37, -19, 4, -7, 3, 2, -60, -20, 2, 17, -3, -18, -4, 13, 79, -18, 2, -8, 3, 7, 12, 25, -7, -1, 13, -62, -1, -9, 5, -20, 12, -32, 20, -7, -31, 6, 8, -3, -25, -1, 42, 13, 6, -10, 9, 5, 25, -4, -4, -13, 8, -3, 2, -6, 24, 6, 15, 25, -50, 14, 1, 0, 8, -8, 13, 0, 30, 4, -2, -52, 4, 13, 0, -7, -35, -11, 4, 1, 5, 40, -69, -4, -14, -23, 4, 17, 12, 26, 3, 0, 12, -2, 4, -8, 1, 14, 9, 11, 34, 33, -2, 13, -13, 1, -3, 48, -7, 3, -3, 4, 8, 8, -3, -21, 24, -17, 0, 14, -3, -1, 22, 2, 4, 3, 16, -17, 5, -25, -3, 7, -12, -11, 7, -25, -5, -25, 2, -3, 11, 8, 21, -25, 0, -4, -6, 6, 4, 21, 12, 2, -15, 12, -1, 16, -11, 3, -37, 0, 9, 13, -2, -6, -16, 7, -2, -2, -4, 2, 7, -3, -8, -19, -1, 12, 6, -17, 17, 8, -23, 7, -3, 21, 7, 1, -5, 1, 23, -6, 20, -3, 24, 12, 5, 16, -14, 1, 17, 3, 17, -25, 8, -11, -9, 59, -2, 35, 1, -1, -1, 44, -4, 3, -4, -4, -2, -15, -2, 4, -18, -3, -6, 24, -48, 7, 68, -22, 0, 16, 3, -2, 6, -7, 4, 1, 50, -6, 2, -3, 7, 57, 2, -3, -12, 2, 2, 7, 12, -3, -10, -11, 7, 15, 0, -9, 8, 5, 6, 4, -1, -2, -4, 11, -8, -2, 1, 1, -26, 11, 2, 12, 4, -9, -14, 5, 10, -14, 18, 8, 2, -14, -11, -3, -11, -2, 6, -28, 4, -56, 13, -14, -1, -1, 8, 13, 16, -3, -47, 12, -12, 6, 4, 3, 4, 69, 4, 1, -10, 43, -1, 38, -25, 11, -7, -9, -6, 19, 67, 15, 11, -1, 6, -16, 19, -58, 1, -10, 1, 3, -6, -38, 29, -5, -54, -4, -17, 19, 4, -32, -38, -5, 6, 3, -6, 11, 2, -22, -14, 0, -33, 21, -7, 2, 8, -5, -38, -2, 14, 7, -12, -4, 8, -21, 17, -6, -12, -2, 21, -2, -8, -20, 18, -6, -15, 7, 4, -7, -8, 2, 14, 0, -9, -1, -8, 7, -51, -20, 16, 10, 1, 1, 21, 20, -5, 7, -1, 41, 37, -22, 23, -12, -7, 39, 39, 7, 7, 1, -92, -14, -25, -13, 48, 26, 10, -5, -10, -18, -6, 7, 15, -10, -9, -3, 13, 61, -3, -1, 13, -19, 38, 14, 13, 2, -6, 3, -10, -8, 5, -15, 1, 4, -1, 7, 8, -9, -14, 30, -39, 11, 37, -2, -1, 12, 31, -4, -17, -1, 3, 3, 39, -11, -6, 0, 44, 5, 4, 2, 33, 5, 0, -7, -4, -13, -8, 11, -31, -1, 12, -25, -8, 4, -7, 19, 5, 4, 6, -2, 0, 3, 32, 18, -16, 6, -23, -5, -18, 3, -3, 5, -20, 4, 18, -2, 0, 6, -15, -5, -1, -7, -3, -43, -14, -2, 47, 4, 0, 3, -9, -6, 35, 5, 8, 17, 13, -7, 18, -12, -37, 10, -20, -20, -4, 18, 11, -11, -13, -1, 2, 0, 17, -22, -6, 26, -2, 9, 2, 7, 10, 4, -34, -44, 7, -14, 0, -13, 4, 12, 5, 20, -41, 61, 7, 9, -8, -2, -2, 9, 1, -8, 86, -15, -45, -37, -36, 10, 4, -20, 2, -23, 6, -11, 23, -6, -1, 3, -2, -4, 0, -6, 17, 1, 32, 14, 62, -13, 1, 31, 22, 22, 6, -49, 22, -10, 16, 5, 8, 14, -14, -5, -6, 44, -14, -2, 7, 24, 7, 18, -7, 16, 6, -32, 10, 5, 18, 4, -21, 5, 15, -10, 26, -18, -13, 10, 1, -9, 3, -16, 7, 7, 10, -10, 6, 6, 0, -16, -1, 8, -3, -36, 3, -10, 31, -14, -9, 5, -3, 10, 11, -27, 12, 13, -2, 15, -1, 8, -3, 11, 18, 5, -2, 12, 12, -7, 22, 6, 2, 9, -2, -12, 25, -5, -1, 9, -7, -5, -1, -18, 12, -5, 2, 0, -28, 0, 9, 8, 0, -3, 11, -74, -7, 18, 5, 48, 0, -17, 7, 0, -28, 6, 10, 36, 36, 2, 30, -1, -7, -1, 20, 9, 36, 9, 0, 1, -4, 0, -4, -3, -20, 1, 8, -14, -23, 1, -6, -6, 3, -34, -2, 7, -55, 7, -11, 65, 3, 31, 1, -10, 54, 14, 5, -4, 1, -11, -39, -3, 22, -7, -3, 8, 16, -12, -4, 0, 3, -9, -5, 0, -3, 23, 2, -7, 15, -11, 3, 12, 11, 9, -7, 61, 7, -1, 13, 4, 5, 0, -7, -33, 18, 1, 15, 9, -3, 10, 30, 0, 2, -19, 9, -26, 9, -11, -29, 5, -20, -7, -4, -36, -3, -38, 5, 0, 8, -23, 0, -24, 4, -1, 31, 2, 24, 9, 9, -1, -12, 1, 14, 3, -18, -3, 44, 25, 22, 17, 2, 0, -17, 8, -1, 6, 3, -5, 7, -21, -2, -49, 4, 12, 42, -14, 58, 10, -19, 2, 25, -7, -19, 1, -3, -2, 26, 2, -9, -19, -29, 9, 5, 24, -24, -18, 2, 3, 4, -37, 1, -33, 2, 58, -5, 16, 0, -2, -14, 52, -3, -4, -2, 2, 1, -3, -14, -1, 0, 1, -20, 12, -33, -8, 5, 12, -6, 5, -30, -20, 9, 0, 9, 9, 22, -4, -5, -8, 6, 62, -2, 34, 7, 15, -3, -12, -14, -10, 23, -8, 18, 13, 27, 2, -8, 0, -7, -4, -18, -14, -11, 7, 31, 6, 10, -6, 39, -22, 9, 3, 16, 1, 3, 8, -1, 22, 11, 14, 1, -11, -4, -1, -20, -40, 3, -24, 8, -52, -4, -24, -5, -2, 8, 6, 63, 0, -29, 2, -1, 2, -9, -30, 0, 26, 8, 20, -3, 31, 1, -10, -28, 20, 1, 8, 26, 10, 91, 27, 13, -9, 7, -14, 3, -38, 4, 33, -8, -8, 8, -4, 4, -10, -35, -4, 30, 0, 5, -54, -19, -1, 4, 10, 31, 10, 4, -84, -21, 3, -45, 17, -17, 0, 4, -6, 36, 13, 0, 10, -7, 9, 10, -6, 30, -3, -9, -10, 7, -5, -17, -9, 16, 2, -26, 0, 5, -3, 19, -10, 48, -12, -43, 13, -16, 0, -55, -6, -7, -4, 0, 27, 23, 7, -5, 9, 0, 5, 10, -2, 1, -24, -11, -6, -22, 3, 6, -9, -74, -6, -29, -2, 13, 4, 16, 8, -2, -43, -1, 5, 3, -4, -5, 5, 9, 22, -12, 20, 9, -4, -16, -1, 27, 12, 3, 0, -4, -16, 0, -5, -16, -6, -6, -14, 6, -12, -15, 18, -42, -12, 8, -17, -5, 14, 13, 18, 24, 0, -9, -3, 62, -13, -17, 5, 26, 7, 6, -15, 37, 15, -9, 14, -6, -12, -13, -8, -19, -9, -9, -46, 10, 9, 4, 16, -2, -4, 10, -2, -1, 0, 39, 30, -68, 0, -12, 1, -6, -5, -2, -16, -3, -2, 19, 7, -2, 18, -2, -8, -3, -8, -1, -3, -7, 4, 24, -4, 1, 1, 2, 4, 29, -1, 8, 30, 5, 0, 1, -19, -18, 9, 4, -2, 0, -4, -12, -1, -5, -4, -3, -4, 1, 13, -10, 9, 19, 9, 1, 16, 8, 0, -1, 40, 36, 27, 20, -21, 17, 8, 3, 12, -56, 4, 31, -1, -4, 1, 3, -6, 19, 6, 78, -8, -89, 0, -19, -9, 8, -18, -5, -17, -1, 16, 13, 31, 2, -2, -6, 5, -6, 5, 0, -5, 6, 1, 25, -19, -1, 50, 0, 11, 6, -51, 13, -6, 14, -1, 14, 9, -11, 2, 1, 46, -12, -16, -2, -14, 6, 8, -3, -8, 4, -28, 13, 4, 4, 2, -13, -2, -9, -3, 34, -32, -26, 22, 9, 23, -1, 0, 9, -2, -5, -3, 17, 33, 4, -25, -4, 9, 0, -17, -4, -12, 76, 15, 24, -6, 4, 22, -10, 23, 8, 16, 13, 62, 0, 22, -14, 47, 13, 0, 6, 24, 2, -12, 0, 20, 10, 14, -1, 1, 1, 8, -1, 9, -8, -2, -2, 6, 28, -4, 5, 23, -8, 7, -1, -4, -1, -4, -1, -58, 3, 16, 1, 6, 4, -8, 41, -1, -34, 4, -8, 18, 19, 10, -2, -14, 0, -20, 9, 9, -14, 21, -5, -1, 9, 6, -5, -11, -1, -7, -22, -25, -20, 34, 7, -10, -5, -27, 1, 2, -26, 4, -7, 35, -7, 10, -1, -3, 30, 26, 10, -2, -3, -17, -69, -3, 30, -12, -6, 0, 19, -6, 9, 2, 6, 1, 0, 1, -12, 43, -11, -18, 113, 16, -2, 26, 16, -10, 23, 127, 24, 21, 30, -9, 18, 13, -38, -1, 26, 43, 44, 4, -5, 6, 38, 3, 3, 6, 33, -38, 5, 62, -68, -4, -54, 8, 8, -24, 9, -80, 5, 23, 33, -37, 21, -21, -11, -3, 11, -10, 52, -23, -6, -18, 22, -4, 75, 14, -91, -11, 56, 46, 38, 17, 4, 8, 7, 17, -10, 8, 34, -10, -18, 1, -15, -81, -6, 20, 70, -48, 78, 9, -25, 6, 76, -7, -20, -4, -4, 0, -32, 3, 5, -20, -28, 17, 2, 13, -2, -49, -12, 36, 2, -34, 62, -44, 24, 85, -13, 12, 5, -7, -22, 69, 21, -1, -5, 8, -10, 7, -28, -29, 19, 4, -6, 19, -31, 6, 41, 9, -6, 5, -24, -16, 28, 9, 8, -4, 55, 0, -1, -10, -27, 127, -8, 79, -10, -56, -17, -36, -32, 8, 2, -8, 22, 5, 16, 29, 3, -12, 38, -17, -6, 0, -14, 12, 77, 24, -11, -11, 55, 0, 20, 39, 31, 127, 12, -1, -6, 86, -11, 68, 4, -14, 52, -11, -28, 127, -3, 15, 13, -33, -19, -31, 4, 2, 24, 6, -52, 13, -20, -7, 1, 15, -19, -63, 7, 10, 22, 15, -11, 69, -8, 101, -40, 21, -1, -1, 32, -16, 86, 43, 61, -1, 24, -10, -26, -53, 5, 51, -7, -13, 27, 45, -3, -4, 0, -7, 61, 10, 7, 42, -4, 5, 18, 28, 94, 4, -14, -22, -5, 9, -100, 28, -18, -8, 48, -7, -60, 11, 10, -2, 7, 10, 2, -18, 103, -14, -8, -13, 19, 13, 104, -17, 25, -2, 19, 8, -4, -1, -14, 28, 105, -8, -106, -4, -31, -5, -61, -6, 33, -6, 6, 46, 36, -3, 5, 2, -1, -3, 75, -5, -33, -62, -14, -15, 35, -1, 11, 5, -106, -17, -46, -1, 39, -23, 17, -2, -5, -21, 18, 16, 1, -8, -10, 44, 9, -102, -6, 60, 2, -13, -35, 3, 54, 5, -27, -22, -21, -47, 8, -14, -8, -32, -2, -8, 11, -33, -46, 40, -36, 28, 3, -19, -25, -14, -48, 48, 37, 7, -25, -1, 118, -19, -23, -17, 2, 26, 2, -47, 59, 16, -22, 79, -13, -23, -30, -12, -57, -16, -18, -62, -19, 61, 18, 40, -6, 26, 18, -34, 0, 0, 47, 43, -120, -5, -8, 9, -14, -8, -24, -22, 10, -126, 30, 22, 4, 127, 4, -8, -9, -47, -16, -4, 4, -2, -34, 7, -2, -7, -10, 5, 11, 5, 24, 65, 16, -5, 16, -18, 22, 16, -7, 21, 3, 19, -19, -13, -18, -5, -3, 0, 3, -8, -45, 27, 25, 28, 16, 57, -6, -19, 4, 78, 51, -37, 28, -13, 15, 13, 27, -32, -74, -62, 40, 15, -14, 0, 4, -3, 33, 9, 96, -21, -115, 30, -39, -12, 3, -25, -2, -49, -6, 4, 50, 25, 0, 4, 28, 1, -23, 4, -15, -28, -12, -30, -36, -16, -8, 69, -40, 27, 7, -84, 35, -19, 19, 6, 14, -11, -10, 13, -1, 73, -5, -26, 7, -8, 19, -6, 12, -11, -4, -48, 3, 21, 5, 9, -13, 4, -65, 3, 34, -51, -53, 34, 20, 13, 10, -34, 5, 11, -3, 2, 7, 127, 6, 30, -1, 22, 16, 10, -12, -46, 127, -9, 18, 1, 6, 44, 9, -23, 3, 17, 13, 127, -3, 39, -8, 60, 39, 2, 3, 127, 17, 10, -37, 36, 9, 3, -2, 8, -48, 8, 14, 28, -12, -6, -2, 9, 35, -12, -9, 26, -35, 0, 22, 21, 3, -7, 4, -61, -3, 2, -7, -46, 2, 29, 34, -11, -44, 15, -6, -7, 0, -5, 23, -8, 0, -24, 24, -10, 54, 18, -8, -24, -8, -14, -24, -8, 3, 12, -10, -22, -47, 39, -2, -12, -5, -7, -10, -9, -44, -1, -16, -33, -4, 54, -7, -4, -9, 49, 12, 0, -8, -4, -80, -7, -19, -28, 0, 28, -14, 37, -4, -11, -21, -7, 18, -1, -5, 21, 8, -3, 17, -2, 1, 13, 8, 9, -7, 45, 2, 3, 13, 6, 9, 3, -8, 14, 12, 9, 10, 8, -5, 3, 28, -3, 4, -12, 13, -21, 5, -8, -30, 7, -15, -4, 5, 32, 3, -46, 4, -9, 8, -28, -3, -30, 2, -1, 33, 6, 48, -3, -27, -3, -16, 8, 19, 11, -24, 0, 37, 19, 18, 17, -2, 1, -17, 8, -2, 12, 13, -6, 3, -15, 5, -37, 1, 8, 39, -16, 49, 12, -6, -1, 25, -4, -19, 0, -7, -4, 25, -1, 0, -16, -26, 6, 5, 14, 10, -17, -9, 1, 6, 14, -1, -33, 5, 71, -2, 12, 0, -3, -15, 52, -12, -3, 2, 7, 0, -12, -15, -3, -13, 2, -21, 21, 24, -11, 18, 7, -3, -2, -29, -21, 10, 0, 8, 5, 25, -1, 3, -3, 6, 67, 1, 42, 1, 7, -6, -6, 0, -3, 20, -15, 14, 10, 28, 7, -10, 4, -6, -1, -21, -13, -11, 6, 13, 9, 14, -9, 39, -5, 13, 10, 6, -21, -1, 7, -5, 13, 18, 19, 3, -13, 2, -2, -20, -42, 6, -16, 10, 49, -5, -27, 1, 0, 10, -1, 37, 12, 10, 0, -10, 1, -9, -30, 2, -17, 9, 24, 0, 52, -5, -9, -15, 28, 0, -8, 26, 6, 87, 22, 12, -8, 9, -14, 7, -56, 3, 35, -3, 9, 5, 28, -18, 11, 18, -1, 23, 5, 4, -45, 27, 2, 5, 0, 28, 9, 2, 19, -7, 6, -56, 11, -21, 1, 4, -4, 35, 17, 6, 13, -6, 8, 12, 7, 38, -3, 7, -5, 12, -7, -28, -18, 17, 0, 42, -2, 8, 2, 17, -13, 41, -7, -29, -2, -14, -1, -58, 10, -20, 3, 7, 32, 15, -13, -6, 11, 3, -10, 34, -4, -10, -23, -11, 14, -13, -3, 6, -17, -95, 3, -31, -3, 21, -3, 22, 8, -6, -34, -1, 4, 3, -6, -7, -9, 16, 23, -12, 18, 14, -6, -19, 8, 32, 16, 17, -2, -5, -19, 10, 1, -23, -2, -3, -11, -1, -11, -15, 12, 2, -3, 0, -8, -12, 16, 14, 22, 13, 14, -7, 2, 55, -13, -15, 4, -7, 11, 9, -20, 31, 14, -7, 7, -2, -1, -12, -6, -14, -10, -1, -43, 6, 4, 8, 23, 1, -7, 7, 0, 1, -2, 41, 30, -73, -1, -10, -1, -6, -7, -3, -9, -8, 10, 23, 7, 0, 22, 5, -10, 5, -12, -1, -22, -10, 3, -77, -4, -2, 1, 9, 8, 26, -9, 8, 27, 4, 1, 1, -14, -8, 4, 5, 0, -1, -1, -6, -14, -7, 0, -4, 3, 0, 16, -11, 11, 16, 11, 6, 22, 7, -1, 10, 20, 35, 5, 18, -18, 7, 7, 8, -34, -54, -5, 35, 0, 1, 2, 10, 5, -6, -3, 85, -15, -87, 14, -16, -10, 19, -14, 0, -17, 0, 15, 9, 28, 3, -1, -3, 2, 0, 7, -10, -12, -10, -2, -28, -10, -2, 53, -7, 13, 4, -53, 13, 0, 13, 0, 12, -4, -9, 2, -1, 49, -15, -18, -12, -2, 13, 1, -3, 12, 6, -21, 10, 7, 5, 1, -1, 2, -9, -2, 30, -24, -34, 27, 4, 22, 2, 7, 11, 4, 8, -3, 16, 48, 4, -27, -9, 10, 5, -18, 2, -8, 67, 12, 23, -4, 5, 26, -3, 15, 5, 32, 12, 64, -2, 24, -21, 44, 17, -1, 9, 27, 4, -8, -1, 21, 11, 11, -5, 2, -46, 8, 7, 10, -6, 2, -5, 0, 23, -8, 1, 21, -8, 1, -4, -6, -3, -7, 4, -60, 4, 11, -2, -27, 5, 0, 41, -3, -33, 6, -4, 20, -20, 2, -5, -19, 4, -20, 16, 7, -27, 18, -6, -4, 5, 1, -10, -9, -2, 1, -25, -28, -17, 38, 6, -8, -3, 10, 9, 3, 25, 6, -4, -33, -8, 16, -2, 1, -42, 25, 7, -2, 4, 13, -69, 2, -27, -13, 1, -1, 16, -9, 8, 1, 5, -1, 3, -4, 7, 7, 23, 11, 30, 24, 0, 12, -15, 0, -1, -115, -8, -1, -6, 5, 6, 13, 10, 30, 27, -1, 2, 17, -1, 1, 19, -1, 1, 2, 21, -9, 5, -9, -5, 5, -8, -11, 2, 17, -3, -23, 4, -5, 12, 15, 16, -29, -1, -4, -1, 3, 17, -11, -43, -2, -13, 6, -12, 11, -7, 1, -53, -1, 5, 17, -1, -5, -7, 8, 0, 3, -20, 0, 7, 0, 0, -29, 1, 4, -3, -14, 15, 4, 2, 19, -3, 18, 5, 0, -6, 0, 12, 0, 11, -9, 22, 16, 2, 8, 16, 0, -13, -2, 12, 52, 2, -10, -14, 54, -4, 29, -2, -5, -2, -3, -10, 0, -3, -13, -4, -13, -2, 0, -21, -2, -14, 24, 72, 6, 44, -16, -4, -10, -1, -7, 6, 0, 5, 3, 46, -7, -1, -4, 7, 50, -2, -10, 17, 8, 3, 9, 5, -3, -2, -4, 6, 4, -13, -11, 10, 4, -8, 1, 0, 5, -7, 12, 28, 0, 0, -1, -5, 8, 3, 11, 12, -8, -2, 6, 8, -21, 10, 6, 1, -13, -16, -3, -18, -10, 4, -19, -4, 60, 13, -17, -1, 1, 7, 8, 25, -1, 39, -10, 28, 12, 7, -14, -1, -77, 0, -6, -8, 34, 4, 58, -22, 15, 9, -4, 0, 17, 70, 19, 3, -3, -1, -17, 14, -48, -3, -10, -2, 13, -3, 31, -31, 0, -42, -5, -4, 9, 4, -20, 34, -5, 9, 9, 5, 0, 0, 47, 6, 3, -40, 17, -10, 2, 0, -3, -45, -2, 10, 8, -15, 0, 12, 18, 23, -5, -1, 1, 11, -6, -5, -15, 21, -4, -8, 6, 4, -11, -8, -6, 64, -4, -22, 13, -15, -7, -52, 21, 11, -13, 2, -15, 29, -14, 14, 8, 3, -38, -44, 22, -30, -9, -5, -30, 29, 6, 9, 11, -118, 5, -28, -5, 48, 29, 2, -6, -8, -29, 0, 5, 8, -10, -9, 0, 11, 56, -3, -1, 13, -13, 28, 14, 7, -13, -7, 3, 1, -8, -2, 17, -6, 3, 5, -8, 14, -9, -21, 36, 29, 14, 28, 0, -8, 14, 35, -3, -16, -5, 0, 3, 36, -8, -20, -5, 8, 4, 4, -19, 43, 8, 2, -3, -8, -16, -6, 10, -21, -1, 17, -31, -4, 5, -2, 9, 2, 5, 1, -7, -10, 3, 19, 15, -4, 8, -16, -5, -17, 1, -5, 4, -12, 11, 15, -3, 3, 13, -12, -5, -5, -5, -4, 36, -21, -3, -25, 2, -1, 11, -13, 6, 37, 5, 11, 19, 15, -13, 3, -5, -50, 11, 22, -14, -4, 16, 11, -3, -13, -4, 3, 2, -12, -12, 7, 21, 1, 4, 4, -14, 13, 3, 17, -55, 12, -7, 1, -12, -3, 11, -1, -26, -43, 58, 7, 4, 21, -2, 10, -2, -24, -3, 71, -20, -69, -25, -36, 6, -1, -13, 0, -17, 4, 2, 8, -1, -2, 2, -3, 1, 18, -8, 17, -5, -36, 15, -42, -12, -2, 38, 31, 20, 6, -46, 19, -12, 24, 6, 8, -4, -17, -2, 0, 37, -8, -1, 12, 9, 6, -25, -2, 14, 4, -27, 15, 5, 8, 5, 13, 2, 11, -9, 28, -26, -9, 10, 0, -10, 2, -15, 7, 6, -7, -6, 11, 3, 0, -8, 1, 10, -9, -14, 0, -15, 44, -5, 0, 1, 1, 4, 8, -28, 18, 12, 9, 26, 0, 14, 0, 12, 10, 5, 4, 19, 6, 26, 23, -8, 2, 5, -2, -14, -40, 0, 1, 9, -10, 2, -2, 32, 24, -8, 6, -1, -33, 8, 7, 8, 3, -3, 13, -60, -2, 18, -2, -21, 1, -19, 42, -3, -29, 5, 7, 21, -22, 3, 24, -4, -10, 5, 14, 8, 38, 7, 1, 6, 1, 0, -11, -5, 29, 2, 17, -21, -14, -8, -2, -4, 4, 18, 12, -1, 33, 7, -12, -26, 4, 14, 3, -8, -41, 12, 2, -3, -6, 32, -43, -6, -42, -6, -6, -3, 11, -13, 1, 2, 5, -6, -5};

float bias_raw[672]={-0.6940091848373413, 0.3444897532463074, 0.06683456897735596, -1.4201058149337769, -0.9159039258956909, 0.5372093319892883, 0.45369306206703186, -0.8251504898071289, -0.44969815015792847, 1.2568856477737427, -1.281705379486084, -0.16858991980552673, 0.6791164875030518, 1.9045567512512207, -1.9093645811080933, -0.35140207409858704, -0.7684454917907715, -1.2124117612838745, 1.0088341236114502, 0.06833922863006592, -1.3079099655151367, -0.8539458513259888, 1.4096248149871826, -0.8264572024345398, -0.15893590450286865, 0.6857832670211792, -0.5619138479232788, 0.1899794638156891, -0.6890648603439331, -1.6071500778198242, 0.6554940342903137, 0.4922292232513428, -0.3298405110836029, 1.6849440336227417, 1.081284523010254, -0.10030406713485718, -1.2380919456481934, 0.9340648651123047, -0.09419985115528107, -0.9671674370765686, -1.3966727256774902, -0.28757232427597046, -1.2635761499404907, -4.185705184936523, 0.041080594062805176, -1.1425684690475464, 0.6304669380187988, -1.456549882888794, -1.0440040826797485, 0.9945228099822998, 0.16867034137248993, -1.5223519802093506, -1.9365344047546387, 0.2898625135421753, -1.1494324207305908, -1.295005440711975, -0.19969801604747772, 1.1599705219268799, -1.3233309984207153, -1.168640375137329, -2.0102007389068604, 1.6299664974212646, -0.43139025568962097, 1.172640323638916, -1.050419569015503, -0.49742740392684937, 0.6849520802497864, 0.30220937728881836, -0.19741567969322205, 0.8972138166427612, -0.7434834837913513, 0.24675342440605164, 1.4253315925598145, 1.362331509590149, 0.2422846257686615, -0.7039662003517151, 1.7253129482269287, 0.20295318961143494, 1.7899459600448608, -0.36503612995147705, 0.1434621959924698, 1.635969877243042, 1.3101427555084229, 0.5725826025009155, -2.9899935722351074, 0.6120395660400391, -4.573795795440674, 0.7958106994628906, -2.1811463832855225, 0.48019158840179443, 0.26047390699386597, -0.7554293870925903, -0.9053311347961426, 0.604714572429657, -0.6612932682037354, -2.2600646018981934, -0.32403695583343506, -0.8025058507919312, -3.780867576599121, -0.6513453722000122, -0.4929269552230835, 0.8396125435829163, -0.6070491075515747, -0.6739602088928223, 0.9485650062561035, -2.3747894763946533, 0.1441604197025299, -0.008754193782806396, -0.20800995826721191, 2.68957781791687, -2.1636481285095215, -0.5647783279418945, -0.8095736503601074, -0.875885009765625, 1.2090319395065308, -1.1894737482070923, 1.1910607814788818, 3.007741928100586, 0.07058402895927429, -0.8934298753738403, -0.159573033452034, 0.013856470584869385, 1.1970328092575073, -0.5511887669563293, -0.23891475796699524, -0.1961456537246704, -1.0033835172653198, 0.8379297256469727, -2.9663729667663574, -2.9031105041503906, -0.36309999227523804, 0.31015273928642273, 0.20370399951934814, 0.9775480031967163, -1.3087780475616455, 0.8226932287216187, 0.41474977135658264, -0.598761796951294, -0.8312732577323914, -2.309878349304199, -0.6781492829322815, 2.769216299057007, 0.2592512369155884, -0.6798499822616577, -0.22074800729751587, 1.0803457498550415, -1.140509009361267, 0.42901888489723206, -1.1865599155426025, -1.480022668838501, 0.21557685732841492, -1.4553256034851074, 0.5285630822181702, 0.743428111076355, 0.17331546545028687, -0.12178459763526917, -0.3245922327041626, 0.4452982544898987, -0.9177225828170776, 2.1563103199005127, 0.7466179728507996, -1.3705627918243408, -0.7621102333068848, 0.41972771286964417, 0.7233824729919434, 0.8247511386871338, -0.01995694637298584, 0.42207640409469604, -2.368975877761841, 0.8689723014831543, -0.23283827304840088, -1.5192811489105225, -0.432069331407547, -0.31610307097435, 0.23410633206367493, -0.5056371092796326, 0.1764591932296753, 0.23585985600948334, -1.8810522556304932, 0.18404649198055267, 0.9653499722480774, -2.6245083808898926, 0.8711657524108887, -3.0859532356262207, -2.062483072280884, -1.059812068939209, 0.3966646194458008, 0.5709965825080872, 0.40841227769851685, -0.8721591830253601, -3.8619894981384277, -0.5870261192321777, -1.3788697719573975, -1.1554455757141113, 0.7980877161026001, -0.7160439491271973, 0.6840775012969971, -0.8046313524246216, -0.6096825003623962, 0.6586827039718628, 0.034072890877723694, 1.1132407188415527, -0.3748253583908081, 0.09617030620574951, -1.4471492767333984, -1.068468451499939, -0.38979366421699524, 0.5887119174003601, -3.6769397258758545, 0.32198387384414673, 0.9025392532348633, 0.3647417426109314, 1.1796042919158936, 0.2678098678588867, 0.8641108274459839, -2.363671064376831, 1.165255069732666, 1.1698752641677856, -1.2436473369598389, -1.5736894607543945, 0.20480161905288696, 0.3482021689414978, 1.7758108377456665, 1.5636131763458252, 0.5328065156936646, -0.12371981143951416, 0.081327885389328, 1.0648491382598877, -0.937583327293396, -1.1423360109329224, -0.2141573429107666, -0.8873888254165649, 0.9300833940505981, 1.1223382949829102, 0.30024397373199463, -0.2937237620353699, -2.57295560836792, -1.0524775981903076, -1.2117799520492554, -1.6691458225250244, 0.3050203323364258, 1.3808372020721436, -4.723173141479492, 0.179082989692688, 3.882214069366455, -1.3553386926651, 0.31306883692741394, -1.8044699430465698, 0.6612733602523804, 0.6782869100570679, 1.0702149868011475, 0.6960852146148682, -1.1776467561721802, -1.9038022756576538, -2.837531089782715, 1.6489750146865845, 0.930188775062561, 0.5253099799156189, 0.48087364435195923, -0.7900538444519043, -0.0490230917930603, -0.06186705827713013, -5.289222717285156, -2.477785587310791, 1.3004751205444336, -0.8942773342132568, -0.5513507127761841, -1.783292531967163, 0.5980743169784546, 0.20024076104164124, 0.1403554528951645, -1.8022866249084473, 0.3857673406600952, 0.8610364198684692, -3.218008041381836, 2.0769903659820557, -0.5429405570030212, -0.7787038087844849, 1.7443088293075562, -1.4645575284957886, -0.3773840367794037, -2.648219108581543, 0.6877578496932983, 1.1939866542816162, 2.0413870811462402, 1.1173415184020996, -1.2576521635055542, -1.1251142024993896, -1.3162238597869873, -0.8864437341690063, -1.3551732301712036, -0.38717028498649597, -1.1537296772003174, 3.4595084190368652, -1.0885199308395386, 0.551893949508667, 0.7028211355209351, 0.7133059501647949, -1.460794448852539, 1.281484842300415, -0.926746129989624, 0.11979430913925171, -1.330405831336975, 0.7238017320632935, -1.1830443143844604, -1.2830389738082886, 0.6101700067520142, -0.725256085395813, -1.012751579284668, 0.16909366846084595, 1.2506392002105713, 0.7309807538986206, 1.3261289596557617, 2.30476450920105, -1.2495530843734741, 0.42190515995025635, -0.44354307651519775, 0.8007019758224487, -1.428245186805725, -3.364408493041992, -2.0403058528900146, -0.46804702281951904, 0.5390130877494812, 0.797802746295929, -1.1466829776763916, -1.0997700691223145, -0.004980400204658508, 0.5420631170272827, 0.44368278980255127, 0.3786962032318115, -0.7762888669967651, -0.5259096622467041, -1.1960961818695068, -0.35464441776275635, 0.5617580413818359, -1.4178364276885986, -0.5962185859680176, 0.6734541654586792, 0.08589339256286621, 2.5229344367980957, -0.9731124043464661, -0.4737078845500946, 1.0716025829315186, -0.3151698112487793, -0.7701700329780579, 0.6758131980895996, -0.5401356220245361, 1.035135269165039, 0.8018509745597839, -1.331502079963684, 0.5273602604866028, 1.4396107196807861, 0.21614420413970947, -1.1432702541351318, 2.0131399631500244, -2.848005771636963, 0.2579379677772522, 0.4249770939350128, -0.1383061707019806, -2.672053813934326, 0.8264245390892029, 0.6480719447135925, -1.2597203254699707, -0.6489312052726746, -0.7946133613586426, 1.4392211437225342, 0.4564580023288727, 0.4365662932395935, -0.0899960994720459, 0.14357109367847443, -1.049626350402832, 0.8970996141433716, 1.5435528755187988, 0.5155587196350098, 0.5212690234184265, 0.5589023232460022, 0.6044526696205139, -1.144870638847351, 0.7266240119934082, -0.8475506901741028, -0.06376629322767258, 1.8886961936950684, 1.0395689010620117, -0.4053400158882141, -0.8796388506889343, -0.39692601561546326, -0.23819175362586975, -0.2614540159702301, 0.6109089851379395, -1.0178457498550415, -1.3437384366989136, 1.2585780620574951, -1.4138067960739136, -1.1067007780075073, -2.0439634323120117, -1.3386471271514893, 1.6255139112472534, -1.5178805589675903, -0.6275991201400757, 0.5274640917778015, -1.0661205053329468, -0.9291495680809021, 0.6518728137016296, -0.36850759387016296, -0.3998710513114929, -0.009435877203941345, 2.4685537815093994, -0.979336142539978, 0.5216285586357117, -0.6161044836044312, 0.21986722946166992, -1.0105637311935425, 3.8108932971954346, -0.7883803248405457, 1.4716308116912842, 0.662786602973938, -1.0198075771331787, 0.2670392692089081, -0.6515733003616333, -1.078383207321167, 1.2116135358810425, 0.3772850036621094, 0.6034640073776245, 1.0006837844848633, 0.7989413738250732, -1.087462306022644, -1.4563493728637695, -1.1977416276931763, -1.2949562072753906, -3.6541292667388916, 0.5928980112075806, -0.07213646173477173, -0.9753172397613525, 1.6663715839385986, -1.9688993692398071, -1.1537925004959106, 0.43609392642974854, -0.047053754329681396, 0.5945037603378296, -1.5307329893112183, -1.034339427947998, 0.08220900595188141, -0.7919232249259949, -0.5771699547767639, -0.745190441608429, -1.2041816711425781, 0.33335602283477783, 1.0057661533355713, 1.4797283411026, 0.7294971942901611, -2.3216540813446045, 0.5719605684280396, -0.02610301971435547, -0.4766853153705597, -2.030290126800537, -1.5170332193374634, 1.1504838466644287, 0.7075613141059875, 0.8696600198745728, 0.3557131886482239, -3.0010030269622803, 1.1834803819656372, -2.9971797466278076, 0.2687499523162842, -1.459114670753479, 0.6705489158630371, -0.1914951205253601, 0.33077043294906616, -0.4885646104812622, -1.2072217464447021, -0.53685462474823, -2.105236768722534, -1.4806960821151733, -2.144012212753296, -1.1357320547103882, 1.2742164134979248, 0.1288129836320877, 0.46782687306404114, -0.6118369102478027, -0.9474622011184692, -1.367161512374878, -0.005652448628097773, -0.6185135841369629, -1.5654581785202026, -0.1265486180782318, -0.4023247957229614, 0.12905806303024292, -1.457115888595581, 0.3441532850265503, 0.27693769335746765, -0.6129904389381409, 0.5997353196144104, -1.1293308734893799, -2.1279678344726562, 0.29751959443092346, -0.27370190620422363, 0.9341648817062378, 0.07970035076141357, 3.797260284423828, -2.8368101119995117, -0.3481435775756836, 0.31410089135169983, -1.0006389617919922, 0.3497111201286316, 0.8369524478912354, -0.859981894493103, 0.34573182463645935, -0.5582828521728516, 0.9700254201889038, 0.9943269491195679, -1.1314032077789307, 0.18066057562828064, 0.15706822276115417, -0.03644263744354248, 0.12568922340869904, -0.46531474590301514, 1.5679353475570679, -1.200027346611023, 2.755021095275879, 1.956140398979187, -0.18132320046424866, -1.4014233350753784, 0.7056486010551453, 0.19306284189224243, 1.84136164188385, -2.425652265548706, 0.6468442678451538, -3.214723825454712, 1.5130592584609985, 0.23554706573486328, -1.574453353881836, -1.161360502243042, 1.1732409000396729, -1.8269014358520508, 0.2917344570159912, 0.034119367599487305, -0.761161208152771, -0.052389055490493774, 0.6268657445907593, -1.7500196695327759, 0.697051465511322, -0.5854029655456543, 0.5958989262580872, 0.7406879663467407, -1.9720054864883423, -1.3231303691864014, 0.6485880613327026, 0.7907607555389404, 0.16390277445316315, -3.749588966369629, 3.3477439880371094, 1.1131322383880615, -0.41227585077285767, 0.5510483980178833, 0.24180327355861664, -0.4912079870700836, -0.6616050601005554, -0.5248019695281982, -1.1052049398422241, -0.01840163581073284, 0.7747064828872681, -0.5775566101074219, -1.718583106994629, -2.470416307449341, 0.6792756915092468, -1.093972086906433, 0.7306313514709473, 1.2174652814865112, 1.458122968673706, -0.4585786461830139, 0.3927764892578125, 0.5103211998939514, -2.5673248767852783, 1.0104641914367676, -0.583406925201416, -2.589475631713867, -0.3842318654060364, -0.8748518228530884, -1.15068519115448, -0.2627989649772644, 1.212770700454712, 0.39006519317626953, -0.14917731285095215, -0.12512007355690002, 0.3846385180950165, -1.2134814262390137, 0.16321484744548798, 0.14540961384773254, -0.653311014175415, 0.3344276249408722, 0.32520413398742676, -0.43974435329437256, -1.8405721187591553, 0.24777375161647797, -1.393071174621582, -0.3883587121963501, -0.9623897671699524, 0.6062275767326355, -0.1249421238899231, -0.7657728791236877, 0.03606855869293213, -1.3834787607192993, 0.17509837448596954, -1.7981282472610474, -0.015215873718261719, 0.8599728345870972, 0.767212450504303, -1.0934231281280518, -0.010728627443313599, 0.7832756042480469, 0.6974397301673889, -0.5959197878837585, 0.5128885507583618, 0.4425874352455139, -0.48254647850990295, -3.165625810623169, 1.7735373973846436, -1.498111367225647, 2.4827418327331543, 0.6621683835983276, 1.4209656715393066, -2.528810739517212, 0.3913632333278656, -0.8299984931945801, -3.4120500087738037, -0.35210442543029785, -0.5126961469650269, -0.8218218088150024, -0.9465329051017761, -2.42043399810791, -0.7388067245483398, 0.6533452868461609, 0.07671499252319336, -1.4655842781066895, 0.06138110160827637, 0.3789175748825073, 0.45641326904296875, 1.018353819847107, -1.123335361480713, 0.1854950189590454, -0.017102926969528198, 0.35434240102767944, -0.6652588844299316, -0.656464695930481, -0.12420861423015594, -1.9540483951568604, -3.088965892791748, 0.7819699645042419, 0.23153197765350342, -0.37974774837493896, -0.9942328929901123, -0.08757713437080383, 0.2572401165962219, 0.9605416655540466, 0.9543548822402954, -0.07589292526245117, -0.4318898320198059, -0.28416207432746887, -1.6357823610305786, 0.5635838508605957, 0.1756688803434372, -0.5027538537979126, 0.25757837295532227, 1.245261788368225, -0.4164333641529083, 1.5270215272903442, 1.2847808599472046, -1.0490832328796387, -0.22464390099048615, 0.20418767631053925, -0.44798728823661804, -0.35071825981140137};

int8_t* filter_tensor_data=filter_raw;
float* bias_tensor_data=bias_raw;

bool has_conv_bias=true;
int stride_width=1;
int stride_height=1;
TfLiteFusedActivation activation=kTfLiteActNone;
int dilation_width_factor=1;
int dilation_height_factor=1;
const int filter_dims_size=4;
const int filter_dims_raw[4]={1,5,5,672};
const int bias_dims_size=1;
const int32_t bias_dims_raw[1]={672};
TfLitePadding paddings=kTfLitePaddingSame;
TfLiteType filter_type=kTfLiteInt8;
TfLiteType bias_type=kTfLiteFloat32;
const float scale_filter=0.0;
const int32_t zero_point_filter=0;
const float scale_bias=0.0;
const int32_t zero_point_bias=0;

struct OpData {
  TfLitePaddingValues padding;
  // The scaling factor from input to output (aka the 'real multiplier') can
  // be represented as a fixed point multiplier plus a left shift.
  int32_t output_multiplier;
  int output_shift;
  // The range of the fused activation layer. For example for kNone and
  // uint8_t these would be 0 and 255.
  int32_t output_activation_min;
  int32_t output_activation_max;

  // Per channel output multiplier and shift.
  std::vector<int32_t> per_channel_output_multiplier;
  std::vector<int> per_channel_output_shift;

  // Hybrid per channel temporary tensors.
  int input_quantized_id = kTensorNotAllocated;
  int scaling_factors_id = kTensorNotAllocated;
  int input_offset_id = kTensorNotAllocated;
  int32_t input_quantized_index;
  int32_t scaling_factors_index;
  int32_t input_offset_index;
};

void ExtractDepthConvParams(TfLitePadding padding, int stride_width, int stride_height,
                               int dilation_width_factor, int dilation_height_factor,
                               TfLiteFusedActivation activation,
                               TfLiteDepthwiseConvParams* data_params) {
  // TfLiteDepthwiseConvParams data_params;
  data_params->padding = padding;
  data_params->stride_width = stride_width;
  data_params->stride_height = stride_height;
  data_params->dilation_width_factor = dilation_width_factor;
  data_params->dilation_height_factor = dilation_height_factor;
  data_params->activation = activation;
  // return data_params;
}

void GetDepthConvTensor(TfLiteType type, const char* name, TfLiteIntArray* tensor_dims_data, 
                       TfLiteQuantizationParams quant_params, char* tensor_data,
                       TfLiteAffineQuantization* quant_struct, size_t bytes_size,
                       TfLiteTensor* tensor) {
  tensor->type = type;
  tensor->name = name;
  tensor->dims = tensor_dims_data;
  tensor->params = quant_params;
  // tensor->data.raw = reinterpret_cast<char*>(tensor_data);
  tensor->data.raw = tensor_data;
  tensor->bytes = bytes_size;
  tensor->allocation_type = kTfLiteMemNone;
  // data_0.allocation = allocation;
  tensor->is_variable = false;
  if (type != kTfLiteFloat32) {
    tensor->quantization.type = kTfLiteAffineQuantization;
    tensor->quantization.params = quant_struct;
  } else {
    tensor->quantization.type = kTfLiteNoQuantization;
  }
  tensor->sparsity = nullptr;
}
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  // This is a builtin op, so we don't use the contents in 'buffer', if any.
  // Instead, we allocate a new object to carry information from Prepare() to
  // Eval().
  return new OpData;
}

void Free(TfLiteContext* context, void* buffer) {
  delete reinterpret_cast<OpData*>(buffer);
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  // auto* params =
  //     reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data);
  TfLiteDepthwiseConvParams data_params;
  ExtractDepthConvParams(paddings, stride_width, stride_height, dilation_width_factor, dilation_height_factor, activation, &data_params);
  TfLiteDepthwiseConvParams* params = &data_params;

  OpData* data = reinterpret_cast<OpData*>(node->user_data);

  bool has_bias = false;

  // TF_LITE_ENSURE(context, has_bias || NumInputs(node) == 2);
  const TfLiteTensor* input;
  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));
  TfLiteTensor filter_tensor;
  TfLiteIntArray* filter_dims_data = TfLiteIntArrayCreate(filter_dims_size);
  int size_filter = 1;
  for (int i = 0; i < filter_dims_size; i++) {
    // std::cout << "dims_raw: " << dims_raw[i] << std::endl;
    filter_dims_data->data[i] = filter_dims_raw[i];
    size_filter *= filter_dims_raw[i];
  }
  size_t bytes_size_filter = sizeof(float) * size_filter;
  TfLiteQuantizationParams filter_params;
  filter_params.scale=scale_filter;
  filter_params.zero_point=zero_point_filter;
  TfLiteFloatArray* scale_array_filter = TfLiteFloatArrayCreate(1);
  scale_array_filter->data[0] = scale_filter;
  TfLiteIntArray* zero_point_array_filter = TfLiteIntArrayCreate(1);
  zero_point_array_filter->data[0] = zero_point_filter;

  TfLiteAffineQuantization quant_struct_filter;
  quant_struct_filter.scale = scale_array_filter;
  quant_struct_filter.zero_point = zero_point_array_filter;
  quant_struct_filter.quantized_dimension = 0;
  // float* filter_data;
  // filter_tensor_data = filter_raw;
  GetDepthConvTensor(filter_type, "filter", filter_dims_data, filter_params,
                       reinterpret_cast<char*>(filter_tensor_data),
                       &quant_struct_filter, bytes_size_filter, &filter_tensor);
  const TfLiteTensor* filter = &filter_tensor;
  // TF_LITE_ENSURE_OK(context,
  //                   GetInputSafe(context, node, kFilterTensor, &filter));
  const TfLiteTensor* bias = nullptr;

  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TfLiteTensor* output;
  TF_LITE_ENSURE_OK(context,
                    GetOutputSafe(context, node, kOutputTensor, &output));

  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);
  TF_LITE_ENSURE_EQ(context, NumDimensions(filter), 4);
  TF_LITE_ENSURE(context, params->dilation_height_factor > 0);
  TF_LITE_ENSURE(context, params->dilation_width_factor > 0);

  const TfLiteType data_type = input->type;

  const TfLiteType filter_type = filter->type;
  const bool is_hybrid =
      data_type == kTfLiteFloat32 && filter_type == kTfLiteInt8;
  TF_LITE_ENSURE(context,
                 data_type == kTfLiteFloat32 || data_type == kTfLiteUInt8 ||
                     data_type == kTfLiteInt8 || data_type == kTfLiteInt16);
  TF_LITE_ENSURE_TYPES_EQ(context, output->type, data_type);
  if (!is_hybrid) {
    TF_LITE_ENSURE(context,
                   filter->type == data_type || data_type == kTfLiteInt16);
  }

  if (data_type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
  }

  // Filter in DepthwiseConv is expected to be [1, H, W, O].
  TF_LITE_ENSURE_EQ(context, SizeOfDimension(filter, 0), 1);

  if (has_bias) {
    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kBiasTensor, &bias));
    if (data_type == kTfLiteUInt8 || data_type == kTfLiteInt8) {
      TF_LITE_ENSURE_TYPES_EQ(context, bias->type, kTfLiteInt32);
      TF_LITE_ENSURE_EQ(context, bias->params.zero_point, 0);
    } else if (data_type == kTfLiteInt16) {
      TF_LITE_ENSURE_TYPES_EQ(context, bias->type, kTfLiteInt64);
      TF_LITE_ENSURE_EQ(context, bias->params.zero_point, 0);
    } else {
      TF_LITE_ENSURE_TYPES_EQ(context, bias->type, data_type);
    }
    TF_LITE_ENSURE_EQ(context, NumDimensions(bias), 1);
    TF_LITE_ENSURE_EQ(context, SizeOfDimension(filter, 3),
                      SizeOfDimension(bias, 0));
  }

  int channels_out = SizeOfDimension(filter, 3);
  int width = SizeOfDimension(input, 2);
  int height = SizeOfDimension(input, 1);
  int filter_width = SizeOfDimension(filter, 2);
  int filter_height = SizeOfDimension(filter, 1);
  int batches = SizeOfDimension(input, 0);

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params->padding;
  int out_width, out_height;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
      params->dilation_height_factor, params->dilation_width_factor, height,
      width, filter_height, filter_width, padding, &out_height, &out_width);

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training or
  // calibration.
  if (data_type != kTfLiteFloat32) {
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
                      kTfLiteAffineQuantization);
    TF_LITE_ENSURE(context, filter->quantization.type != kTfLiteNoQuantization);
    const auto* affine_quantization =
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
    TF_LITE_ENSURE(context, affine_quantization->scale);
    TF_LITE_ENSURE(context, (affine_quantization->scale->size == 1 ||
                             affine_quantization->scale->size == channels_out));

    data->per_channel_output_multiplier.resize(channels_out);
    data->per_channel_output_shift.resize(channels_out);
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
        context, input, filter, bias, output, params->activation,
        &data->output_multiplier, &data->output_shift,
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier.data(),
        data->per_channel_output_shift.data(), channels_out));
  }

  if (is_hybrid) {
    TF_LITE_ENSURE(context, filter->quantization.type != kTfLiteNoQuantization);
    const auto* affine_quantization =
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
    TF_LITE_ENSURE(context, affine_quantization->scale);
    TF_LITE_ENSURE_EQ(
        context, affine_quantization->scale->size,
        filter->dims->data[affine_quantization->quantized_dimension]);

    int temporaries_count = 0;
    data->input_quantized_index = temporaries_count;
    if (data->input_quantized_id == kTensorNotAllocated) {
      TF_LITE_ENSURE_OK(
          context, context->AddTensors(context, 1, &data->input_quantized_id));
    }
    ++temporaries_count;
    data->scaling_factors_index = temporaries_count;
    if (data->scaling_factors_id == kTensorNotAllocated) {
      TF_LITE_ENSURE_OK(
          context, context->AddTensors(context, 1, &data->scaling_factors_id));
    }
    ++temporaries_count;
    data->input_offset_index = temporaries_count;
    if (data->input_offset_id == kTensorNotAllocated) {
      TF_LITE_ENSURE_OK(
          context, context->AddTensors(context, 1, &data->input_offset_id));
    }
    ++temporaries_count;

    TfLiteIntArrayFree(node->temporaries);
    node->temporaries = TfLiteIntArrayCreate(temporaries_count);

    node->temporaries->data[data->input_quantized_index] =
        data->input_quantized_id;
    TfLiteTensor* input_quantized;
    TF_LITE_ENSURE_OK(
        context, GetTemporarySafe(context, node, data->input_quantized_index,
                                  &input_quantized));
    input_quantized->type = kTfLiteInt8;
    input_quantized->allocation_type = kTfLiteArenaRw;
    if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {
      TfLiteIntArray* input_quantized_size = TfLiteIntArrayCopy(input->dims);
      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_quantized,
                                                       input_quantized_size));
    }
    node->temporaries->data[data->scaling_factors_index] =
        data->scaling_factors_id;
    TfLiteTensor* scaling_factors;
    TF_LITE_ENSURE_OK(
        context, GetTemporarySafe(context, node, data->scaling_factors_index,
                                  &scaling_factors));
    scaling_factors->type = kTfLiteFloat32;
    scaling_factors->allocation_type = kTfLiteArenaRw;
    const int batch_size = SizeOfDimension(input, 0);
    int scaling_dims[1] = {batch_size};
    if (!TfLiteIntArrayEqualsArray(scaling_factors->dims, 1, scaling_dims)) {
      TfLiteIntArray* scaling_factors_size = TfLiteIntArrayCreate(1);
      scaling_factors_size->data[0] = batch_size;
      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, scaling_factors,
                                                       scaling_factors_size));
    }
    node->temporaries->data[data->input_offset_index] = data->input_offset_id;
    TfLiteTensor* input_offsets;
    TF_LITE_ENSURE_OK(context,
                      GetTemporarySafe(context, node, data->input_offset_index,
                                       &input_offsets));
    input_offsets->type = kTfLiteInt32;
    input_offsets->allocation_type = kTfLiteArenaRw;
    if (!TfLiteIntArrayEqualsArray(input_offsets->dims, 1, scaling_dims)) {
      TfLiteIntArray* input_offsets_size = TfLiteIntArrayCreate(1);
      input_offsets_size->data[0] = batch_size;
      TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_offsets,
                                                       input_offsets_size));
    }
  }

  TfLiteIntArray* outputSize = TfLiteIntArrayCreate(4);
  outputSize->data[0] = batches;
  outputSize->data[1] = out_height;
  outputSize->data[2] = out_width;
  outputSize->data[3] = channels_out;
  return context->ResizeTensor(context, output, outputSize);
}

TfLiteStatus ComputeDepthMultiplier(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    const TfLiteTensor* filter,
                                    int16* depth_multiplier) {
  int num_filter_channels = SizeOfDimension(filter, 3);
  int num_input_channels = SizeOfDimension(input, 3);
  TF_LITE_ENSURE(context, num_input_channels != 0);
  TF_LITE_ENSURE_EQ(context, num_filter_channels % num_input_channels, 0);
  *depth_multiplier = num_filter_channels / num_input_channels;
  return kTfLiteOk;
}

template <KernelType kernel_type>
TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteDepthwiseConvParams* params, OpData* data,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
                           &output_activation_max);

  DepthwiseParams op_params;
  op_params.padding_type = PaddingType::kSame;
  op_params.padding_values.width = data->padding.width;
  op_params.padding_values.height = data->padding.height;
  op_params.stride_width = params->stride_width;
  op_params.stride_height = params->stride_height;
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.float_activation_min = output_activation_min;
  op_params.float_activation_max = output_activation_max;
  TF_LITE_ENSURE_STATUS(ComputeDepthMultiplier(context, input, filter,
                                               &op_params.depth_multiplier));
  if (kernel_type == kReference) {
    reference_ops::DepthwiseConv(
        op_params, GetTensorShape(input), GetTensorData<float>(input),
        GetTensorShape(filter), GetTensorData<float>(filter),
        GetTensorShape(bias), GetTensorData<float>(bias),
        GetTensorShape(output), GetTensorData<float>(output));
  } else {
    optimized_ops::DepthwiseConv<float, float>(
        op_params, GetTensorShape(input), GetTensorData<float>(input),
        GetTensorShape(filter), GetTensorData<float>(filter),
        GetTensorShape(bias), GetTensorData<float>(bias),
        GetTensorShape(output), GetTensorData<float>(output),
        CpuBackendContext::GetFromContext(context));
  }
  return kTfLiteOk;
}

template <KernelType kernel_type>
TfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                           TfLiteDepthwiseConvParams* params, OpData* data,
                           const TfLiteTensor* input,
                           const TfLiteTensor* filter, const TfLiteTensor* bias,
                           TfLiteTensor* output) {
  auto input_offset = -input->params.zero_point;
  auto filter_offset = -filter->params.zero_point;
  auto output_offset = output->params.zero_point;

  DepthwiseParams op_params;
  op_params.padding_type = PaddingType::kSame;
  op_params.padding_values.width = data->padding.width;
  op_params.padding_values.height = data->padding.height;
  op_params.stride_width = params->stride_width;
  op_params.stride_height = params->stride_height;
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.input_offset = input_offset;
  op_params.weights_offset = filter_offset;
  op_params.output_offset = output_offset;
  op_params.output_multiplier = data->output_multiplier;
  op_params.output_shift = -data->output_shift;
  op_params.quantized_activation_min = data->output_activation_min;
  op_params.quantized_activation_max = data->output_activation_max;
  TF_LITE_ENSURE_STATUS(ComputeDepthMultiplier(context, input, filter,
                                               &op_params.depth_multiplier));
  if (kernel_type == kReference) {
    reference_ops::DepthwiseConv(
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
        GetTensorShape(filter), GetTensorData<uint8_t>(filter),
        GetTensorShape(bias), GetTensorData<int32_t>(bias),
        GetTensorShape(output), GetTensorData<uint8_t>(output));
  } else {
    optimized_ops::DepthwiseConv<uint8, int32>(
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
        GetTensorShape(filter), GetTensorData<uint8_t>(filter),
        GetTensorShape(bias), GetTensorData<int32_t>(bias),
        GetTensorShape(output), GetTensorData<uint8_t>(output),
        CpuBackendContext::GetFromContext(context));
  }
  return kTfLiteOk;
}

template <KernelType kernel_type>
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
                                     TfLiteDepthwiseConvParams* params,
                                     OpData* data, const TfLiteTensor* input,
                                     const TfLiteTensor* filter,
                                     const TfLiteTensor* bias,
                                     TfLiteTensor* output) {
  DepthwiseParams op_params;
  op_params.padding_type = PaddingType::kSame;
  op_params.padding_values.width = data->padding.width;
  op_params.padding_values.height = data->padding.height;
  op_params.stride_width = params->stride_width;
  op_params.stride_height = params->stride_height;
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.input_offset = -input->params.zero_point;
  op_params.weights_offset = 0;
  op_params.output_offset = output->params.zero_point;
  op_params.quantized_activation_min = data->output_activation_min;
  op_params.quantized_activation_max = data->output_activation_max;
  TF_LITE_ENSURE_STATUS(ComputeDepthMultiplier(context, input, filter,
                                               &op_params.depth_multiplier));

  if (kernel_type == kReference) {
    reference_integer_ops::DepthwiseConvPerChannel(
        op_params, data->per_channel_output_multiplier.data(),
        data->per_channel_output_shift.data(), GetTensorShape(input),
        GetTensorData<int8>(input), GetTensorShape(filter),
        GetTensorData<int8>(filter), GetTensorShape(bias),
        GetTensorData<int32>(bias), GetTensorShape(output),
        GetTensorData<int8>(output));
  } else {
    optimized_integer_ops::DepthwiseConvPerChannel(
        op_params, data->per_channel_output_multiplier.data(),
        data->per_channel_output_shift.data(), GetTensorShape(input),
        GetTensorData<int8>(input), GetTensorShape(filter),
        GetTensorData<int8>(filter), GetTensorShape(bias),
        GetTensorData<int32>(bias), GetTensorShape(output),
        GetTensorData<int8>(output),
        CpuBackendContext::GetFromContext(context));
  }
  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedPerChannel16x8(
    const TfLiteDepthwiseConvParams* params, const OpData* data,
    const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output) {
  DepthwiseParams op_params;
  op_params.padding_type = PaddingType::kSame;
  op_params.padding_values.width = data->padding.width;
  op_params.padding_values.height = data->padding.height;
  op_params.stride_width = params->stride_width;
  op_params.stride_height = params->stride_height;
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.depth_multiplier = params->depth_multiplier;
  op_params.weights_offset = 0;
  op_params.quantized_activation_min = data->output_activation_min;
  op_params.quantized_activation_max = data->output_activation_max;

  reference_integer_ops::DepthwiseConvPerChannel(
      op_params, data->per_channel_output_multiplier.data(),
      data->per_channel_output_shift.data(), GetTensorShape(input),
      GetTensorData<int16>(input), GetTensorShape(filter),
      GetTensorData<int8>(filter), GetTensorShape(bias),
      GetTensorData<std::int64_t>(bias), GetTensorShape(output),
      GetTensorData<int16>(output));

  return kTfLiteOk;
}

template <KernelType kernel_type>
TfLiteStatus EvalHybridPerChannel(TfLiteContext* context, TfLiteNode* node,
                                  TfLiteDepthwiseConvParams* params,
                                  OpData* data, const TfLiteTensor* input,
                                  const TfLiteTensor* filter,
                                  const TfLiteTensor* bias,
                                  TfLiteTensor* output) {
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
                           &output_activation_max);
  const int batch_size = SizeOfDimension(input, 0);
  TF_LITE_ENSURE(context, batch_size != 0);
  const int input_size = NumElements(input) / batch_size;
  TfLiteTensor* input_quantized;
  TF_LITE_ENSURE_OK(context,
                    GetTemporarySafe(context, node, data->input_quantized_index,
                                     &input_quantized));
  int8_t* quantized_input_ptr_batch = input_quantized->data.int8;
  TfLiteTensor* scaling_factors_tensor;
  TF_LITE_ENSURE_OK(context,
                    GetTemporarySafe(context, node, data->scaling_factors_index,
                                     &scaling_factors_tensor));
  float* scaling_factors_ptr = GetTensorData<float>(scaling_factors_tensor);
  TfLiteTensor* input_offset_tensor;
  TF_LITE_ENSURE_OK(context,
                    GetTemporarySafe(context, node, data->input_offset_index,
                                     &input_offset_tensor));
  int32_t* input_offset_ptr = GetTensorData<int32_t>(input_offset_tensor);

  for (int b = 0; b < batch_size; ++b) {
    const int offset = b * input_size;
    tensor_utils::AsymmetricQuantizeFloats(
        GetTensorData<float>(input) + offset, input_size,
        quantized_input_ptr_batch + offset, &scaling_factors_ptr[b],
        &input_offset_ptr[b]);
  }

  DepthwiseParams op_params;
  op_params.padding_type = PaddingType::kSame;
  op_params.padding_values.width = data->padding.width;
  op_params.padding_values.height = data->padding.height;
  op_params.stride_width = params->stride_width;
  op_params.stride_height = params->stride_height;
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.depth_multiplier = params->depth_multiplier;

  op_params.weights_offset = 0;
  op_params.float_activation_min = output_activation_min;
  op_params.float_activation_max = output_activation_max;
  TF_LITE_ENSURE(context, filter->quantization.type != kTfLiteNoQuantization);
  const auto* affine_quantization =
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  if (kernel_type == kReference) {
    reference_integer_ops::DepthwiseConvHybridPerChannel(
        op_params, scaling_factors_ptr, GetTensorShape(input),
        quantized_input_ptr_batch, GetTensorShape(filter),
        GetTensorData<int8>(filter), GetTensorShape(bias),
        GetTensorData<float>(bias), GetTensorShape(output),
        GetTensorData<float>(output), affine_quantization->scale->data,
        input_offset_ptr);
  } else {
    optimized_integer_ops::DepthwiseConvHybridPerChannel(
        op_params, scaling_factors_ptr, GetTensorShape(input),
        quantized_input_ptr_batch, GetTensorShape(filter),
        GetTensorData<int8>(filter), GetTensorShape(bias),
        GetTensorData<float>(bias), GetTensorShape(output),
        GetTensorData<float>(output), affine_quantization->scale->data,
        input_offset_ptr, CpuBackendContext::GetFromContext(context));
  }

  return kTfLiteOk;
}

template <KernelType kernel_type, TfLiteType input_type>
TfLiteStatus EvalImpl(TfLiteContext* context, TfLiteNode* node) {
  // auto* params =
  //     reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data);
  TfLiteDepthwiseConvParams data_params;
  ExtractDepthConvParams(paddings, stride_width, stride_height, dilation_width_factor, dilation_height_factor, activation, &data_params);
  TfLiteDepthwiseConvParams* params = &data_params;

  OpData* data = reinterpret_cast<OpData*>(node->user_data);

  TfLiteTensor* output;
  TF_LITE_ENSURE_OK(context,
                    GetOutputSafe(context, node, kOutputTensor, &output));
  const TfLiteTensor* input;
  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));
  // const TfLiteTensor* filter;
  // TF_LITE_ENSURE_OK(context,
  //                   GetInputSafe(context, node, kFilterTensor, &filter));
  TfLiteTensor filter_tensor;
  TfLiteIntArray* filter_dims_data = TfLiteIntArrayCreate(filter_dims_size);
  int size_filter = 1;
  for (int i = 0; i < filter_dims_size; i++) {
    // std::cout << "dims_raw: " << dims_raw[i] << std::endl;
    filter_dims_data->data[i] = filter_dims_raw[i];
    size_filter *= filter_dims_raw[i];
  }
  size_t bytes_size_filter = sizeof(float) * size_filter;
  TfLiteQuantizationParams filter_params;
  filter_params.scale=scale_filter;
  filter_params.zero_point=zero_point_filter;

  TfLiteFloatArray* scale_array_filter = TfLiteFloatArrayCreate(1);
  scale_array_filter->data[0] = scale_filter;
  TfLiteIntArray* zero_point_array_filter = TfLiteIntArrayCreate(1);
  zero_point_array_filter->data[0] = zero_point_filter;

  TfLiteAffineQuantization quant_struct_filter;
  quant_struct_filter.scale = scale_array_filter;
  quant_struct_filter.zero_point = zero_point_array_filter;
  quant_struct_filter.quantized_dimension = 0;
  // float* filter_data;
  // filter_tensor_data = filter_raw;
  GetDepthConvTensor(filter_type, "filter", filter_dims_data, filter_params,
                       reinterpret_cast<char*>(filter_tensor_data),
                       &quant_struct_filter, bytes_size_filter, &filter_tensor);
  const TfLiteTensor* filter = &filter_tensor;
  // const TfLiteTensor* bias =
  //     (NumInputs(node) == 3) ? GetInput(context, node, kBiasTensor) : nullptr;
  TfLiteTensor bias_tensor;
  const TfLiteTensor* bias;
  if (has_conv_bias) {
    TfLiteIntArray* bias_dims_data = TfLiteIntArrayCreate(bias_dims_size);
    int size_bias = 1;
    for (int i = 0; i < bias_dims_size; i++) {
      // std::cout << "dims_raw: " << dims_raw[i] << std::endl;
      bias_dims_data->data[i] = bias_dims_raw[i];
      size_bias *= bias_dims_raw[i];
    }
    size_t bytes_size_bias = sizeof(float) * size_bias;
    TfLiteQuantizationParams bias_params;
    bias_params.scale=scale_bias;
    bias_params.zero_point=zero_point_bias;

    TfLiteFloatArray* scale_array_bias = TfLiteFloatArrayCreate(1);
    scale_array_bias->data[0] = scale_bias;
    TfLiteIntArray* zero_point_array_bias = TfLiteIntArrayCreate(1);
    zero_point_array_bias->data[0] = zero_point_bias;

    TfLiteAffineQuantization quant_struct_bias;
    quant_struct_bias.scale = scale_array_bias;
    quant_struct_bias.zero_point = zero_point_array_bias;
    quant_struct_bias.quantized_dimension = 0;
    
    // float* bias_data;
    // bias_tensor_data = bias_raw;
    GetDepthConvTensor(bias_type, "bias", bias_dims_data, bias_params,
                        reinterpret_cast<char*>(bias_tensor_data), 
                        &quant_struct_bias, bytes_size_bias, &bias_tensor);
    bias = &bias_tensor;
  } else {
    bias = nullptr;
  }

  TFLITE_DCHECK_EQ(input_type, input->type);

  switch (input_type) {  // Already know in/out types are same.
    case kTfLiteFloat32:
      if (filter->type == kTfLiteFloat32) {
        return EvalFloat<kernel_type>(context, node, params, data, input,
                                      filter, bias, output);
      } else if (filter->type == kTfLiteInt8) {
        return EvalHybridPerChannel<kernel_type>(context, node, params, data,
                                                 input, filter, bias, output);
      } else {
        TF_LITE_KERNEL_LOG(
            context, "Type %s with filter type %s not currently supported.",
            TfLiteTypeGetName(input->type), TfLiteTypeGetName(filter->type));
        return kTfLiteError;
      }
      break;
    case kTfLiteUInt8:
      return EvalQuantized<kernel_type>(context, node, params, data, input,
                                        filter, bias, output);
      break;
    case kTfLiteInt8:
      return EvalQuantizedPerChannel<kernel_type>(context, node, params, data,
                                                  input, filter, bias, output);
      break;
    case kTfLiteInt16:
      return EvalQuantizedPerChannel16x8(params, data, input, filter, bias,
                                         output);
      break;
    default:
      context->ReportError(context, "Type %d not currently supported.",
                           input->type);
      return kTfLiteError;
  }
}

template <KernelType kernel_type>
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
  const TfLiteTensor* input;
  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));

  switch (input->type) {  // Already know in/out types are same.
    case kTfLiteFloat32:
      return EvalImpl<kernel_type, kTfLiteFloat32>(context, node);
    case kTfLiteUInt8:
      return EvalImpl<kernel_type, kTfLiteUInt8>(context, node);
    case kTfLiteInt8:
      return EvalImpl<kernel_type, kTfLiteInt8>(context, node);
    case kTfLiteInt16:
      return EvalImpl<kernel_type, kTfLiteInt16>(context, node);
    default:
      context->ReportError(context, "Type %d not currently supported.",
                           input->type);
      return kTfLiteError;
  }
}

}  // namespace aictfw

TfLiteRegistration* Register_aictfw_REF() {
  static TfLiteRegistration r = {
      aictfw::Init, aictfw::Free, aictfw::Prepare,
      aictfw::Eval<aictfw::kReference>};
  return &r;
}

TfLiteRegistration* Register_aictfw_GENERIC_OPT() {
  static TfLiteRegistration r = {
      aictfw::Init, aictfw::Free, aictfw::Prepare,
      aictfw::Eval<aictfw::kGenericOptimized>};
  return &r;
}

TfLiteRegistration* Register_aictfw_NEON_OPT() {
  static TfLiteRegistration r = {
      aictfw::Init, aictfw::Free, aictfw::Prepare,
      aictfw::Eval<aictfw::kNeonOptimized>};
  return &r;
}

TfLiteRegistration* Register_aictfw_NEON_OPT_UINT8() {
  static TfLiteRegistration r = {
      aictfw::Init, aictfw::Free, aictfw::Prepare,
      aictfw::EvalImpl<aictfw::kNeonOptimized, kTfLiteUInt8>};
  return &r;
}

TfLiteRegistration* Register_aictfw() {
#ifdef USE_NEON
  return Register_aictfw_NEON_OPT();
#else
  return Register_aictfw_GENERIC_OPT();
#endif
}

// Warning: Clients using this variant are responsible for ensuring that their
// models only need the UINT8 type. TFLite's op registration mechanism doesn't
// yet allow for more nuanced registration mechanisms.
TfLiteRegistration* Register_aictfw_UINT8() {
#ifdef USE_NEON
  return Register_aictfw_NEON_OPT_UINT8();
#else
  return Register_aictfw();
#endif
}

}  // namespace builtin
}  // namespace ops
}  // namespace tflite
